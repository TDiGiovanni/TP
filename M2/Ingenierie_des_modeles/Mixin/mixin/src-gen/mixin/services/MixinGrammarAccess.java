/*
 * generated by Xtext 2.19.0
 */
package mixin.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MixinGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.Mixin.Model");
		private final Assignment cInstructionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_0 = (RuleCall)cInstructionsAssignment.eContents().get(0);
		
		//Model:
		//	instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment() { return cInstructionsAssignment; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0() { return cInstructionsInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.Mixin.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTakeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Instruction:
		//	Take | Clean | Mix | Exit;
		@Override public ParserRule getRule() { return rule; }
		
		//Take | Clean | Mix | Exit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Take
		public RuleCall getTakeParserRuleCall_0() { return cTakeParserRuleCall_0; }
		
		//Clean
		public RuleCall getCleanParserRuleCall_1() { return cCleanParserRuleCall_1; }
		
		//Mix
		public RuleCall getMixParserRuleCall_2() { return cMixParserRuleCall_2; }
		
		//Exit
		public RuleCall getExitParserRuleCall_3() { return cExitParserRuleCall_3; }
	}
	public class TakeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.Mixin.Take");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTakeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantityINTTerminalRuleCall_1_0 = (RuleCall)cQuantityAssignment_1.eContents().get(0);
		private final Keyword cMLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputCupAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputCupINTTerminalRuleCall_4_0 = (RuleCall)cInputCupAssignment_4.eContents().get(0);
		
		//Take:
		//	"take" quantity=INT "mL" "from" inputCup=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"take" quantity=INT "mL" "from" inputCup=INT
		public Group getGroup() { return cGroup; }
		
		//"take"
		public Keyword getTakeKeyword_0() { return cTakeKeyword_0; }
		
		//quantity=INT
		public Assignment getQuantityAssignment_1() { return cQuantityAssignment_1; }
		
		//INT
		public RuleCall getQuantityINTTerminalRuleCall_1_0() { return cQuantityINTTerminalRuleCall_1_0; }
		
		//"mL"
		public Keyword getMLKeyword_2() { return cMLKeyword_2; }
		
		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//inputCup=INT
		public Assignment getInputCupAssignment_4() { return cInputCupAssignment_4; }
		
		//INT
		public RuleCall getInputCupINTTerminalRuleCall_4_0() { return cInputCupINTTerminalRuleCall_4_0; }
	}
	public class MixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.Mixin.Mix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantityINTTerminalRuleCall_1_0 = (RuleCall)cQuantityAssignment_1.eContents().get(0);
		private final Keyword cMLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestinationCupAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDestinationCupINTTerminalRuleCall_4_0 = (RuleCall)cDestinationCupAssignment_4.eContents().get(0);
		
		//Mix:
		//	"mix" quantity=INT "mL" "in" destinationCup=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"mix" quantity=INT "mL" "in" destinationCup=INT
		public Group getGroup() { return cGroup; }
		
		//"mix"
		public Keyword getMixKeyword_0() { return cMixKeyword_0; }
		
		//quantity=INT
		public Assignment getQuantityAssignment_1() { return cQuantityAssignment_1; }
		
		//INT
		public RuleCall getQuantityINTTerminalRuleCall_1_0() { return cQuantityINTTerminalRuleCall_1_0; }
		
		//"mL"
		public Keyword getMLKeyword_2() { return cMLKeyword_2; }
		
		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//destinationCup=INT
		public Assignment getDestinationCupAssignment_4() { return cDestinationCupAssignment_4; }
		
		//INT
		public RuleCall getDestinationCupINTTerminalRuleCall_4_0() { return cDestinationCupINTTerminalRuleCall_4_0; }
	}
	public class CleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.Mixin.Clean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Clean:
		//	{Clean} "clean";
		@Override public ParserRule getRule() { return rule; }
		
		//{Clean} "clean"
		public Group getGroup() { return cGroup; }
		
		//{Clean}
		public Action getCleanAction_0() { return cCleanAction_0; }
		
		//"clean"
		public Keyword getCleanKeyword_1() { return cCleanKeyword_1; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mixin.Mixin.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCupAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCupINTTerminalRuleCall_2_0 = (RuleCall)cCupAssignment_2.eContents().get(0);
		
		//Exit:
		//	"exit" "cup" cup=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"exit" "cup" cup=INT
		public Group getGroup() { return cGroup; }
		
		//"exit"
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }
		
		//"cup"
		public Keyword getCupKeyword_1() { return cCupKeyword_1; }
		
		//cup=INT
		public Assignment getCupAssignment_2() { return cCupAssignment_2; }
		
		//INT
		public RuleCall getCupINTTerminalRuleCall_2_0() { return cCupINTTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final InstructionElements pInstruction;
	private final TakeElements pTake;
	private final MixElements pMix;
	private final CleanElements pClean;
	private final ExitElements pExit;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MixinGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInstruction = new InstructionElements();
		this.pTake = new TakeElements();
		this.pMix = new MixElements();
		this.pClean = new CleanElements();
		this.pExit = new ExitElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mixin.Mixin".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	instructions+=Instruction*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Instruction:
	//	Take | Clean | Mix | Exit;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Take:
	//	"take" quantity=INT "mL" "from" inputCup=INT;
	public TakeElements getTakeAccess() {
		return pTake;
	}
	
	public ParserRule getTakeRule() {
		return getTakeAccess().getRule();
	}
	
	//Mix:
	//	"mix" quantity=INT "mL" "in" destinationCup=INT;
	public MixElements getMixAccess() {
		return pMix;
	}
	
	public ParserRule getMixRule() {
		return getMixAccess().getRule();
	}
	
	//Clean:
	//	{Clean} "clean";
	public CleanElements getCleanAccess() {
		return pClean;
	}
	
	public ParserRule getCleanRule() {
		return getCleanAccess().getRule();
	}
	
	//Exit:
	//	"exit" "cup" cup=INT;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
