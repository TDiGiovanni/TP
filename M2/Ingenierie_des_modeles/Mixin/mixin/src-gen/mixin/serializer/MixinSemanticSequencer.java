/*
 * generated by Xtext 2.19.0
 */
package mixin.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mixin.mixin.Clean;
import mixin.mixin.Exit;
import mixin.mixin.Mix;
import mixin.mixin.MixinPackage;
import mixin.mixin.Model;
import mixin.mixin.Take;
import mixin.services.MixinGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MixinSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MixinGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MixinPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MixinPackage.CLEAN:
				sequence_Clean(context, (Clean) semanticObject); 
				return; 
			case MixinPackage.EXIT:
				sequence_Exit(context, (Exit) semanticObject); 
				return; 
			case MixinPackage.MIX:
				sequence_Mix(context, (Mix) semanticObject); 
				return; 
			case MixinPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MixinPackage.TAKE:
				sequence_Take(context, (Take) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Instruction returns Clean
	 *     Clean returns Clean
	 *
	 * Constraint:
	 *     {Clean}
	 */
	protected void sequence_Clean(ISerializationContext context, Clean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Exit
	 *     Exit returns Exit
	 *
	 * Constraint:
	 *     cup=INT
	 */
	protected void sequence_Exit(ISerializationContext context, Exit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MixinPackage.Literals.EXIT__CUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MixinPackage.Literals.EXIT__CUP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExitAccess().getCupINTTerminalRuleCall_2_0(), semanticObject.getCup());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Mix
	 *     Mix returns Mix
	 *
	 * Constraint:
	 *     (quantity=INT destinationCup=INT)
	 */
	protected void sequence_Mix(ISerializationContext context, Mix semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MixinPackage.Literals.MIX__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MixinPackage.Literals.MIX__QUANTITY));
			if (transientValues.isValueTransient(semanticObject, MixinPackage.Literals.MIX__DESTINATION_CUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MixinPackage.Literals.MIX__DESTINATION_CUP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMixAccess().getQuantityINTTerminalRuleCall_1_0(), semanticObject.getQuantity());
		feeder.accept(grammarAccess.getMixAccess().getDestinationCupINTTerminalRuleCall_4_0(), semanticObject.getDestinationCup());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     instructions+=Instruction+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Take
	 *     Take returns Take
	 *
	 * Constraint:
	 *     (quantity=INT inputCup=INT)
	 */
	protected void sequence_Take(ISerializationContext context, Take semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MixinPackage.Literals.TAKE__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MixinPackage.Literals.TAKE__QUANTITY));
			if (transientValues.isValueTransient(semanticObject, MixinPackage.Literals.TAKE__INPUT_CUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MixinPackage.Literals.TAKE__INPUT_CUP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTakeAccess().getQuantityINTTerminalRuleCall_1_0(), semanticObject.getQuantity());
		feeder.accept(grammarAccess.getTakeAccess().getInputCupINTTerminalRuleCall_4_0(), semanticObject.getInputCup());
		feeder.finish();
	}
	
	
}
