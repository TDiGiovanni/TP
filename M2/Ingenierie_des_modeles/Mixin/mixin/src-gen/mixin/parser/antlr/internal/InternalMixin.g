/*
 * generated by Xtext 2.19.0
 */
grammar InternalMixin;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package mixin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mixin.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mixin.services.MixinGrammarAccess;

}

@parser::members {

 	private MixinGrammarAccess grammarAccess;

    public InternalMixinParser(TokenStream input, MixinGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MixinGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getInstructionsInstructionParserRuleCall_0());
			}
			lv_instructions_0_0=ruleInstruction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"instructions",
					lv_instructions_0_0,
					"mixin.Mixin.Instruction");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getTakeParserRuleCall_0());
		}
		this_Take_0=ruleTake
		{
			$current = $this_Take_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getCleanParserRuleCall_1());
		}
		this_Clean_1=ruleClean
		{
			$current = $this_Clean_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getMixParserRuleCall_2());
		}
		this_Mix_2=ruleMix
		{
			$current = $this_Mix_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getExitParserRuleCall_3());
		}
		this_Exit_3=ruleExit
		{
			$current = $this_Exit_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTake
entryRuleTake returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTakeRule()); }
	iv_ruleTake=ruleTake
	{ $current=$iv_ruleTake.current; }
	EOF;

// Rule Take
ruleTake returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='take'
		{
			newLeafNode(otherlv_0, grammarAccess.getTakeAccess().getTakeKeyword_0());
		}
		(
			(
				lv_quantity_1_0=RULE_INT
				{
					newLeafNode(lv_quantity_1_0, grammarAccess.getTakeAccess().getQuantityINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTakeRule());
					}
					setWithLastConsumed(
						$current,
						"quantity",
						lv_quantity_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='mL'
		{
			newLeafNode(otherlv_2, grammarAccess.getTakeAccess().getMLKeyword_2());
		}
		otherlv_3='from'
		{
			newLeafNode(otherlv_3, grammarAccess.getTakeAccess().getFromKeyword_3());
		}
		(
			(
				lv_inputCup_4_0=RULE_INT
				{
					newLeafNode(lv_inputCup_4_0, grammarAccess.getTakeAccess().getInputCupINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTakeRule());
					}
					setWithLastConsumed(
						$current,
						"inputCup",
						lv_inputCup_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMix
entryRuleMix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMixRule()); }
	iv_ruleMix=ruleMix
	{ $current=$iv_ruleMix.current; }
	EOF;

// Rule Mix
ruleMix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mix'
		{
			newLeafNode(otherlv_0, grammarAccess.getMixAccess().getMixKeyword_0());
		}
		(
			(
				lv_quantity_1_0=RULE_INT
				{
					newLeafNode(lv_quantity_1_0, grammarAccess.getMixAccess().getQuantityINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMixRule());
					}
					setWithLastConsumed(
						$current,
						"quantity",
						lv_quantity_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='mL'
		{
			newLeafNode(otherlv_2, grammarAccess.getMixAccess().getMLKeyword_2());
		}
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getMixAccess().getInKeyword_3());
		}
		(
			(
				lv_destinationCup_4_0=RULE_INT
				{
					newLeafNode(lv_destinationCup_4_0, grammarAccess.getMixAccess().getDestinationCupINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMixRule());
					}
					setWithLastConsumed(
						$current,
						"destinationCup",
						lv_destinationCup_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleClean
entryRuleClean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCleanRule()); }
	iv_ruleClean=ruleClean
	{ $current=$iv_ruleClean.current; }
	EOF;

// Rule Clean
ruleClean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCleanAccess().getCleanAction_0(),
					$current);
			}
		)
		otherlv_1='clean'
		{
			newLeafNode(otherlv_1, grammarAccess.getCleanAccess().getCleanKeyword_1());
		}
	)
;

// Entry rule entryRuleExit
entryRuleExit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExitRule()); }
	iv_ruleExit=ruleExit
	{ $current=$iv_ruleExit.current; }
	EOF;

// Rule Exit
ruleExit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='exit'
		{
			newLeafNode(otherlv_0, grammarAccess.getExitAccess().getExitKeyword_0());
		}
		otherlv_1='cup'
		{
			newLeafNode(otherlv_1, grammarAccess.getExitAccess().getCupKeyword_1());
		}
		(
			(
				lv_cup_2_0=RULE_INT
				{
					newLeafNode(lv_cup_2_0, grammarAccess.getExitAccess().getCupINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExitRule());
					}
					setWithLastConsumed(
						$current,
						"cup",
						lv_cup_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
