/*
 * generated by Xtext 2.19.0
 */
grammar InternalMixin;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package mixin.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package mixin.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import mixin.services.MixinGrammarAccess;

}
@parser::members {
	private MixinGrammarAccess grammarAccess;

	public void setGrammarAccess(MixinGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getInstructionsAssignment()); }
		(rule__Model__InstructionsAssignment)*
		{ after(grammarAccess.getModelAccess().getInstructionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTake
entryRuleTake
:
{ before(grammarAccess.getTakeRule()); }
	 ruleTake
{ after(grammarAccess.getTakeRule()); } 
	 EOF 
;

// Rule Take
ruleTake 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTakeAccess().getGroup()); }
		(rule__Take__Group__0)
		{ after(grammarAccess.getTakeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMix
entryRuleMix
:
{ before(grammarAccess.getMixRule()); }
	 ruleMix
{ after(grammarAccess.getMixRule()); } 
	 EOF 
;

// Rule Mix
ruleMix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMixAccess().getGroup()); }
		(rule__Mix__Group__0)
		{ after(grammarAccess.getMixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClean
entryRuleClean
:
{ before(grammarAccess.getCleanRule()); }
	 ruleClean
{ after(grammarAccess.getCleanRule()); } 
	 EOF 
;

// Rule Clean
ruleClean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCleanAccess().getGroup()); }
		(rule__Clean__Group__0)
		{ after(grammarAccess.getCleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExit
entryRuleExit
:
{ before(grammarAccess.getExitRule()); }
	 ruleExit
{ after(grammarAccess.getExitRule()); } 
	 EOF 
;

// Rule Exit
ruleExit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExitAccess().getGroup()); }
		(rule__Exit__Group__0)
		{ after(grammarAccess.getExitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getTakeParserRuleCall_0()); }
		ruleTake
		{ after(grammarAccess.getInstructionAccess().getTakeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getCleanParserRuleCall_1()); }
		ruleClean
		{ after(grammarAccess.getInstructionAccess().getCleanParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getMixParserRuleCall_2()); }
		ruleMix
		{ after(grammarAccess.getInstructionAccess().getMixParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getExitParserRuleCall_3()); }
		ruleExit
		{ after(grammarAccess.getInstructionAccess().getExitParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__0__Impl
	rule__Take__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getTakeKeyword_0()); }
	'take'
	{ after(grammarAccess.getTakeAccess().getTakeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__1__Impl
	rule__Take__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getQuantityAssignment_1()); }
	(rule__Take__QuantityAssignment_1)
	{ after(grammarAccess.getTakeAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__2__Impl
	rule__Take__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getMLKeyword_2()); }
	'mL'
	{ after(grammarAccess.getTakeAccess().getMLKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__3__Impl
	rule__Take__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getFromKeyword_3()); }
	'from'
	{ after(grammarAccess.getTakeAccess().getFromKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Take__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeAccess().getInputCupAssignment_4()); }
	(rule__Take__InputCupAssignment_4)
	{ after(grammarAccess.getTakeAccess().getInputCupAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mix__Group__0__Impl
	rule__Mix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMixAccess().getMixKeyword_0()); }
	'mix'
	{ after(grammarAccess.getMixAccess().getMixKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mix__Group__1__Impl
	rule__Mix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMixAccess().getQuantityAssignment_1()); }
	(rule__Mix__QuantityAssignment_1)
	{ after(grammarAccess.getMixAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mix__Group__2__Impl
	rule__Mix__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMixAccess().getMLKeyword_2()); }
	'mL'
	{ after(grammarAccess.getMixAccess().getMLKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mix__Group__3__Impl
	rule__Mix__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMixAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getMixAccess().getInKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mix__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMixAccess().getDestinationCupAssignment_4()); }
	(rule__Mix__DestinationCupAssignment_4)
	{ after(grammarAccess.getMixAccess().getDestinationCupAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clean__Group__0__Impl
	rule__Clean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCleanAccess().getCleanAction_0()); }
	()
	{ after(grammarAccess.getCleanAccess().getCleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCleanAccess().getCleanKeyword_1()); }
	'clean'
	{ after(grammarAccess.getCleanAccess().getCleanKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exit__Group__0__Impl
	rule__Exit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExitAccess().getExitKeyword_0()); }
	'exit'
	{ after(grammarAccess.getExitAccess().getExitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exit__Group__1__Impl
	rule__Exit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExitAccess().getCupKeyword_1()); }
	'cup'
	{ after(grammarAccess.getExitAccess().getCupKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exit__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExitAccess().getCupAssignment_2()); }
	(rule__Exit__CupAssignment_2)
	{ after(grammarAccess.getExitAccess().getCupAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__InstructionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getInstructionsInstructionParserRuleCall_0()); }
		ruleInstruction
		{ after(grammarAccess.getModelAccess().getInstructionsInstructionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeAccess().getQuantityINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTakeAccess().getQuantityINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Take__InputCupAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTakeAccess().getInputCupINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getTakeAccess().getInputCupINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMixAccess().getQuantityINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMixAccess().getQuantityINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__DestinationCupAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMixAccess().getDestinationCupINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getMixAccess().getDestinationCupINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__CupAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExitAccess().getCupINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getExitAccess().getCupINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
