OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T10:29:31.609757+01:00' ],		#prior : OmReference [ 'Pharo7.0-SNAPSHOT-32bit-a2a2b23.59ye22t93ob2rccjyjs9w2ez7', '132' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ObjVLispSkeleton-StephaneDucasse.6'		]	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2019-11-22T10:29:31.660757+01:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #ObjVSkeleton-AdvancedTests,		#affectedPackageName : #ObjVSkeleton	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2019-11-22T10:29:31.661757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'TestCase',				#definitionSource : 'TestCase variableSubclass: #ObjExampleTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton-AdvancedTests\''			},			#name : #ObjExampleTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjExampleTest class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjExampleTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjExampleTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton-AdvancedTests,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2019-11-22T10:29:31.689757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ObjVSkeleton-Experimental,		#affectedPackageName : #ObjVSkeleton	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2019-11-22T10:29:31.690757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'TestCase',				#definitionSource : 'TestCase subclass: #ObjMessageTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton-Experimental\''			},			#name : #ObjMessageTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjMessageTest class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjMessageTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjMessageTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton-Experimental,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2019-11-22T10:29:31.692757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ObjVSkeleton,		#affectedPackageName : #ObjVSkeleton	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2019-11-22T10:29:31.692757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'TestCase',				#definitionSource : 'TestCase subclass: #ObjTest\r\tinstanceVariableNames: \'objectClass aPoint coloredPointClass pointClass classClass aColoredPoint aIncrementalColoredPoint incrementalColoredPointClass\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton\''			},			#name : #ObjTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #objectClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #aPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #coloredPointClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #pointClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #classClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #aColoredPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #aIncrementalColoredPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjTest,						#isMetaSide : false					},					#name : #incrementalColoredPointClass,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjTest class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2019-11-22T10:29:31.696757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'TestCase',				#definitionSource : 'TestCase subclass: #ObjTestBootstrap\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton-AdvancedTests\''			},			#name : #ObjTestBootstrap,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjTestBootstrap class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjTestBootstrap class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjTestBootstrap,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton-AdvancedTests,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2019-11-22T10:29:31.698757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'TestCase',				#definitionSource : 'TestCase subclass: #RawObjTest\r\tinstanceVariableNames: \'objectClass aPoint coloredPointClass pointClass classClass aColoredPoint aIncrementalColoredPoint incrementalColoredPointClass\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton\''			},			#name : #RawObjTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #objectClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #aPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #coloredPointClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #pointClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #classClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #aColoredPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #aIncrementalColoredPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #incrementalColoredPointClass,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RawObjTest class\r\tinstanceVariableNames: \'\''				},				#name : #'RawObjTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RawObjTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2019-11-22T10:29:31.714757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'TestCase',				#definitionSource : 'TestCase subclass: #RawObjTest\r\tinstanceVariableNames: \'objectClass aPoint coloredPointClass pointClass classClass aColoredPoint aIncrementalColoredPoint incrementalColoredPointClass\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton\''			},			#name : #RawObjTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #objectClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #aPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #coloredPointClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #pointClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #classClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #aColoredPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #aIncrementalColoredPoint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RawObjTest,						#isMetaSide : false					},					#name : #incrementalColoredPointClass,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RawObjTest class\r\tinstanceVariableNames: \'\''				},				#name : #'RawObjTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RawObjTest,					#isMetaSide : false				},				#parent : @8,				#content : 'These tests are based on a setup that does not rely on structure for the accessors.',				#stamp : 'StephaneDucasse 11/17/2014 11:09'			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'These tests are based on a setup that does not rely on structure for the accessors.',		#newStamp : 'StephaneDucasse 11/17/2014 11:09'	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2019-11-22T10:29:31.727757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Array',				#definitionSource : 'Array variableSubclass: #Obj\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton\''			},			#name : #Obj,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Obj class\r\tinstanceVariableNames: \'definedObjClasses\''				},				#name : #'Obj class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Obj class',							#isMetaSide : true						},						#name : #definedObjClasses,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Obj,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2019-11-22T10:29:31.732757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ObjVSkeleton-Inspector,		#affectedPackageName : #ObjVSkeleton	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2019-11-22T10:29:31.733757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'BasicIndexedEyeElement',				#definitionSource : 'BasicIndexedEyeElement variableSubclass: #StrictlyOrderedEyeElement\r\tinstanceVariableNames: \'orderedStructure\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton-Inspector\''			},			#name : #StrictlyOrderedEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StrictlyOrderedEyeElement,						#isMetaSide : false					},					#name : #orderedStructure,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StrictlyOrderedEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'StrictlyOrderedEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StrictlyOrderedEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton-Inspector,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2019-11-22T10:29:31.736757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'EyeCollectionInspector',				#definitionSource : 'EyeCollectionInspector variableSubclass: #ObjClassInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton-Inspector\''			},			#name : #ObjClassInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjClassInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjClassInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjClassInspector,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton-Inspector,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2019-11-22T10:29:31.738757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'EyeCollectionInspector',				#definitionSource : 'EyeCollectionInspector variableSubclass: #ObjClassInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ObjVSkeleton-Inspector\''			},			#name : #ObjClassInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjClassInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjClassInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjClassInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a simple inspector that can inspect fixed structured Obj class.\r\r"creating class by hand"\r\r| coloredPointClass |\rcoloredPointClass := Obj new: 6.\rcoloredPointClass at: coloredPointClass offsetForName put: #ObjColoredPoint.\rcoloredPointClass at: coloredPointClass offsetForClass put: #ObjClass.\rcoloredPointClass at: coloredPointClass offsetForIVs put: #( #class #x #y #color).\rcoloredPointClass at: coloredPointClass offsetForSuperclass put: #ObjPoint.\rcoloredPointClass at: coloredPointClass offsetForMethodDict\tput: (IdentityDictionary new).\rcoloredPointClass.\r\rObjClassInspector basicInspect: coloredPointClass.\r\r',				#stamp : 'StephaneDucasse 11/16/2014 23:11'			},			#classVariables : OrderedCollection [ ],			#category : #ObjVSkeleton-Inspector,			#package : #ObjVSkeleton,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a simple inspector that can inspect fixed structured Obj class.\r\r"creating class by hand"\r\r| coloredPointClass |\rcoloredPointClass := Obj new: 6.\rcoloredPointClass at: coloredPointClass offsetForName put: #ObjColoredPoint.\rcoloredPointClass at: coloredPointClass offsetForClass put: #ObjClass.\rcoloredPointClass at: coloredPointClass offsetForIVs put: #( #class #x #y #color).\rcoloredPointClass at: coloredPointClass offsetForSuperclass put: #ObjPoint.\rcoloredPointClass at: coloredPointClass offsetForMethodDict\tput: (IdentityDictionary new).\rcoloredPointClass.\r\rObjClassInspector basicInspect: coloredPointClass.\r\r',		#newStamp : 'StephaneDucasse 11/16/2014 23:11'	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2019-11-22T10:29:32.090757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ObjExampleTest class',				#isMetaSide : true			},			#name : #setMetaclassDefinition,			#protocol : #'first user-defined metaclasses',			#sourceCode : 'setMetaclassDefinition\r\t"self setMetaclassDefinition"\r\r\t| setClass |\r\tsetClass := Obj ObjClass\r\t\t\t\tsend: #new\r\t\t\t\twithArguments: #(#(#name: #ObjSet #iv: #(#myInstances) #superclass: #ObjClass)).\t"initialize on a metaclass"\r\tsetClass \r\t\taddMethod: #initialize\r\t\targs: \'initArray\'\r\t\twithBody: \r\t\t\t\'\r\t\t\tobjself binarySuper: #initialize with: initArray from: superClassOfClassDefiningTheMethod.\r\t\t\tobjself send: #setIV\r\t\t\t\twithArguments: (Array with: #myInstances with: OrderedCollection new).\r\t\t\tobjself\'.\r\r\tsetClass addUnaryMethod: #instances\r\t\twithBody: \'objself binarySend: #getIV with: #myInstances\'.\r\r\tsetClass addMethod: #new\r\t\targs: \'initArray\'\r\t\twithBody: \r\t\t\t\'| newInst others |\r\t\t\tnewInst := objself super: #new withArguments: (Array with: initArray) from: superClassOfClassDefiningTheMethod.\r\t\t\tothers := objself unarySend: #instances.\r\t\t\tothers := others add: newInst;\r\t\t\t\t\t\tyourself.\r\t\t\tobjself send: #setIV withArguments: (Array with: #myInstances with: others).\r\t\t\tnewInst\'',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2019-11-22T10:29:32.092757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ObjExampleTest class',				#isMetaSide : true			},			#name : #setMetaclassExample,			#protocol : #'first user-defined metaclasses',			#sourceCode : 'setMetaclassExample\r\t"self setMetaclassExample"\r\r\t| memoPointClass |\r\tself setMetaclassDefinition.\r\tmemoPointClass := Obj ObjSet \r\t\t\t\t\t\tsend: #new\r\t\t\t\t\t\twithArguments: #(#(#name: #ObjMemoPoint  #iv: #() #superclass: #ObjPoint)).\r\tmemoPointClass send: #new withArguments: #(#(#x: 24 #y: 6)).\r\tmemoPointClass send: #new withArguments: #(#(#x: 15 #y: 10)).\r\t^memoPointClass send: #instances withArguments: #().',			#stamp : 'StephaneDucasse 11/26/2014 22:04',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2019-11-22T10:29:32.094757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjExampleTest,				#isMetaSide : false			},			#name : #abstractMetaclassDefinition,			#protocol : #setup,			#sourceCode : 'abstractMetaclassDefinition\r \r\t(Obj giveClassNamed: #ObjClass)\r\t\t\t\t\t \t\tsend: #new\r\t\t\t\t\t\t\twithArguments: #(#(#name: #ObjAbstractClass #iv: #() #superclass: #ObjClass)).\r\tObj ObjAbstractClass \r\t\taddMethod: #new\r\t\targs: \'initArray\'\r\t\twithBody: \r\t\t\t\' objself error: \'\' the class \'\' , objself objName asString , \'\' is abstract\'\'\'',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2019-11-22T10:29:32.095757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjExampleTest,				#isMetaSide : false			},			#name : #defineObjAbstractPoint,			#protocol : #setup,			#sourceCode : 'defineObjAbstractPoint\r\r\t(Obj ObjAbstractClass)\r\t\tsend: #new\r\t\twithArguments: #(#(#name: #ObjAbstractPoint #iv: #() #superclass: #ObjObject)).\r\tObj ObjAbstractPoint\r\t\taddUnaryMethod: #givex\r\t\twithBody: \'objself  valueOfInstanceVariable: #x \'.\r\tObj ObjAbstractPoint \r\t\taddUnaryMethod: #display\r\t\twithBody: \r\t\t\t\'Transcript cr;\r\t\t\t\tshow: \'\'aPoint with x = \'\'.\r\t\t\tTranscript show: (objself send: #givex withArguments: #()) printString;\r\t\t\t\tcr\'.',			#stamp : 'StephaneDucasse 11/27/2014 20:52',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2019-11-22T10:29:32.096757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjExampleTest,				#isMetaSide : false			},			#name : #defineObjPoint,			#protocol : #setup,			#sourceCode : 'defineObjPoint\r\tObj ObjClass send: #new\r\t\twithArguments: #(#(#name: #ObjPoint #iv: #(#x #y) #superclass: #ObjAbstractPoint)).',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2019-11-22T10:29:32.097757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjExampleTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\r\tObj bootstrap.\r\tself abstractMetaclassDefinition.\r\tself defineObjAbstractPoint.\r\tself defineObjPoint',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2019-11-22T10:29:32.099757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjExampleTest,				#isMetaSide : false			},			#name : #testAbstractMetaclassExample,			#protocol : #'test abstract',			#sourceCode : 'testAbstractMetaclassExample\r\r\tself should: [Obj ObjAbstractClass send: #new withArguments: #(#(#x: 24 #y: 6))] raise: Error.',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2019-11-22T10:29:32.100757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjExampleTest,				#isMetaSide : false			},			#name : #testAbstractMetaclassExampleWithConcreteSubclass,			#protocol : #'test abstract',			#sourceCode : 'testAbstractMetaclassExampleWithConcreteSubclass\r\r\tself shouldnt: [Obj ObjPoint send: #new withArguments: #(#(#x: 24 #y: 6))]\r\t\traise: Error',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2019-11-22T10:29:32.101757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjExampleTest,				#isMetaSide : false			},			#name : #testColoredPoint,			#protocol : #'test abstract',			#sourceCode : 'testColoredPoint\r\r\t| coloredPointClass aColoredPoint |\r\tcoloredPointClass := (Obj ObjClass)\r\t\t\t\t\t\t \tsend: #new \r\t\t\t\t\t\t\twithArguments: #((#name: #ObjColoredPoint \r\t\t\t\t\t\t\t           \t\t   #iv: #(#color) \r\t\t\t\t\t\t\t            \t  #superclass: #ObjPoint)).\r\r\taColoredPoint := coloredPointClass send: #new withArguments: #((#x: 24 #y: 6 #color: #blue)).\t\r\t"first messages sent"\r\r\tself assert: (aColoredPoint send: #getIV withArguments: #(#x)) = 24.\r\taColoredPoint send: #setIV withArguments: #(#x 25).\r\tself assert: (aColoredPoint send: #getIV withArguments: #(#x)) = 25.\r\r\tself assert: (aColoredPoint send: #getIV withArguments: #(#color)) = #blue.\t\r\r\t"adding some methods"\r\r\tcoloredPointClass \r\t\taddUnaryMethod: #giveColor\r\t\twithBody: \'objself send: #getIV withArguments: #(#color)\'.\r\r\tcoloredPointClass \r\t\taddMethod: #setColor\r\t\targs: \'col\'\r\t\twithBody:\' objself send: #setIV withArguments: (Array with: #color with: col)\'.\r\r\tcoloredPointClass addUnaryMethod: #display\r\t\twithBody:  \r\t\t\t\'objself super: #display withArguments: #() from: superClassOfClassDefiningTheMethod.\r\t\t\tTranscript cr;\r\t\t\t\tshow: \'\' with Color = \'\'.\r\t\t\tTranscript show: (objself send: #giveColor withArguments: #()) printString;\r\t\t\t\tcr\'.\r\tself assert: (aColoredPoint send: #giveColor withArguments: #()) = #blue.\r\t\r\tself assert: (aColoredPoint send: #givex withArguments: #()) = 25.\r\t\r\taColoredPoint send: #display withArguments: #().',			#stamp : 'StephaneDucasse 11/27/2014 20:48',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2019-11-22T10:29:32.102757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjMessageTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\r\tObj bootstrap.\r\tObj objClassStructureMessage.',			#stamp : 'StephaneDucasse 11/26/2014 15:33',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2019-11-22T10:29:32.103757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjMessageTest,				#isMetaSide : false			},			#name : #testMessageClassMethods,			#protocol : #tests,			#sourceCode : 'testMessageClassMethods\r\t"self debug: #testMessageClassMethods"\r\t\r\t| msg |\r\tObj addMessagesForErrorHandling.\r\tmsg := Obj ObjMessage \r\t\t\t\tsend: #new \r\t\t\t\twithArguments: #(#(#receiver: 24 #selector: #factorial)).\r\t\r\tself assert: (msg send: #receiver2 withArguments: #()) equals: 24.\r\tself assert: (msg send: #receiver withArguments: #()) equals: 24.\r\tself assert: (msg send: #selector withArguments: #()) equals: #factorial.\r\t\r\tmsg := Obj ObjMessage \r\t\tsend: #new \r\t\twithArguments: #(#(#receiver: 24 #selector: #+ arguments: #(25))).\r\tself assert: (msg send: #arguments withArguments: #())  equals: #(25).\r\r',			#stamp : 'StephaneDucasse 11/26/2014 22:05',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2019-11-22T10:29:32.104757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjMessageTest,				#isMetaSide : false			},			#name : #testMessageClassMethodsDefined,			#protocol : #tests,			#sourceCode : 'testMessageClassMethodsDefined\r\t"self debug: #testMessageClassMethodsDefined"\r\t\r\t| msg |\r\tObj addMessagesForErrorHandling.\r\tself deny: Obj ObjMessage objMethodDict size isZero\r',			#stamp : 'StephaneDucasse 11/20/2014 14:52',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2019-11-22T10:29:32.105757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjMessageTest,				#isMetaSide : false			},			#name : #testMessageClassStructureDeclared,			#protocol : #tests,			#sourceCode : 'testMessageClassStructureDeclared\r\r\tObj objClassStructureMessage.\r\tself assert: Obj ObjMessage objName = #ObjMessage.\r\tself assert: Obj ObjMessage objClass objName= #ObjClass.\r\tself assert: Obj ObjMessage objIVs asArray = #(#class #receiver #selector #arguments).\r\tself assert: Obj ObjMessage objSuperclass = Obj ObjObject\r\t',			#stamp : 'StephaneDucasse 11/20/2014 10:16',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2019-11-22T10:29:32.106757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjMessageTest,				#isMetaSide : false			},			#name : #testUsingPrimitivesMessageClassMethods,			#protocol : #tests,			#sourceCode : 'testUsingPrimitivesMessageClassMethods\r\r\t| msg |\r\tmsg := Obj ObjMessage \r\t\tsend: #new \r\t\twithArguments: #(#(#receiver: 24 #selector: #factorial)).\r\t\r\tself assert: (msg at: 1) equals: #ObjMessage.\r\tself assert: (msg at: 2) equals: 24.\r\tself assert: (msg at: 3) equals: #factorial.\r\t\r\tmsg := Obj ObjMessage \r\t\tsend: #new \r\t\twithArguments: #(#(#receiver: 24 #selector: #+ arguments: #(25))).\r\tself assert: (msg at: 4)  equals: #(25).',			#stamp : 'StephaneDucasse 11/20/2014 15:05',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2019-11-22T10:29:32.107757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assembleClassClass,			#protocol : #setup,			#sourceCode : 'assembleClassClass\r\tclassClass := Obj new: 6.\r\tclassClass at: classClass offsetForName put: #ObjClass.\r\tclassClass at: classClass offsetForClass put: #ObjClass.\r\tclassClass at: classClass offsetForIVs\r\t\tput: #(#class #name #superclass #iv #keywords #methodDict).\r\tclassClass at: classClass offsetForKeywords\r\t\tput: #(#name: #superclass: #iv: #keywords: #methodDict:).\r\tclassClass at: classClass offsetForSuperclass put: #ObjObject.\r\tclassClass at: classClass offsetForMethodDict\r\t\tput: (IdentityDictionary new).\r\tObj declareClass: classClass',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2019-11-22T10:29:32.111757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assembleColoredInstance,			#protocol : #setup,			#sourceCode : 'assembleColoredInstance\r\taColoredPoint := Obj new: 4.\r\taColoredPoint at: 1 put: #ObjColoredPoint.\r\taColoredPoint at: 2 put: 10.\r\taColoredPoint at: 3 put: 15.\r\taColoredPoint at: 4 put: #blue',			#stamp : 'StephaneDucasse 10/22/2009 16:24',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2019-11-22T10:29:32.113757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assembleColoredPointClass,			#protocol : #setup,			#sourceCode : 'assembleColoredPointClass\r\tcoloredPointClass := Obj new: 6.\r\tcoloredPointClass at: pointClass offsetForName put: #ObjColoredPoint.\r\tcoloredPointClass at: pointClass offsetForClass put: #ObjClass.\r\t\r\t"Here the initialize of metaclass is not available so we perform the instance variable lookup by hand."\r\tcoloredPointClass at: pointClass offsetForIVs put: #( #class #x #y #color).\r\tcoloredPointClass at: pointClass offsetForSuperclass put: #ObjPoint.\r\tcoloredPointClass at: pointClass offsetForMethodDict\r\t\tput: (IdentityDictionary new).\r\tObj declareClass: coloredPointClass.\r\r\t(coloredPointClass at: coloredPointClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\tTranscript show: \'I\'\'am a colored point\';\r\t\t\t\tcr]] value: pointClass).\r\r\t(coloredPointClass at: coloredPointClass offsetForMethodDict) at: #foo\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #foo withArguments: #() from: superClassOfClassDefiningTheMethod) + (objself super: #foo withArguments: #() from: superClassOfClassDefiningTheMethod)\r\t\t\t\t]] value: pointClass).\r\r\t(coloredPointClass at: coloredPointClass offsetForMethodDict) at: #bar\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #bar withArguments: #() from: superClassOfClassDefiningTheMethod) + (objself super: #bar withArguments:#() from: superClassOfClassDefiningTheMethod)]\r\t\t\t] value: pointClass).',			#stamp : 'StephaneDucasse 11/27/2014 20:36',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2019-11-22T10:29:32.115757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assembleIncrementalColoredInstance,			#protocol : #setup,			#sourceCode : 'assembleIncrementalColoredInstance\r\t\r\taIncrementalColoredPoint := Obj new: 4.\r\taIncrementalColoredPoint at: 1 put: #ObjIncrementalColoredPoint.\r\taIncrementalColoredPoint at: 2 put: 10.\r\taIncrementalColoredPoint at: 3 put: 15.\r\taIncrementalColoredPoint at: 4 put: #blue',			#stamp : 'StephaneDucasse 2/15/2011 16:10',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2019-11-22T10:29:32.117757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assembleIncrementalColoredPointClass,			#protocol : #setup,			#sourceCode : 'assembleIncrementalColoredPointClass\r\tincrementalColoredPointClass := Obj new: 6.\r\tincrementalColoredPointClass at: pointClass offsetForName put: #ObjIncrementalColoredPoint.\r\tincrementalColoredPointClass at: pointClass offsetForClass put: #ObjClass.\r\t\r\t"Some tests will invoke by hand computeIV... so we do not have to hardcode the sequence."\r\tincrementalColoredPointClass at: pointClass offsetForIVs put: #( #color).\r\tincrementalColoredPointClass at: pointClass offsetForSuperclass put: #ObjPoint.\r\tincrementalColoredPointClass at: pointClass offsetForMethodDict\r\t\tput: (IdentityDictionary new).\r\tObj declareClass: incrementalColoredPointClass.\r\r\t(incrementalColoredPointClass at: incrementalColoredPointClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\tTranscript show: \'I\'\'am a colored point\';\r\t\t\t\tcr]] value: pointClass).\r\r\t(incrementalColoredPointClass at: incrementalColoredPointClass offsetForMethodDict) at: #foo\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #foo withArguments: #() from: superClassOfClassDefiningTheMethod) + (objself super: #foo withArguments: #() from: superClassOfClassDefiningTheMethod)\r\t\t\t\t]] value: pointClass).\r\r\t(incrementalColoredPointClass at: incrementalColoredPointClass offsetForMethodDict) at: #bar\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #bar withArguments: #() from: superClassOfClassDefiningTheMethod) + (objself super: #bar withArguments: #() from: superClassOfClassDefiningTheMethod)]\r\t\t\t] value: pointClass).',			#stamp : 'StephaneDucasse 11/27/2014 20:37',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2019-11-22T10:29:32.119757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assembleObjectClass,			#protocol : #setup,			#sourceCode : 'assembleObjectClass\r\tobjectClass := Obj new: 6.\r\tobjectClass at: objectClass offsetForName put: #ObjObject.\r\tobjectClass at: objectClass offsetForClass put: #ObjClass.\r\tobjectClass at: objectClass offsetForIVs put: #(#class).\r\tobjectClass at: objectClass offsetForKeywords put: #().\r\tobjectClass at: objectClass offsetForSuperclass put: nil.\r\tobjectClass at: objectClass offsetForMethodDict put: (IdentityDictionary new).\r\tObj declareClass: objectClass.\r\r\t"here I simulate by hand the way superclass is captured for super lookup, I value the block with nil for now to represent\r\tthe superclass of ObjObject"\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod |\r\t\t\t\t[:objself | \r\t\t\tTranscript show: \'I\'\'am an Object\';\r\t\t\t\tcr]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #error\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod |\r\t\t\t\t[:object :arrayOfArguments | \r\t\t\tTranscript show: \'Error: selector \' , arrayOfArguments first printString , \' not understood\';\r\t\t\t\tcr.\r\t\t\t\tError signal]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #getIV\r\t\tput: ([:superClassOfClassDefiningTheMethod | [:object :iv | object valueOfInstanceVariable: iv]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #setIV\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod | [:object :iv :val | \r\t\t\tobject at: (object offsetFromObjectOfInstanceVariable: iv) put: val]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #bar\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod | [:objself | \r\t\t\t\t\t5]] value: nil).',			#stamp : 'StephaneDucasse 11/26/2014 16:01',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2019-11-22T10:29:32.121757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assemblePointClass,			#protocol : #setup,			#sourceCode : 'assemblePointClass\r\t| cl |\r\tcl := Obj giveClassNamed: #ObjClass.\r\tpointClass := Obj new: (cl at: cl offsetForIVs) size.\r\tpointClass at: pointClass offsetForName put: #ObjPoint.\r\tpointClass at: pointClass offsetForClass put: #ObjClass.\r\tpointClass at: pointClass offsetForIVs put: #(#class #x #y).\r\tpointClass at: pointClass offsetForKeywords put: #(#x: #y:).\r\tpointClass at: pointClass offsetForSuperclass put: #ObjObject.\r\tpointClass at: pointClass offsetForMethodDict\r\t\tput: (IdentityDictionary new).\r\tObj declareClass: pointClass.\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #x\r\t\tput: ([ :superClassOfClassDefiningTheMethod | [:objself | objself valueOfInstanceVariable: #x]] value: objectClass).\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | [:objself | \r\t\t\tTranscript show: \'I\'\'am a Point\';\r\t\t\t\tcr]] value: objectClass).\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #foo\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\tTranscript show: \'ObjPoint>>foo\';cr.\r\t\t\t\t5\r\t\t\t\t]] value: objectClass)',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2019-11-22T10:29:32.123757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #assemblePointInstance,			#protocol : #setup,			#sourceCode : 'assemblePointInstance\r\taPoint := Obj new: 3.\r\taPoint at: 1 put: #ObjPoint.\r\taPoint at: 2 put: 10.\r\taPoint at: 3 put: 15',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2019-11-22T10:29:32.125757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\t"self new setUp"\r\r\tObj initialize.\r\tself assembleClassClass.\r\tself assemblePointClass.\r\tself assembleObjectClass.\r\tself assembleColoredPointClass.\r\tself assemblePointInstance.\r\tself assembleColoredInstance.\r\tself assembleIncrementalColoredInstance.\r\tself assembleIncrementalColoredPointClass',			#stamp : 'StephaneDucasse 2/15/2011 16:15',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2019-11-22T10:29:32.127757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testAllocate,			#protocol : #step5-tests-allocate,			#sourceCode : 'testAllocate\r  "(self  selector: #testAllocate) run"\r  | newInstance |\r  newInstance := pointClass allocateAnInstance.\r  self assert: (newInstance at: 1) = #ObjPoint.\r  self assert: (newInstance size) = 3.\r  self assert: (newInstance at: 2) isNil.\r  self assert: (newInstance at: 3) isNil.\r  self assert: (newInstance objClass = pointClass)',			#stamp : 'StephaneDucasse 11/21/2015 15:44',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2019-11-22T10:29:32.129757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testBlockArgsFrom,			#protocol : #'utilities tests',			#sourceCode : 'testBlockArgsFrom\r\r\tself assert: (Obj new blockArgsFrom: \' abc def ghi \')  = \':abc :def :ghi\'.\r\tself assert: (Obj new blockArgsFrom: \'abc def ghi\')  = \':abc :def :ghi\'.\r\tself assert: (Obj new blockArgsFrom: \'\')  = \'\'.',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2019-11-22T10:29:32.130757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testBlockBodyFromHeaderAndBody,			#protocol : #'utilities tests',			#sourceCode : 'testBlockBodyFromHeaderAndBody\r\r\t"a method with one argument: val"\r\tself assert: (Obj new stringOfBlockBodyFromHeader: \'val\' andBody: \'objself send: #setIV \r\t\t\t\t\t\t\t\t\t\t withArguments: (Array with: #x with: val).\')\r\t\t\t\t\t\t\t\t\t\t= \'[ :superClassOfClassDefiningTheMethod |\r\t\t[ :objself :val |\r\t\t\t\t\t objself send: #setIV \r\t\t\t\t\t\t\t\t\t\t withArguments: (Array with: #x with: val).] ]\'.\r\r\t"a method without arg"\r\tself assert: (Obj new stringOfBlockBodyFromHeader: \'\' andBody: \'objself unarySend: #getx.\') \r\t=\'[ :superClassOfClassDefiningTheMethod |\r\t\t[ :objself  |\r\t\t\t\t\t objself unarySend: #getx.] ]\'\r\t',			#stamp : 'NicoPAez 10/21/2010 10:22',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2019-11-22T10:29:32.132757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testClassAccess,			#protocol : #'step3-tests-class access',			#sourceCode : 'testClassAccess\r\t"(self  selector: #testClassAccess) run"\r\t\r\tself assert: (aPoint objClass = pointClass)',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2019-11-22T10:29:32.134757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testErrorRaisedSendWhenErrorInLookup,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testErrorRaisedSendWhenErrorInLookup\r\t"(self  selector: #testErrorRaisedSendWhenErrorInLookup) run"\r\t\r\tself should: [  pointClass sendError: #zork withArgs: { aPoint } ] raise: Error.\r\t"Open a Transcript to see the message trace"',			#stamp : 'StephaneDucasse 12/5/2014 17:52',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2019-11-22T10:29:32.136757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testErrorRedefinition,			#protocol : #tests,			#sourceCode : 'testErrorRedefinition\r\t"(self  run: #testErrorRedefinition)"\r\t\r\tself should: [aPoint send: #zork withArguments: #()] raise: Error.\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #error\r\t\tput: ([ :superClassOfClassDefiningTheMethod | [:objself :selector | 33]] value: objectClass).\r\t\r\tself assert: (aPoint send: #zork withArguments: #()) = 33.\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #error\r\t\tput: ([ :superClassOfClassDefiningTheMethod | [:objself :selector | 33]] value: objectClass).\r\r\tself assert: (aPoint send: #zork withArguments: #(44)) = 33.',			#stamp : 'StephaneDucasse 11/27/2014 21:15',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2019-11-22T10:29:32.138757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testIVOffset,			#protocol : #'step4-tests-iv management',			#sourceCode : 'testIVOffset\r\t"(self  selector: #testIVOffset) run"\r\r\tself assert: ((pointClass offsetFromClassOfInstanceVariable: #x ) = 2).\r\tself assert: ((pointClass offsetFromClassOfInstanceVariable: #lulu ) = 0)',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2019-11-22T10:29:32.141757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testIVOffsetAndValue,			#protocol : #'step4-tests-iv management',			#sourceCode : 'testIVOffsetAndValue\r\t"(self  selector: #testIVOffsetAndValue) run"\r\r\tself assert: ((aPoint offsetFromObjectOfInstanceVariable: #x ) = 2).\r\tself assert: ((aPoint valueOfInstanceVariable: #x ) = 10)',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2019-11-22T10:29:32.143757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testInitialize,			#protocol : #step7-tests-initialize,			#sourceCode : 'testInitialize\r\t"(self  selector: #testInitialize) run"\r\r\t| newInstance  |\r\tnewInstance := pointClass allocateAnInstance.\r\tnewInstance initializeUsing: #(#y: 2 #z: 3 #t: 55 #x: 1).\r\tself assert: (newInstance at: 1) equals: #ObjPoint.\r\tself assert: (newInstance at: 2) equals: 1.\r\tself assert: (newInstance at: 3) equals: 2.',			#stamp : 'StephaneDucasse 11/21/2015 16:16',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2019-11-22T10:29:32.145757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testInstanceVariableInheritance,			#protocol : #'step8-tests-instance variable inheritance',			#sourceCode : 'testInstanceVariableInheritance\r\t"(self  selector: #testInstanceVariableInheritance) run"\r\r\t"a better choice would be to throw an exception if there are duplicates"\r\tself assert: \r\t\t\t((Obj new computeNewIVFrom: #(#a #b #c #d) asOrderedCollection\r\t\t\t\twith: #(#a #z #b #t) asOrderedCollection)\r\t\t\t\t\t= #(#a #b #c #d #z #t) asOrderedCollection).\r\tself assert: \r\t\t\t((Obj new computeNewIVFrom: #() asOrderedCollection\r\t\t\t\twith: #(#a #z #b #t) asOrderedCollection)\r\t\t\t\t\t= #(#a #z #b #t) asOrderedCollection)',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2019-11-22T10:29:32.147757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testInstanceVariableInheritanceFromAClass,			#protocol : #tests-StaticInheritanceOfInstanceVariables,			#sourceCode : 'testInstanceVariableInheritanceFromAClass\r\r\t"(self  selector: #testInstanceVariableInheritanceFromAClass) run"\r\t\r\taIncrementalColoredPoint objClass objIVs: (aIncrementalColoredPoint computeNewIVFrom: aPoint objClass objIVs  with: aIncrementalColoredPoint objClass objIVs).\r\t\r\tself assert: ((pointClass offsetFromClassOfInstanceVariable: #x ) = 2).\r\tself assert: ((incrementalColoredPointClass offsetFromClassOfInstanceVariable: #x ) = 2).\r\t\r',			#stamp : 'StephaneDucasse 2/15/2011 16:12',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2019-11-22T10:29:32.149757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testInstanceVariableInheritanceFromAObject,			#protocol : #tests-StaticInheritanceOfInstanceVariables,			#sourceCode : 'testInstanceVariableInheritanceFromAObject\r\r\t"(self  selector: #testInstanceVariableInheritanceFromAObject) run"\r\t\r\taIncrementalColoredPoint objClass objIVs: (aIncrementalColoredPoint computeNewIVFrom: aPoint objClass objIVs  with: aIncrementalColoredPoint objClass objIVs).\r\t\r\tself assert: ((aPoint offsetFromObjectOfInstanceVariable: #x ) = 2).\r\tself assert: ((aIncrementalColoredPoint offsetFromObjectOfInstanceVariable: #x ) = 2).\r\t\r\t\r\t',			#stamp : 'StephaneDucasse 2/15/2011 16:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2019-11-22T10:29:32.151757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testInstanceVariableInheritanceNotFind,			#protocol : #tests-StaticInheritanceOfInstanceVariables,			#sourceCode : 'testInstanceVariableInheritanceNotFind\r\r\t"(self  selector: #testInstanceVariableInheritanceNotFind) run"\r\t\r\tself should: [aPoint offsetFromObjectOfInstanceVariable: #zork ] raise: Error.\r\t\r\t\r\t',			#stamp : 'JB 10/9/2009 16:52',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2019-11-22T10:29:32.153757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testInstanceVariableInheritanceNumberOfInstanceVar,			#protocol : #tests-StaticInheritanceOfInstanceVariables,			#sourceCode : 'testInstanceVariableInheritanceNumberOfInstanceVar\r\r\t"(self  selector: #testInstanceVariableInheritanceNumberOfInstanceVar) run"\r\t\r\tself assert: ((pointClass numberOfIVs ) = 3).\r\tself assert: ((coloredPointClass numberOfIVs ) = 4).\r\t\r',			#stamp : 'JB 10/13/2009 16:23',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2019-11-22T10:29:32.155757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testKeywords,			#protocol : #step6-tests-keywords,			#sourceCode : 'testKeywords\r\t"(self  selector: #testKeywords) run"\r\r\t| dummyObject |\r\tdummyObject := Obj new.\r\tself assert: \r\t\t\t((dummyObject generateKeywords: #(#titi #toto #lulu))\r\t\t\t\t= #(#titi: #toto: #lulu:)).\r\tself assert: \r\t\t\t((dummyObject keywordValue: #x\r\t\t\t\tgetFrom: #(#toto 33 #x 23)\r\t\t\t\tifAbsent: 2) = 23).\r\tself assert: \r\t\t\t((dummyObject keywordValue: #x\r\t\t\t\tgetFrom: #(#toto 23)\r\t\t\t\tifAbsent: 2) = 2).\r\tself assert: \r\t\t\t((dummyObject returnValuesFrom: #(#x 22 #y 35) followingSchema: #(#y #yy #x #y))\r\t\t\t\t= #(35 nil 22 35))',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2019-11-22T10:29:32.156757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodDefinition,			#protocol : #tests,			#sourceCode : 'testMethodDefinition\r\t"(self  selector: #testMethodManagment) run"\r\r\tself assert: (pointClass doesUnderstand: #x).\r\tself assert: (pointClass doesUnderstand: #xx) not.\r\r\t"define a unary method xx returning the receiver."\r\tpointClass \r\t\taddMethod: #xx\r\t\targs: \'\'\r\t\twithBody: \'objself\'.\r\r\tself assert: (pointClass doesUnderstand: #xx).\r\tself assert: (((pointClass bodyOfMethod: #xx) value: 22) = 22).\r\r\t"define a unary method returning the slot x of the receiver"\r\tpointClass \r\t\taddMethod: #getgetx\r\t\targs: \'\'\r\t\twithBody: \'objself valueOfInstanceVariable: #x\'.\r\tself assert: (pointClass doesUnderstand: #getgetx).\r\tself assert: (((pointClass bodyOfMethod: #getgetx) value: aPoint) = 10).',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2019-11-22T10:29:32.158757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodLookup,			#protocol : #tests,			#sourceCode : 'testMethodLookup\r\t"(self  selector: #testMethodLookup) run"\r\t\r\tself assert: ((pointClass lookup: #x) isKindOf: BlockClosure)',			#stamp : 'StephaneDucasse 12/5/2014 17:37',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2019-11-22T10:29:32.160757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodLookupFindSimpleMethod,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testMethodLookupFindSimpleMethod\r\t"(self  selector: #testMethodLookupFindSimpleMethod) run"\r\r\tself assert: ((pointClass lookup: #x)  isKindOf: BlockClosure)',			#stamp : 'StephaneDucasse 12/5/2014 17:37',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2019-11-22T10:29:32.162757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodLookupFindSuperMethod,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testMethodLookupFindSuperMethod\r\t"(self  selector: #testMethodLookupFindSuperMethod) run"\r\t\r\tself assert: ((coloredPointClass lookup: #x) isKindOf: BlockClosure)',			#stamp : 'StephaneDucasse 12/5/2014 17:37',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2019-11-22T10:29:32.164757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodLookupStop,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testMethodLookupStop\r\t"(self  selector: #testMethodLookupStop) run"\r\t\r\t| foundMethod|\r\tfoundMethod := (pointClass lookup: #zork).\r\tself assert: foundMethod isNil. \r\t"The method zork is NOT implement on pointClass, so nil is returned."\r\tself should: [ pointClass sendError: #error withArgs: {aPoint}] raise: Error.\r\t\r\tfoundMethod := (pointClass lookup: #error).\r\tself assert: (foundMethod isKindOf: BlockClosure).\r\tself assert: (\'*Error*\' match: foundMethod printString).\r\t\r\t"the message error defined on ObjObject requires two arguments: an object and a selector and it raises \r\tan error when executed. Open a Transcript to see the message trace"\r\tself should:  [((pointClass lookup: #zork) value: \'r\' value: #e)] raise: Error .',			#stamp : 'StephaneDucasse 12/5/2014 17:38',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2019-11-22T10:29:32.166757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodManagement,			#protocol : #tests,			#sourceCode : 'testMethodManagement\r\t"(self  selector: #testMethodManagment) run"\r\r\tself assert: (pointClass doesUnderstand: #x).\r\tself assert: (pointClass doesUnderstand: #xx) not.\r\t\r\tpointClass \r\t\taddMethod: #xx\r\t\targs: \'\'\r\t\twithBody: \'objself valueOfInstanceVariable: #x \'.\r\tself assert: (((pointClass bodyOfMethod: #xx) value: aPoint) = 10).\r\tself assert: (pointClass doesUnderstand: #xx).\r\tpointClass removeMethod: #xx.\r\tself assert: (pointClass doesUnderstand: #xx) not.\r\tself assert: (((pointClass bodyOfMethod: #x) value: aPoint) = 10)',			#stamp : 'NicoPAez 10/21/2010 10:25',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2019-11-22T10:29:32.168757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodManagmentAddRemoveMethods,			#protocol : #tests-MethodsManagement,			#sourceCode : 'testMethodManagmentAddRemoveMethods\r\t"(self  selector: #testMethodManagmentAddRemoveMethods) run"\r\r\tpointClass \r\t\taddMethod: #xx\r\t\targs: \'\'\r\t\twithBody: \'objself valueOfInstanceVariable: #x \'.\r\tself assert: (((pointClass bodyOfMethod: #xx) value: aPoint) = 10).\r\tself assert: (pointClass doesUnderstand: #xx).\r\tpointClass removeMethod: #xx.\r\tself assert: (pointClass doesUnderstand: #xx) not.\r\tself assert: (((pointClass bodyOfMethod: #x) value: aPoint) = 10)',			#stamp : 'JB 10/9/2009 16:51',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2019-11-22T10:29:32.170757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodManagmentBodyOfMethod,			#protocol : #tests-MethodsManagement,			#sourceCode : 'testMethodManagmentBodyOfMethod\r\t"(self  selector: #testMethodManagmentBodyOfMethod) run"\r\t\r\tself assert: (((pointClass bodyOfMethod: #x) value: aPoint) = 10)\r',			#stamp : 'JB 10/9/2009 16:51',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2019-11-22T10:29:32.172757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodManagmentNotUnderstandBadMethod,			#protocol : #tests-MethodsManagement,			#sourceCode : 'testMethodManagmentNotUnderstandBadMethod\r\t"(self  selector: #testMethodManagmentNotUnderstandBadMethod) run"\r\r\tself assert: (pointClass doesUnderstand: #xx) not.\r\t',			#stamp : 'JB 10/9/2009 16:52',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2019-11-22T10:29:32.174757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodManagmentUnderstandGoodMethod,			#protocol : #tests-MethodsManagement,			#sourceCode : 'testMethodManagmentUnderstandGoodMethod\r\t"(self  selector: #testMethodManagmentUnderstandGoodMethod) run"\r\r\tself assert: (pointClass doesUnderstand: #x).\r',			#stamp : 'JB 10/9/2009 16:52',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2019-11-22T10:29:32.176757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodNotFoundRaiseError,			#protocol : #tests,			#sourceCode : 'testMethodNotFoundRaiseError\r\t"(self  run: #testMethodNotFoundRaiseError)"\r\r\tself should: [aPoint send: #zork withArguments: #()] raise: Error.',			#stamp : 'StephaneDucasse 11/26/2014 22:05',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2019-11-22T10:29:32.178757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodSelfSend,			#protocol : #tests,			#sourceCode : 'testMethodSelfSend\r\t"(self  selector: #testMethodSelfSend) run"\r\r\t"method found in the class PointClass"\r\tself assert: ((aPoint send: #x withArguments: #()) = 10).\r\r\t"method found in ObjClass"\r\tself assert: ((aPoint send: #getIV withArguments: #(#x)) = 10).\r\r\t"method found in ObjClass"\r\taPoint send: #setIV withArguments: #(y 22).\r\tself assert: ((aPoint send: #getIV withArguments: #(#y)) = 22)',			#stamp : 'StephaneDucasse 11/27/2014 12:18',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2019-11-22T10:29:32.179757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodSelfSendUnarySend,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testMethodSelfSendUnarySend\r\t"(self  selector: #testMethodSelfSendUnarySend) run"\r\r\t"method found in the class PointClass"\r\tself assert: ((aPoint send: #x withArguments: #()) = 10).\r\t"method found in the class PointClass"\r\tself assert: ((aColoredPoint send: #x withArguments:#()) = 10).\r',			#stamp : 'StephaneDucasse 11/26/2014 22:22',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ],		#time : DateAndTime [ '2019-11-22T10:29:32.182757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodSuperCall,			#protocol : #tests,			#sourceCode : 'testMethodSuperCall\r\t"(self  selector: #testMethodSuperCall) run"\r\r\t"foo in point return 5"\r\tself assert: ((aPoint send: #foo withArguments: #()) = 5).\r\r\t"foo in colored point is doing super foo + super foo"\r\tself assert: ((aColoredPoint send: #foo withArguments: #()) = 10).',			#stamp : 'StephaneDucasse 11/26/2014 22:22',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2019-11-22T10:29:32.183757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodSuperCallOverBigHierarchy,			#protocol : #tests,			#sourceCode : 'testMethodSuperCallOverBigHierarchy\r\t"(self  selector: #testMethodSuperCallOverBigHierarchy) run"\r\r\t"bar is defined in Object and not on Point"\r\tself assert: (aPoint send: #bar withArguments: #()) = 5.\r\r\t"bar on coloredPoint = super bar + super bar"\r\tself assert: (aColoredPoint send: #bar withArguments: #()) = 10.',			#stamp : 'StephaneDucasse 11/26/2014 22:23',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2019-11-22T10:29:32.185757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testMethodWithHeaderAndBody,			#protocol : #'utilities tests',			#sourceCode : 'testMethodWithHeaderAndBody\r\r\t"a method simply returning objself"\r\tself assert: ((pointClass\r\t\t\t\t\tmethodWithHeader: \'\'\r\t\t\t\t\tandBody: \'objself \') value: 2) = 2.\r\t\r\t"a method returning its first none implicit arg"\r\tself assert: ((pointClass \r\t\t\t\t\tmethodWithHeader: \'val\'\r\t\t\t\t\tandBody: \'val \') value: 2 value: 33) = 33.\r\r\t"a method returns its superclass of the class defining the method value"\r\t"this anonymous method is defined in pointClass so its superclass pointer is objectClass"\r\tself assert: ((pointClass \r\t\t\t\t\tmethodWithHeader: \'\'\r\t\t\t\t\tandBody: \' superClassOfClassDefiningTheMethod \') value: aPoint) = objectClass .\r\r\tself assert: ((coloredPointClass \r\t\t\t\t\tmethodWithHeader: \'\'\r\t\t\t\t\tandBody: \' superClassOfClassDefiningTheMethod \') value: aPoint) = pointClass .',			#stamp : '',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2019-11-22T10:29:32.187757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testNilWhenErrorInLookup,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testNilWhenErrorInLookup\r\t"(self  selector: #testNilWhenErrorInLookup) run"\r\t\r\tself assert: (pointClass lookup: #zork) isNil.\r\t"The method zork is NOT implement on pointClass"\r\t',			#stamp : 'StephaneDucasse 12/5/2014 17:52',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2019-11-22T10:29:32.189757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructure,			#protocol : #tests,			#sourceCode : 'testPrimitiveStructure\r\t"(self selector: #testPrimitiveStructure) run"\r\t\r\tself assert: (pointClass objClassId = #ObjClass).\r\tself assert: ((pointClass objName ) = #ObjPoint).\r\tself assert: ((pointClass objSuperclassId ) = #ObjObject).\r\tself assert: ((pointClass objIVs) = #(#class #x #y)).\r\tself assert: ((pointClass objKeywords) = #(#x: #y:)).\r\tself assert: ((pointClass objMethodDict) = nil) not',			#stamp : 'SD 2/5/2013 16:47',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2019-11-22T10:29:32.191757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjClassId,			#protocol : #'step1-tests-structure of objects',			#sourceCode : 'testPrimitiveStructureObjClassId\r\t"(self selector: #testPrimitiveStructureObjClassId) run"\r\r\tself assert: (pointClass objClassId = #ObjClass).\r',			#stamp : 'JB 10/9/2009 10:30',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2019-11-22T10:29:32.193757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjClassIdForSimpleObject,			#protocol : #'step1-tests-structure of objects',			#sourceCode : 'testPrimitiveStructureObjClassIdForSimpleObject\r\t"self run: #testPrimitiveStructureObjClassIdForSimpleObject"\r\r\tself assert: (aPoint objClassId = #ObjPoint).\r',			#stamp : 'SD 2/5/2013 16:48',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2019-11-22T10:29:32.195757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjIVs,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjIVs\r\t"(self selector: #testPrimitiveStructureObjIVs) run"\r\r\tself assert: ((pointClass objIVs) = #(#class #x #y)).\r',			#stamp : 'JB 10/9/2009 10:30',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2019-11-22T10:29:32.197757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjKeywords,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjKeywords\r\t"(self selector: #testPrimitiveStructureObjKeywords) run"\r\r\tself assert: ((pointClass objKeywords) = #(#x: #y:)).\r',			#stamp : 'JB 10/9/2009 10:30',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ],		#time : DateAndTime [ '2019-11-22T10:29:32.199757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjMethodDict,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjMethodDict\r\t"(self selector: #testPrimitiveStructureObjMethodDict) run"\r\r\tself assert: ((pointClass objMethodDict) = nil) not',			#stamp : 'JB 10/9/2009 10:29',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2019-11-22T10:29:32.201757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjName,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjName\r\t"(self selector: #testPrimitiveStructureObjName) run"\r\r\tself assert: ((pointClass objName ) = #ObjPoint).\r\t',			#stamp : 'JB 10/9/2009 10:29',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2019-11-22T10:29:32.202757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjSuperclassId,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjSuperclassId\r\t"(self selector: #testPrimitiveStructureObjSuperclassId) run"\r\r\tself assert: ((pointClass objSuperclassId ) = #ObjObject).\r',			#stamp : 'JB 10/9/2009 10:29',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2019-11-22T10:29:32.204757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testRaisesErrorSendWhenErrorInLookup,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testRaisesErrorSendWhenErrorInLookup\r\t"(self  selector: #testRaisesErrorSendWhenErrorInLookup) run"\r\r\tself should: [ pointClass send: #zork withArguments: { aPoint } ] raise: Error.\r\t"Open a Transcript to see the message trace"',			#stamp : 'StephaneDucasse 11/21/2015 18:24',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2019-11-22T10:29:32.205757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTest,				#isMetaSide : false			},			#name : #testSendErrorRaisesErrorSendWhenErrorInLookup,			#protocol : #tests-MessagePassingsAndDynamicsLookup,			#sourceCode : 'testSendErrorRaisesErrorSendWhenErrorInLookup\r\t"(self  selector: #testSendErrorRaisesErrorSendWhenErrorInLookup) run"\r\t\r\tself should: [  pointClass sendError: #zork withArgs: { aPoint } ] raise: Error.\r\t"Open a Transcript to see the message trace"',			#stamp : 'StephaneDucasse 12/5/2014 17:54',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2019-11-22T10:29:32.207757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTestBootstrap,				#isMetaSide : false			},			#name : #testCreateObjClassMessage,			#protocol : #'test ObjClass creation',			#sourceCode : 'testCreateObjClassMessage\r\t"(self selector: #testCreateObjClassMessage) run"\r\r\t| objClass |\r\tObj bootstrap.\r\tobjClass := Obj giveClassNamed: #ObjClass.\r\tself assert: ((objClass send: #class withArguments: #()) = (Obj giveClassNamed: #ObjClass)).\r\tself assert: (objClass send: #isClass withArguments: #()).\r\tself assert: (objClass send: #isMetaclass withArguments: #())',			#stamp : 'StephaneDucasse 11/26/2014 21:56',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2019-11-22T10:29:32.208757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTestBootstrap,				#isMetaSide : false			},			#name : #testCreateObjClassStructure,			#protocol : #'test ObjClass creation',			#sourceCode : 'testCreateObjClassStructure\r\t"(self selector: #testCreateObjClassStructure) run"\r\r\t| objClass |\r\tObj bootstrap.\r\tobjClass := Obj giveClassNamed: #ObjClass.\r\tself assert: (objClass objName = #ObjClass).\r\tself assert: (objClass objClassId = #ObjClass).\r\tself assert: (objClass objSuperclassId = #ObjObject).\r\tself assert: (objClass objIVs asArray = #(#class #name #superclass #iv #keywords #methodDict)).\r\tself assert: (objClass objKeywords asArray = #(#name: #superclass: #iv: #keywords: #methodDict:))',			#stamp : 'StephaneDucasse 11/26/2014 21:57',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2019-11-22T10:29:32.209757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTestBootstrap,				#isMetaSide : false			},			#name : #testCreateObjObjectInstanceMessage,			#protocol : #'test ObjObject creation ',			#sourceCode : 'testCreateObjObjectInstanceMessage\r\t"(self selector: #testCreateObjObjectInstanceMessage) run"\r\r\t| pointClass objClass pointInstance |\r\tObj initialize.\r\tObj manuallyCreateObjClass.\r\tObj createObjObject.\r\tobjClass := Obj giveClassNamed: #ObjClass.\r\tpointClass := objClass \r\t\t\t\t\t\t\tsend: #new\r\t\t\t\t\t\t\twithArguments: #(#(#name: #ObjPoint #superclass: #ObjObject #iv: #(#x #y))).\r\tpointInstance := pointClass send: #new withArguments: #(#()).\r\tself assert: (pointInstance objClassId = #ObjPoint).\r\tself assert: ((pointInstance send: #getIV withArguments: #(#x)) = nil).\r\tpointInstance send: #setIV withArguments: #(#x 25).\r\tself assert:  ((pointInstance send: #getIV withArguments: #(x)) = 25 )',			#stamp : 'StephaneDucasse 11/26/2014 21:59',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2019-11-22T10:29:32.210757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTestBootstrap,				#isMetaSide : false			},			#name : #testCreateObjObjectMessage,			#protocol : #'test ObjObject creation ',			#sourceCode : 'testCreateObjObjectMessage\r\t"(self selector: #testCreateObjObjectMessage) run"\r\r\t| objObject |\r\tObj initialize.\r\tObj manuallyCreateObjClass.\r\tObj createObjObject.\r\tobjObject := Obj giveClassNamed: #ObjObject.\r\tself assert: (objObject send: #class withArguments: #()) = (Obj giveClassNamed: #ObjClass).\r\tself assert: (objObject send: #isClass withArguments: #()) not.\r\tself assert: (objObject send: #getIV withArguments: #(#class)) = #ObjClass',			#stamp : 'StephaneDucasse 11/26/2014 22:00',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2019-11-22T10:29:32.211757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTestBootstrap,				#isMetaSide : false			},			#name : #testCreateObjObjectStructure,			#protocol : #'test ObjObject creation ',			#sourceCode : 'testCreateObjObjectStructure\r\t"(self selector: #testCreateObjObjectStructure) run"\r\r\t| objObject |\r\tObj initialize.\r\tObj manuallyCreateObjClass.\r\tObj createObjObject.\r\tobjObject := Obj giveClassNamed: #ObjObject.\r\tself assert: (objObject objName = #ObjObject).\r\tself assert: (objObject objClassId = #ObjClass).\r\tself assert: (objObject objSuperclassId isNil).\r\tself assert: (objObject objIVs asArray = #(#class)).\r\tself assert: (objObject objKeywords asArray = #())',			#stamp : 'stephane.ducasse 9/29/2008 14:32',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2019-11-22T10:29:32.212757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTestBootstrap,				#isMetaSide : false			},			#name : #testManuallyCreateObjClassAllocate,			#protocol : #'test ObjClass manual creation ',			#sourceCode : 'testManuallyCreateObjClassAllocate\r\t"(self selector: #testManuallyCreateObjClassAllocate) run"\r\r\t| objClass emptyClass |\r\tObj initialize.\r\tObj manuallyCreateObjClass.\r\tobjClass := Obj giveClassNamed: #ObjClass.\r\temptyClass := objClass send: #allocate withArguments: #().\r\tself assert: emptyClass objClassId = #ObjClass.\r\tself assert:  emptyClass objSuperclassId isNil.\r\tself assert:  emptyClass objIVs isNil.\r\tself assert:  emptyClass objKeywords isNil.\r\tself assert:  emptyClass objMethodDict isNil.\r\tself assert:  emptyClass objName isNil',			#stamp : 'StephaneDucasse 11/26/2014 22:01',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2019-11-22T10:29:32.213757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjTestBootstrap,				#isMetaSide : false			},			#name : #testManuallyCreateObjClassStructure,			#protocol : #'test ObjClass manual creation ',			#sourceCode : 'testManuallyCreateObjClassStructure\r\t"(self selector: #testManuallyCreateObjClassStructure) run"\r\r\t| objClass |\r\tObj initialize.\r\tObj manuallyCreateObjClass.\r\tobjClass := Obj giveClassNamed: #ObjClass.\r\tself assert: (objClass objName = #ObjClass).\r\tself assert: (objClass objClassId = #ObjClass).\r\tself assert: (objClass objClass == objClass).\r\tself assert: (objClass objSuperclassId = #ObjObject).\t\r\t"the fact that the created first class inherits form ObjObject is not necessary\r\tbecause there is no super calls"\r\tself assert: (objClass objIVs = #(#class #name #superclass #iv #keywords #methodDict)).\r\tself assert: (objClass objKeywords = #(#name: #superclass: #iv: #keywords: #methodDict:))',			#stamp : 'StephaneDucasse 11/26/2014 22:01',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2019-11-22T10:29:32.214757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assembleClassClass,			#protocol : #setup,			#sourceCode : 'assembleClassClass\r\tclassClass := Obj new: 6.\r\tclassClass at: 2 put: #ObjClass.\r\tclassClass at: 1 put: #ObjClass.\r\tclassClass at: 4 put: #(#class #name #superclass #iv #keywords #methodDict).\r\tclassClass at: 5 put: #(#name: #superclass: #iv: #keywords: #methodDict:).\r\tclassClass at: 3 put: #ObjObject.\r\tclassClass at: 6 put: (IdentityDictionary new).\r\tObj declareClass: classClass',			#stamp : 'StephaneDucasse 11/17/2014 11:10',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2019-11-22T10:29:32.217757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assembleColoredInstance,			#protocol : #setup,			#sourceCode : 'assembleColoredInstance\r\taColoredPoint := Obj new: 4.\r\taColoredPoint at: 1 put: #ObjColoredPoint.\r\taColoredPoint at: 2 put: 10.\r\taColoredPoint at: 3 put: 15.\r\taColoredPoint at: 4 put: #blue',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2019-11-22T10:29:32.217757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assembleColoredPointClass,			#protocol : #setup,			#sourceCode : 'assembleColoredPointClass\r\tcoloredPointClass := Obj new: 6.\r\tcoloredPointClass at: 2 put: #ObjColoredPoint.\r\tcoloredPointClass at: 1 put: #ObjClass.\r\t"Here the initialize of metaclass is not available so we perform the instance variable lookup by hand."\r\tcoloredPointClass at: 4 put: #( #class #x #y #color).\r\tcoloredPointClass at: 3 put: #ObjPoint.\r\tcoloredPointClass at: 6 put: (IdentityDictionary new).\r\tObj declareClass: coloredPointClass.\r\r\t(coloredPointClass at: coloredPointClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\tTranscript show: \'I\'\'am a colored point\';\r\t\t\t\tcr]] value: pointClass).\r\r\t(coloredPointClass at: coloredPointClass offsetForMethodDict) at: #foo\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #foo withArguments:#() from: superClassOfClassDefiningTheMethod) + (objself super: #foo withArguments:#() from: superClassOfClassDefiningTheMethod)\r\t\t\t\t]] value: pointClass).\r\r\t(coloredPointClass at: coloredPointClass offsetForMethodDict) at: #bar\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #bar withArguments:#() from: superClassOfClassDefiningTheMethod) + (objself super: #bar withArguments:#() from: superClassOfClassDefiningTheMethod)]\r\t\t\t] value: pointClass).',			#stamp : 'StephaneDucasse 11/27/2014 20:38',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2019-11-22T10:29:32.218757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assembleIncrementalColoredInstance,			#protocol : #setup,			#sourceCode : 'assembleIncrementalColoredInstance\r\t\r\taIncrementalColoredPoint := Obj new: 4.\r\taIncrementalColoredPoint at: 1 put: #ObjIncrementalColoredPoint.\r\taIncrementalColoredPoint at: 2 put: 10.\r\taIncrementalColoredPoint at: 3 put: 15.\r\taIncrementalColoredPoint at: 4 put: #blue',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2019-11-22T10:29:32.219757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assembleIncrementalColoredPointClass,			#protocol : #setup,			#sourceCode : 'assembleIncrementalColoredPointClass\r\tincrementalColoredPointClass := Obj new: 6.\r\tincrementalColoredPointClass at: 2 put: #ObjIncrementalColoredPoint.\r\tincrementalColoredPointClass at: 1 put: #ObjClass.\r\t"Some tests will invoke by hand computeIV... so we do not have to hardcode the sequence."\r\tincrementalColoredPointClass at: 4 put: #( #color).\r\tincrementalColoredPointClass at: 3 put: #ObjPoint.\r\tincrementalColoredPointClass at: 6 put: (IdentityDictionary new).\r\tObj declareClass: incrementalColoredPointClass.\r\r\t(incrementalColoredPointClass at: incrementalColoredPointClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\tTranscript show: \'I\'\'am a colored point\';\r\t\t\t\tcr]] value: pointClass).\r\r\t(incrementalColoredPointClass at: incrementalColoredPointClass offsetForMethodDict) at: #foo\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #foo withArguments: #() from: superClassOfClassDefiningTheMethod) + (objself super: #foo withArguments: #() from: superClassOfClassDefiningTheMethod)\r\t\t\t\t]] value: pointClass).\r\r\t(incrementalColoredPointClass at: incrementalColoredPointClass offsetForMethodDict) at: #bar\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\t(objself super: #bar withArguments: #()  from: superClassOfClassDefiningTheMethod) + (objself super: #bar withArguments: #()  from: superClassOfClassDefiningTheMethod)]\r\t\t\t] value: pointClass).',			#stamp : 'StephaneDucasse 11/27/2014 20:39',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2019-11-22T10:29:32.220757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assembleObjectClass,			#protocol : #setup,			#sourceCode : 'assembleObjectClass\r\tobjectClass := Obj new: 6.\r\tobjectClass at: 2 put: #ObjObject.\r\tobjectClass at: 1 put: #ObjClass.\r\tobjectClass at: objectClass offsetForIVs put: #(#class).\r\tobjectClass at: objectClass offsetForKeywords put: #().\r\tobjectClass at: objectClass offsetForSuperclass put: nil.\r\tobjectClass at: objectClass offsetForMethodDict put: (IdentityDictionary new).\r\tObj declareClass: objectClass.\r\r\t"here I simulate by hand the way superclass is captured for super lookup, I value the block with nil for now to represent\r\tthe superclass of ObjObject"\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod |\r\t\t\t\t[:objself | \r\t\t\tTranscript show: \'I\'\'am an Object\';\r\t\t\t\tcr]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #error\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod |\r\t\t\t\t[:object :selector | \r\t\t\tTranscript show: \'Error: selector \' , selector printString , \' not understood\';\r\t\t\t\tcr.\r\t\t\t\tError signal]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #getIV\r\t\tput: ([:superClassOfClassDefiningTheMethod | [:object :iv | object valueOfInstanceVariable: iv]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #setIV\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod | [:object :iv :val | \r\t\t\tobject at: (object offsetFromObjectOfInstanceVariable: iv) put: val]] value: nil).\r\r\t(objectClass at: objectClass offsetForMethodDict) at: #bar\r\t\tput: \r\t\t\t([:superClassOfClassDefiningTheMethod | [:objself | \r\t\t\t\t\t5]] value: nil).',			#stamp : 'StephaneDucasse 11/17/2014 11:12',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2019-11-22T10:29:32.221757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assemblePointClass,			#protocol : #setup,			#sourceCode : 'assemblePointClass\r\t| cl |\r\tcl := Obj giveClassNamed: #ObjClass.\r\tpointClass := Obj new: (cl at: cl offsetForIVs) size.\r\tpointClass at: 2 put: #ObjPoint.\r\tpointClass at: 1 put: #ObjClass.\r\tpointClass at: 4 put: #(#class #x #y).\r\tpointClass at: 5 put: #(#x: #y:).\r\tpointClass at: 3 put: #ObjObject.\r\tpointClass at: 6 put: (IdentityDictionary new).\r\tObj declareClass: pointClass.\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #x\r\t\tput: ([ :superClassOfClassDefiningTheMethod | [:objself | objself valueOfInstanceVariable: #x]] value: objectClass).\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #print\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | [:objself | \r\t\t\tTranscript show: \'I\'\'am a Point\';\r\t\t\t\tcr]] value: objectClass).\r\r\t(pointClass at: pointClass offsetForMethodDict) at: #foo\r\t\tput: \r\t\t\t([ :superClassOfClassDefiningTheMethod | \r\t\t\t\t[:objself | \r\t\t\t\tTranscript show: \'ObjPoint>>foo\';cr.\r\t\t\t\t5\r\t\t\t\t]] value: objectClass)',			#stamp : 'StephaneDucasse 11/17/2014 11:13',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2019-11-22T10:29:32.222757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #assemblePointInstance,			#protocol : #setup,			#sourceCode : 'assemblePointInstance\r\taPoint := Obj new: 3.\r\taPoint at: 1 put: #ObjPoint.\r\taPoint at: 2 put: 10.\r\taPoint at: 3 put: 15',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2019-11-22T10:29:32.223757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\t"self new setUp"\r\r\tObj initialize.\r\tself assembleClassClass.\r\tself assemblePointClass.\r\tself assembleObjectClass.\r\tself assembleColoredPointClass.\r\tself assemblePointInstance.\r\tself assembleColoredInstance.\r\tself assembleIncrementalColoredInstance.\r\tself assembleIncrementalColoredPointClass',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2019-11-22T10:29:32.224757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testClassAccess,			#protocol : #'step3-tests-class access',			#sourceCode : 'testClassAccess\r\t"(self  selector: #testClassAccess) run"\r\t\r\tself assert: (aPoint objClass = pointClass)',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2019-11-22T10:29:32.226757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjClassId,			#protocol : #'step1-tests-structure of objects',			#sourceCode : 'testPrimitiveStructureObjClassId\r\t"(self selector: #testPrimitiveStructureObjClassId) run"\r\r\tself assert: (pointClass objClassId = #ObjClass).\r',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2019-11-22T10:29:32.227757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjClassIdForSimpleObject,			#protocol : #'step1-tests-structure of objects',			#sourceCode : 'testPrimitiveStructureObjClassIdForSimpleObject\r\t"self run: #testPrimitiveStructureObjClassIdForSimpleObject"\r\r\tself assert: (aPoint objClassId = #ObjPoint).\r',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2019-11-22T10:29:32.228757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjIVs,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjIVs\r\t"(self selector: #testPrimitiveStructureObjIVs) run"\r\r\tself assert: ((pointClass objIVs) = #(#class #x #y)).\r',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2019-11-22T10:29:32.229757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjKeywords,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjKeywords\r\t"(self selector: #testPrimitiveStructureObjKeywords) run"\r\r\tself assert: ((pointClass objKeywords) = #(#x: #y:)).\r',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2019-11-22T10:29:32.230757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjMethodDict,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjMethodDict\r\t"(self selector: #testPrimitiveStructureObjMethodDict) run"\r\r\tself assert: ((pointClass objMethodDict) = nil) not',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2019-11-22T10:29:32.231757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjName,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjName\r\t"(self selector: #testPrimitiveStructureObjName) run"\r\r\tself assert: ((pointClass objName ) = #ObjPoint).\r\t',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2019-11-22T10:29:32.232757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RawObjTest,				#isMetaSide : false			},			#name : #testPrimitiveStructureObjSuperclassId,			#protocol : #'step2-tests-structure of classes',			#sourceCode : 'testPrimitiveStructureObjSuperclassId\r\t"(self selector: #testPrimitiveStructureObjSuperclassId) run"\r\r\tself assert: ((pointClass objSuperclassId ) = #ObjObject).\r',			#stamp : 'StephaneDucasse 11/17/2014 11:09',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2019-11-22T10:29:32.233757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #addMessagesForErrorHandling,			#protocol : #'bootstrap objMessage',			#sourceCode : 'addMessagesForErrorHandling\r\t"pre condition message has been created (and declared)"\r\t"self addMessagesForErrorHandling"\r\t| objMessage |\r\tobjMessage := self ObjMessage.\r\r\tobjMessage \r\t\taddUnaryMethod: #receiver \r\t\twithBody: \'objself valueOfInstanceVariable: #receiver\'.\r\r\tobjMessage \r\t\taddUnaryMethod: #receiver2 \r\t\twithBody: \'objself send: #getIV withArguments: #(#receiver)\'.\r\r\tobjMessage \r\t\taddUnaryMethod: #selector \r\t\twithBody: \'objself send: #getIV withArguments: #(#selector)\'.\r\t\t\r\tobjMessage \r\t\taddUnaryMethod: #arguments \r\t\twithBody: \'objself send: #getIV withArguments: #(#arguments)\'.\r\t\r\tobjMessage \r\t\taddMethod: #setReceiver\r\t\targs: \'receiver\'\r\t\twithBody:\' objself send: #setIV withArguments: (Array with: #receiver with: receiver)\'.\r\t\t\r\tobjMessage \r\t\taddMethod: #setSelector\r\t\targs: \'selector\'\r\t\twithBody:\' objself send: #setIV withArguments: (Array with: #selector with: selector)\'.\r\r\tobjMessage \r\t\taddMethod: #setArguments\r\t\targs: \'arguments\'\r\t\twithBody:\' objself send: #setIV withArguments: (Array with: #arguments with: arguments)\'.\t\t\r\t\t\t\t\r\t^ objMessage ',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2019-11-22T10:29:32.234757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #bootstrap,			#protocol : #'bootstrap objClass manually',			#sourceCode : 'bootstrap\r\t"self bootstrap"\r\t\r\tself initialize.\r\tself manuallyCreateObjClass.\r\tself createObjObject.\r\tself createObjClass.',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2019-11-22T10:29:32.235757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #classInstanceVariables,			#protocol : #'meta data',			#sourceCode : 'classInstanceVariables\r\t^ #(#class #name #superclass #iv #keywords #methodDict)',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2019-11-22T10:29:32.236757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #createObjClass,			#protocol : #'bootstrap objClass',			#sourceCode : 'createObjClass\r\t"self bootstrap"\r\r\t| objClass |\r\tobjClass := self objClassStructure.\r\tself defineAllocateMethodIn: objClass.\r\tself defineNewMethodIn: objClass.\r\tself defineInitializeMethodIn: objClass.\r\tobjClass \r\t\taddUnaryMethod: #isMetaclass\r\t\twithBody: \'objself objIVs includes: #superclass\'.\t\r\t"an object is a class if is class is a metaclass. cool"\r\t\r\tobjClass \r\t\taddUnaryMethod: #isClass\r\t\twithBody: \'objself objClass send: #isMetaclass withArguments:#()\'.\r\r\t^objClass',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2019-11-22T10:29:32.237757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #createObjObject,			#protocol : #'bootstrap objObject',			#sourceCode : 'createObjObject\r\t| objObject |\r\tobjObject := self objObjectStructure.\r\tobjObject addUnaryMethod: #class withBody: \'objself objClass\'.\r\tobjObject addUnaryMethod: #isClass withBody: \'false\'.\r\tobjObject addUnaryMethod: #isMetaclass withBody: \'false\'. \r\tobjObject \r\t\taddMethod: #error\r\t\targs: \'arrayOfArguments\'\r\t\twithBody: \'Transcript show: \'\'error \'\', arrayOfArguments first.  \'\'error \'\', arrayOfArguments first\'.\r\r\t"some meta facilities"\r\tobjObject \r\t\taddMethod: #getIV\r\t\targs: \'iv\'\r\t\twithBody: \'objself valueOfInstanceVariable: iv\'.\r\r\tobjObject \r\t\taddMethod: #setIV\r\t\targs: \'iv val\'\r\t\twithBody: \r\t\t\t\' objself at: (objself offsetFromObjectOfInstanceVariable: iv) put: val\'.\r\r\tobjObject \r\t\taddMethod: #initialize\r\t\targs: \'initargs\'\r\t\twithBody: \'objself  initializeUsing: initargs\'.\r\t^objObject',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2019-11-22T10:29:32.238757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'declareClass:',			#protocol : #'global class repository management',			#sourceCode : 'declareClass: anObjClass \r\t"To declare an ObjClass in the class repository"\r\r\t| nameC |\r\tnameC := anObjClass objName.\r\tnameC isNil\r\t\tifFalse: [definedObjClasses at: nameC put: anObjClass]\r\t\tifTrue: [self error: \'The class does not have a name\']',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2019-11-22T10:29:32.239757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'defineAllocateMethodIn:',			#protocol : #'bootstrap objClass manually',			#sourceCode : 'defineAllocateMethodIn: class \r\t"The allocated obj method simply invokes the primitive allocateAnInstance."\r\t\r\tclass \r\t\taddUnaryMethod: #allocate \r\t\twithBody: \'objself allocateAnInstance\'',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2019-11-22T10:29:32.240757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'defineInitializeMethodIn:',			#protocol : #'bootstrap objClass',			#sourceCode : 'defineInitializeMethodIn: objClass \r\r\tobjClass \r\t\taddMethod: #initialize\r\t\targs: \'initArray\'\r\t\twithBody: \r\t\t\t\'objself super: #initialize withArguments: {initArray} from: superClassOfClassDefiningTheMethod.\r\t\t\tobjself objIVs: (objself\r\t\t\t\t\t\t\tcomputeNewIVFrom: (Obj giveClassNamed: objself objSuperclassId) objIVs\r\t\t\t\t\t\t\twith: objself objIVs).\r\t\t\tobjself computeAndSetKeywords.\r\t\t\tobjself objMethodDict: IdentityDictionary new.\r\t\t\tObj declareClass: objself.\r\t\t\tobjself\'',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2019-11-22T10:29:32.241757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'defineManualInitializeMethodIn:',			#protocol : #'bootstrap objClass manually',			#sourceCode : 'defineManualInitializeMethodIn: class \r\r\tclass \r\t\taddMethod: #initialize\r\t\targs: \'initArray\'\r\t\twithBody: \t\r\t\t\t\'| objsuperclass |\r\t\t\tobjself initializeUsing: initArray.\t"Initialize a class as an object. In the bootstrapped system will be done via super"\r\t\t\tobjsuperclass := Obj giveClassNamed: objself objSuperclassId ifAbsent: [nil].\r\t\t\tobjsuperclass isNil\r\t\t\t\tifFalse: \r\t\t\t\t\t[objself\r\t\t\t\t\t\tobjIVs: (objself computeNewIVFrom: objsuperclass objIVs with: objself objIVs)]\r\t\t\t\tifTrue: \r\t\t\t\t\t[objself objIVs: (objself computeNewIVFrom: #(#class) with: objself objIVs)].\r\t\t\tobjself\r\t\t\t\tobjKeywords: (objself generateKeywords: (objself objIVs copyWithout: #class)).\r\t\t\tobjself objMethodDict: (IdentityDictionary new: 3).\r\t\t\tObj declareClass: objself.\r\t\t\tobjself\'',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2019-11-22T10:29:32.242757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'defineNewMethodIn:',			#protocol : #'bootstrap objClass manually',			#sourceCode : 'defineNewMethodIn: class \r\r\tclass \r\t\taddMethod: #new\r\t\targs: \'initArray\'\r\t\twithBody: \r\t\t\t\'(objself send: #allocate withArguments: #()) send: #initialize withArguments: { initArray } \'.',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2019-11-22T10:29:32.243757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'doesNotUnderstand:',			#protocol : #tricks,			#sourceCode : 'doesNotUnderstand: aMessage\r\r\t"debugging >>>  default shiftDown ifTrue:[ self halt ]."\r\t"Sensor shiftPressed ifTrue:[ self halt ]."\r\t\r\t^ definedObjClasses at: aMessage selector',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2019-11-22T10:29:32.244757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'giveClassNamed:',			#protocol : #'global class repository management',			#sourceCode : 'giveClassNamed: aSymbol \r\t"Return the class defined in the class repository with the name aSymbol"\r\r\t^ self giveClassNamed: aSymbol ifAbsent: [self error: (\'The class \' , aSymbol printString , \' is not defined\')]',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2019-11-22T10:29:32.245757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #'giveClassNamed:ifAbsent:',			#protocol : #'global class repository management',			#sourceCode : 'giveClassNamed: aSymbol ifAbsent: aBlock\r\r\t^ definedObjClasses at: aSymbol ifAbsent: aBlock',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2019-11-22T10:29:32.246757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\t"self initialize"\t\r \r\tdefinedObjClasses := IdentityDictionary new.\r\tdefinedObjClasses at: #ObjClass put: nil.\r\tdefinedObjClasses at: #ObjObject put: nil.\r\tdefinedObjClasses at: #ObjMessage put: nil.',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2019-11-22T10:29:32.247757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #manualObjClassStructure,			#protocol : #'bootstrap objClass manually',			#sourceCode : 'manualObjClassStructure\r\t| class |\r\tclass := Obj new: 6.\r\tclass objClassId: #ObjClass.\r\tclass objName: #ObjClass.\r\tclass objIVs: self classInstanceVariables.\r\tclass objKeywords: #(#name: #superclass: #iv: #keywords: #methodDict:).\r\tclass objSuperclassId: #ObjObject.\r\tclass objMethodDict: (IdentityDictionary new: 3).\r\t^ class',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2019-11-22T10:29:32.248757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #manuallyCreateObjClass,			#protocol : #'bootstrap objClass manually',			#sourceCode : 'manuallyCreateObjClass\r\t"self manuallyCreateObjClass"\r\r\t| class |\r\tclass := self manualObjClassStructure.\r\tObj declareClass: class.\r\tself defineManualInitializeMethodIn: class.\r\tself defineNewMethodIn: class.\r\tself defineAllocateMethodIn: class.\r\t^class',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2019-11-22T10:29:32.249757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #objClassStructure,			#protocol : #'bootstrap objClass',			#sourceCode : 'objClassStructure\r\t^(Obj giveClassNamed: #ObjClass) send: #new\r\t\twithArguments: #(#(#name: #ObjClass #iv: #(#name #superclass #iv #keywords #methodDict) #superclass: #ObjObject))',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2019-11-22T10:29:32.250757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #objClassStructureMessage,			#protocol : #'bootstrap objMessage',			#sourceCode : 'objClassStructureMessage\r\t^ Obj ObjClass \r\t\tsend: #new\r\t\twithArguments: #(#(#name: #ObjMessage #iv: #(#receiver #selector #arguments) #superclass: #ObjObject))',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2019-11-22T10:29:32.251757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #objObjectStructure,			#protocol : #'bootstrap objObject',			#sourceCode : 'objObjectStructure\r\t^(Obj giveClassNamed: #ObjClass) \r\t\tsend: #new\r\t\twithArguments: #(#(#name: #ObjObject #iv: #(#class)))',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2019-11-22T10:29:32.252757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Obj class',				#isMetaSide : true			},			#name : #selectorsToSkeletonize,			#protocol : #'skeleton metadata',			#sourceCode : 'selectorsToSkeletonize\r\t"Skeletonizer new \r\t\tselectors: Obj selectorsToSkeletonize;\r\t\tsourceClassName: #Obj;\r\t\ttargetClassName: #ObjSkeleton;\r\t\tinstallClass;\r\t\tskeletonize\r\t\t"\r\r\t^ #(objIVs objIVs: objKeywords objKeywords: objMethodDict objMethodDict: objName objName: objSuperclassId objSuperclassId: objClass objClassId objClassId: allocateAnInstance offsetFromClassOfInstanceVariable: offsetFromObjectOfInstanceVariable: valueOfInstanceVariable: #send:withArguments: #super:withArguments:from: lookup: bodyOfMethod:)',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2019-11-22T10:29:32.253757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'addMethod:args:withBody:',			#protocol : #'method management',			#sourceCode : 'addMethod: aSelector args: aString withBody: aStringBlock \r\t"Define a method with selector <aSelector> , having a string representing the arguments (ie \'aNumber aStream\') \r\tand a string representing the method body in the receiver.\r\tIf a method with the same selector already existed, the new definition will erase it.\r\tself is an objClass"\r\r\tself  objMethodDict at: aSelector put: (self methodWithHeader: aString andBody: aStringBlock).\r\t^self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2019-11-22T10:29:32.254757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'addUnaryMethod:withBody:',			#protocol : #'method management',			#sourceCode : 'addUnaryMethod: aSelector withBody: aStringBlock \r\t"Define a unary method with selector <aSelector> and a body <aaStringBlock> in the receiver.\r\tIf a method with the same selector already existed, the new definition will erase it.\r\tself is an objClass"\r\r\tself  addMethod: aSelector args: \'\' withBody: aStringBlock',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2019-11-22T10:29:32.255757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #allocateAnInstance,			#protocol : #'instance allocation',			#sourceCode : 'allocateAnInstance\r\t"Returns a newly created instance of self, an ObjClass. In this implementation the identifier of the object class is the name of the class. "\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2019-11-22T10:29:32.256757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'basicSend:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'basicSend: selector withArguments: arguments from: aClass\r\t"Execute the method found starting from aClass and whose name is selector."\r\t"The core of the sending a message, reused for both a normal send or a super one."\r\t\r\t| methodOrNil |\r\tmethodOrNil := aClass lookup: selector.\r\t^ methodOrNil \r\t\tifNotNil: [ methodOrNil valueWithArguments: (Array with: self) , arguments ] \r\t\tifNil: [ self sendError: selector withArgs: arguments ] ',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2019-11-22T10:29:32.257757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'blockArgsFrom:',			#protocol : #'method management',			#sourceCode : 'blockArgsFrom: aCol\r\t"self basicNew blockArgsFrom: \' abc def ghi \'"\t\r\t\r\t| col st |\r\tcol := aCol findTokens: Character space.\r\tcol := col copyWithout: \'\'.\r\tst := \'\'.\r\tcol do: [ :each | st := st , \':\', each ] separatedBy: [st := st, \' \'].\r\t^ st',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2019-11-22T10:29:32.259757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'bodyOfMethod:',			#protocol : #'method management',			#sourceCode : 'bodyOfMethod: aSelector\r\t"Return the method associated with the selector <aSelector> in the receiver.\r\tReturn nil if the selector is not defined.  self is an objClass"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2019-11-22T10:29:32.260757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #classDebug,			#protocol : #debugging,			#sourceCode : 'classDebug\r\t"(self giveClassNamed: #ObjClass) classDebug"\r\r\t"(self giveClassNamed: #ObjSet) classDebug"\r\r\tObjClassInspector basicInspect: self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2019-11-22T10:29:32.261757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #computeAndSetKeywords,			#protocol : #'keyword management',			#sourceCode : 'computeAndSetKeywords\r\t"Compute the keywords of a given class.  As the class of an object should not be changed.\r\t the keywords should note contain the keyword class. self is anObjClass"\r\r\tself objKeywords: (self generateKeywords: (self objIVs copyWithout: #class))',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2019-11-22T10:29:32.262757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'computeNewIVFrom:with:',			#protocol : #'iv inheritance',			#sourceCode : 'computeNewIVFrom: superIVOrdCol with: localIVOrdCol\r\t"Returns an ordered collection that is the union without duplicate of ivOfSuper and ivOrderedCollection.\r\tImportant the order of the instance variable is conserved"\r\r\t| ivs |\r\t^superIVOrdCol isNil \r\t\tifTrue: [localIVOrdCol]\r\t\tifFalse: \r\t\t\t[ivs := superIVOrdCol asOrderedCollection copy.\r\t\t\tlocalIVOrdCol do: [:e | (ivs includes: e) ifFalse: [ivs add: e]].\r\t\t\tivs]',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2019-11-22T10:29:32.264757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'computeNewIVFromClass:with:',			#protocol : #'iv inheritance',			#sourceCode : 'computeNewIVFromClass: anObjClass with: ivOrderedCollection \r\t"Obj computeNewIVFromClass: #(#C #C #O #(a b c d)) with: #(a z b t) asOrderedCollection"\r\r\t| ivs |\r\t^anObjClass isNil\r\t\tifTrue: [ivOrderedCollection]\r\t\tifFalse: \r\t\t\t[ivs := anObjClass objIVs asOrderedCollection copy.\r\t\t\tivOrderedCollection do: [:e | (ivs includes: e) ifFalse: [ivs add: e]].\r\t\t\tivs]',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2019-11-22T10:29:32.265757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'doesUnderstand:',			#protocol : #'method management',			#sourceCode : 'doesUnderstand: aSelector \r\t"Tell if the receiver has a method having <aSelector> as selector. self is anObjClass"\r\r\t^self objMethodDict keys includes: aSelector',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2019-11-22T10:29:32.266757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'generateKeywords:',			#protocol : #'keyword management',			#sourceCode : 'generateKeywords: anArray \r\t"Returns an array containing the keywords made from the collection of Symbol passed as argument"\r\t"self new generateKeywords: #(titi toto lulu) "\r\r\t^anArray collect: [:e | (e , \':\') asSymbol]',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2019-11-22T10:29:32.267757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'initializeUsing:',			#protocol : #'instance initialization',			#sourceCode : 'initializeUsing: anAlternatedArray \r\t"Returns the receiver an ObjObject initialized according to the directives given by anAlternateArray"\r\r\t| ivValues |\r\tivValues := self \r\t\t\t\t\t\treturnValuesFrom: anAlternatedArray\r\t\t\t\t\t\tfollowingSchema: self objClass objKeywords.\r\t1 to:  ivValues size\r\t\t\tdo: [:i | self at: i + 1 put: (ivValues at: i)].\r\t^ self ',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2019-11-22T10:29:32.268757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'keywordValue:getFrom:ifAbsent:',			#protocol : #'keyword management',			#sourceCode : 'keywordValue: aSymbol getFrom: anArray ifAbsent: aDefaultValue \r\t"precondition: ((length anArray) mod 2) = 0 \r\treturns the value associated with the keyword represented by aSymbol \r\tin the initarg list represented by anArray."\r\r\t"self new keywordValue: #titi getFrom: #(toto 12 titi 23) ifAbsent: 2"\r\t"self new keywordValue: #titi getFrom: #(toto 23) ifAbsent: 2"\r\r\t| i |\r\ti := anArray indexOf: aSymbol ifAbsent: nil.\r\t^i isNil \r\t\tifTrue: [aDefaultValue] \r\t\tifFalse: [anArray at: i + 1]',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2019-11-22T10:29:32.270757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'lookup:',			#protocol : #'method lookup',			#sourceCode : 'lookup: selector\r\t"look for the method named <selector> starting in the receiver. \r\tThe lookup is done for a message sent to <anObjObject>. self is an objClass"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2019-11-22T10:29:32.271757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'methodWithHeader:andBody:',			#protocol : #'method management',			#sourceCode : 'methodWithHeader: col andBody: aString \r\r\t| block string resBlock |\r\tstring := self stringOfBlockBodyFromHeader: col andBody: aString.\r\tblock := Compiler evaluate: string.\r\r\t"bind superclass to the superclass of the class defining the method"\r\tresBlock := block value: (Obj giveClassNamed: self objSuperclassId ifAbsent: [666]).\r\t^resBlock',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2019-11-22T10:29:32.272757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #numberOfIVs,			#protocol : #'iv management',			#sourceCode : 'numberOfIVs\r\t"Returns the number of instance variables of the class an ObjClass"\r\r\t^self objIVs size',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2019-11-22T10:29:32.274757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objClass,			#protocol : #'object structure primitive',			#sourceCode : 'objClass\r\t"Receiver should be: anObjObject. Returns the class of the receiver (which is an ObjObject) and not its internal identification. Differs from classId  which is a primitive to access the structure representing a class"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2019-11-22T10:29:32.274757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objClassId,			#protocol : #'object structure primitive',			#sourceCode : 'objClassId\r\t"Receiver should be: anObjObject. Returns the identifier that identifies the class of the receiver (an objObject). In this implementation we chose to use the class name as identifier"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2019-11-22T10:29:32.275757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'objClassId:',			#protocol : #'object structure primitive',			#sourceCode : 'objClassId: anObjClassId\r\t"Receiver should be: anObjObject. Set the identifier that identifies the class of the receiver (anObjObject)."\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2019-11-22T10:29:32.276757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objIVs,			#protocol : #'class structure primitive',			#sourceCode : 'objIVs\r\t"Receiver should be: anObjClass. Returns the list of instance variables"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2019-11-22T10:29:32.277757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'objIVs:',			#protocol : #'class structure primitive',			#sourceCode : 'objIVs: anOrderedCollection\r\t"Receiver should be: anObjClass. Set the list of instance variable names of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2019-11-22T10:29:32.278757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objKeywords,			#protocol : #'class structure primitive',			#sourceCode : 'objKeywords\r\t"Receiver should be: anObjClass. Returns the keyword list of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2019-11-22T10:29:32.279757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'objKeywords:',			#protocol : #'class structure primitive',			#sourceCode : 'objKeywords: anOrderedCollection\r\t"Receiver should be: anObjClass. Sets the list of keywords of the receiver (anObjClass). Note that this method is just an accessor and does not compute the actual list of keywords"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2019-11-22T10:29:32.281757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objMethodDict,			#protocol : #'class structure primitive',			#sourceCode : 'objMethodDict\r\t"Receiver should be: anObjClass. Returns the method dictionary of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2019-11-22T10:29:32.282757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'objMethodDict:',			#protocol : #'class structure primitive',			#sourceCode : 'objMethodDict: aDictionary\r\t"Receiver should be: anObjClass. Sets the method dictionary of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2019-11-22T10:29:32.283757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objName,			#protocol : #'class structure primitive',			#sourceCode : 'objName\r\t"Receiver should be: anObjClass. Returns the name of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2019-11-22T10:29:32.284757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'objName:',			#protocol : #'class structure primitive',			#sourceCode : 'objName: aName\r\t"Receiver should be: anObjClass. Set the name of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2019-11-22T10:29:32.285757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objSuperclass,			#protocol : #'class structure primitive',			#sourceCode : 'objSuperclass\r\t"Receiver should be: anObjClass. Returns the superclass of the receiver (which is an objClass) and not its internal identification. Differs from superclassId which is a primitive to access the structure representing a class"\r\r\t^Obj giveClassNamed: self objSuperclassId',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2019-11-22T10:29:32.286757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #objSuperclassId,			#protocol : #'class structure primitive',			#sourceCode : 'objSuperclassId\r\t"Receiver should be: anObjClass. Returns the superclass id of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2019-11-22T10:29:32.287757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'objSuperclassId:',			#protocol : #'class structure primitive',			#sourceCode : 'objSuperclassId: anObjClassId\r\t"Receiver should be: anObjClass. Set the superclass id of the receiver (anObjClass)"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2019-11-22T10:29:32.288757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #offsetForClass,			#protocol : #'object structure offset',			#sourceCode : 'offsetForClass\r\r\t^1',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2019-11-22T10:29:32.289757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #offsetForIVs,			#protocol : #'class structure offset',			#sourceCode : 'offsetForIVs\r\t^4',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2019-11-22T10:29:32.290757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #offsetForKeywords,			#protocol : #'class structure offset',			#sourceCode : 'offsetForKeywords\r\r\t^5',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2019-11-22T10:29:32.291757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #offsetForMethodDict,			#protocol : #'class structure offset',			#sourceCode : 'offsetForMethodDict\r\r\t^6',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2019-11-22T10:29:32.292757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #offsetForName,			#protocol : #'class structure offset',			#sourceCode : 'offsetForName\r\r\t^2',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2019-11-22T10:29:32.294757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #offsetForSuperclass,			#protocol : #'class structure offset',			#sourceCode : 'offsetForSuperclass\r\r\t^3',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2019-11-22T10:29:32.295757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'offsetFromClassOfInstanceVariable:',			#protocol : #'iv management',			#sourceCode : 'offsetFromClassOfInstanceVariable: aSymbol\r\t"Returns the index of the instance variable named aSymbol for an class anObjClass.\r\tReturns 0 if the aSymbol is not present in the instance variable lists of anObjClass"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2019-11-22T10:29:32.296757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'offsetFromObjectOfInstanceVariable:',			#protocol : #'keyword management',			#sourceCode : 'offsetFromObjectOfInstanceVariable: aSymbol\r\t"Returns the offset of the instance variable named aSymbol in the object anObjObject.\r\tIf aSymbol is not an instance variable is not an instance variable of the object raise an error"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2019-11-22T10:29:32.297757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\taStream nextPutAll: \'an Obj object: \'.\t\r\tsuper printOn: aStream',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2019-11-22T10:29:32.298757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'removeMethod:',			#protocol : #'method management',			#sourceCode : 'removeMethod: aSelector\r\t"Remove the method with aSelector <aSymbol> in the receiver. \r\tself is an objClass"\r\r\tself objMethodDict removeKey: aSelector ifAbsent: [].\r\t^self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2019-11-22T10:29:32.299757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'returnValuesFrom:followingSchema:',			#protocol : #'keyword management',			#sourceCode : 'returnValuesFrom: anInitargArray followingSchema: anArrayOfKeywords \r\t"Return the values associated with the keys. The extracted values are taken from <anInitargArray> \r\tand the return values are extracted according to the schema defined by the collection of keys <anArrayOfKeywords>"\r\r\t"self new returnValuesFrom: #(lulu 22  titi 35)  followingSchema: #(titi toto lulu titi)  #(35 nil 22 35)"\r\r\t^anArrayOfKeywords collect: \r\t\t\t[:e | \r\t\t\tself keywordValue: e\r\t\t\t\tgetFrom: anInitargArray \r\t\t\t\tifAbsent: nil]',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2019-11-22T10:29:32.300757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'send:withArguments:',			#protocol : #'message passing',			#sourceCode : 'send: selector withArguments: arguments\r\t"send the message whose selector is <selector> to the receiver. The arguments of the messages are an array <arguments>. The method is lookep up in the class of the receiver. self is an objObject or a objClass."\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2019-11-22T10:29:32.301757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'sendError:withArgs:',			#protocol : #'message passing',			#sourceCode : 'sendError: selector withArgs: arguments\r\t"send error wrapping arguments into an array with the selector as first argument. Instead of an array we should create a message object."\r\t\r\t^ self send: #error withArguments:  {(arguments copyWithFirst: selector)}\r\t\r',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2019-11-22T10:29:32.302757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'stringOfBlockBodyFromHeader:andBody:',			#protocol : #'method management',			#sourceCode : 'stringOfBlockBodyFromHeader: col andBody: aString \r\t^ \'[ :superClassOfClassDefiningTheMethod |\r\t\t[ :objself \' , (self blockArgsFrom: col) , \' |\r\t\t\t\t\t \' , aString , \'] ]\'',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2019-11-22T10:29:32.303757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'super:withArguments:from:',			#protocol : #'message passing',			#sourceCode : 'super: selector withArguments: arguments from: aSuperclass\r\t"Invoke an oveeriden method named <selector> with an array of arguments <arguments>.  self is an objClass. aSuperclass should be the superclass of the class containing the method using super"\r\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2019-11-22T10:29:32.304757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Obj,				#isMetaSide : false			},			#name : #'valueOfInstanceVariable:',			#protocol : #'iv management',			#sourceCode : 'valueOfInstanceVariable: aSymbol\r\t^ self',			#stamp : 'StephaneDucasse 1/1/2018 20:14',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2019-11-22T10:29:32.306757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StrictlyOrderedEyeElement,				#isMetaSide : false			},			#name : #orderedStructure,			#protocol : #accessing,			#sourceCode : 'orderedStructure\r\t\r\t^ orderedStructure',			#stamp : 'StephaneDucasse 11/16/2014 23:08',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2019-11-22T10:29:32.306757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StrictlyOrderedEyeElement,				#isMetaSide : false			},			#name : #'orderedStructure:',			#protocol : #accessing,			#sourceCode : 'orderedStructure: anObject\r\t\r\torderedStructure := anObject',			#stamp : 'StephaneDucasse 11/16/2014 23:08',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2019-11-22T10:29:32.307757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StrictlyOrderedEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self host basicAt: (self orderedStructure indexOf: index)',			#stamp : 'StephaneDucasse 11/16/2014 23:08',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2019-11-22T10:29:32.308757+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ObjClassInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #list,			#sourceCode : 'addVariableFields: elements\r\t\r\t| classStructure |\r\tclassStructure := Obj classInstanceVariables.\r\tclassStructure do: [ :key |\r\t\telements add: (StrictlyOrderedEyeElement new \r\t\t\t\t\t\t\t\torderedStructure: classStructure;\r\t\t\t\t\t\t\t\thost: self object;\r\t\t\t\t\t\t\t\tindex: key; \r\t\t\t\t\t\t\t\tyourself)]',			#stamp : 'StephaneDucasse 11/16/2014 23:10',			#package : #ObjVSkeleton		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T10:29:45.794757+01:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ObjVLispSkeleton-StephaneDucasse.6'		]	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T10:46:18.783757+01:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Metaprogrammation-Project,		#affectedPackageName : #Metaprogrammation	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T11:34:23.145757+01:00' ],		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ObjClass\r\tinstanceVariableNames: \'classId name superclassId instanceVariablesList initializationKeywordsList methodDict\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Metaprogrammation-Project\''			},			#name : #ObjClass,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #classId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #superclassId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #instanceVariablesList,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #initializationKeywordsList,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #methodDict,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjClass class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjClass class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjClass,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Metaprogrammation-Project,			#package : #Metaprogrammation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T11:38:01.626757+01:00' ],		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Class,				#isMetaSide : false			},			#name : #'subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:',			#protocol : #'subclass creation',			#sourceCode : 'subclass: t instanceVariableNames: f classVariableNames: d poolDictionaries: s package: cat\rself halt.\r\t^ self classInstaller\r\t\tmake: [ :builder | \r\t\t\tbuilder\r\t\t\t\tsuperclass: self;\r\t\t\t\tname: t;\r\t\t\t\tlayoutClass: self classLayout class;\r\t\t\t\tslots: f asSlotCollection;\r\t\t\t\tsharedVariablesFromString: d;\r\t\t\t\tsharedPools: s;\r\t\t\t\tcategory: cat;\r\t\t\t\tenvironment: self environment;\r\t\t\t\tcopyClassSlotsFromExistingClass ]',			#stamp : 'ThomasDiGiovanni 10/11/2019 11:32',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Class,				#isMetaSide : false			},			#name : #'subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:',			#protocol : #'subclass creation',			#sourceCode : 'subclass: t instanceVariableNames: f classVariableNames: d poolDictionaries: s package: cat\r\t"self halt."\r\t^ self classInstaller\r\t\tmake: [ :builder | \r\t\t\tbuilder\r\t\t\t\tsuperclass: self;\r\t\t\t\tname: t;\r\t\t\t\tlayoutClass: self classLayout class;\r\t\t\t\tslots: f asSlotCollection;\r\t\t\t\tsharedVariablesFromString: d;\r\t\t\t\tsharedPools: s;\r\t\t\t\tcategory: cat;\r\t\t\t\tenvironment: self environment;\r\t\t\t\tcopyClassSlotsFromExistingClass ]',			#stamp : 'ThomasDiGiovanni 11/22/2019 11:38',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T11:48:30.559757+01:00' ],		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ObjClass\r\tinstanceVariableNames: \'classId name superclassId instanceVariablesList initializationKeywordsList methodDict\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Metaprogrammation-Project\''			},			#name : #ObjClass,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #classId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #superclassId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #instanceVariablesList,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #initializationKeywordsList,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #methodDict,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjClass class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjClass class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjClass,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Metaprogrammation-Project,			#package : #Metaprogrammation,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ObjClass\r\tinstanceVariableNames: \'objClassId objName objSuperclassId objIVs objKeywords objMethodDict\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Metaprogrammation-Project\''			},			#name : #ObjClass,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objClassId,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objName,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objSuperclassId,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objIVs,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objKeywords,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objMethodDict,					#parent : @33				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjClass class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjClass class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjClass,					#isMetaSide : false				},				#parent : @33,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Metaprogrammation-Project,			#package : #Metaprogrammation,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T11:49:29.574757+01:00' ],		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ObjClass\r\tinstanceVariableNames: \'objClassId objName objSuperclassId objIVs objKeywords objMethodDict\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Metaprogrammation-Project\''			},			#name : #ObjClass,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objClassId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objName,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objSuperclassId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objIVs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objKeywords,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objMethodDict,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjClass class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjClass class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjClass,					#isMetaSide : false				},				#parent : @7,				#content : 'Implementation of the class Class of ObjvLisp',				#stamp : 'ThomasDiGiovanni 11/22/2019 11:49'			},			#classVariables : OrderedCollection [ ],			#category : #Metaprogrammation-Project,			#package : #Metaprogrammation,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Implementation of the class Class of ObjvLisp',		#newStamp : 'ThomasDiGiovanni 11/22/2019 11:49'	}}OmEntry {	#tags : {		#author : 'ThomasDiGiovanni',		#time : DateAndTime [ '2019-11-22T11:50:19.124757+01:00' ],		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#superclassName : 'Object',				#definitionSource : 'Object subclass: #ObjClass\r\tinstanceVariableNames: \'objClassId objName objSuperclassId objIVs objKeywords objMethodDict\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Metaprogrammation-Project\''			},			#name : #ObjClass,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objClassId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objName,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objSuperclassId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objIVs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objKeywords,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ObjClass,						#isMetaSide : false					},					#name : #objMethodDict,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ObjClass class\r\tinstanceVariableNames: \'\''				},				#name : #'ObjClass class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ObjClass,					#isMetaSide : false				},				#parent : @7,				#content : 'Implementation of the class Class of ObjvLisp.',				#stamp : 'ThomasDiGiovanni 11/22/2019 11:50'			},			#classVariables : OrderedCollection [ ],			#category : #Metaprogrammation-Project,			#package : #Metaprogrammation,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Implementation of the class Class of ObjvLisp',		#newComment : 'Implementation of the class Class of ObjvLisp.',		#oldStamp : 'ThomasDiGiovanni 11/22/2019 11:49',		#newStamp : 'ThomasDiGiovanni 11/22/2019 11:50'	}}