----QUIT----2019-08-22T08:52:26.88499+02:00 Pharo7.0-SNAPSHOT-32bit-a2a2b23.image priorSource: 0!----QUIT----2019-08-22T08:52:42.036664+02:00 Pharo7.0-SNAPSHOT-32bit-a2a2b23.image priorSource: 0!!ManifestMetaprogrammation commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestMetaprogrammation commentStamp: 'ThomasDiGiovanni 9/20/2019 10:06' prior: 33554698!HMIN305 - Métaprogrammation et réflexivité!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite'	classVariableNames: 'tailleDefaut'	package: 'Metaprogrammation'!!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:08'!initialize: taille"la pile est vide quand index = 0"index := 0."la pile est pleine quand index = capacite"capacite := taille."le contenu est stocké dans un tableau"contenu := Array new: capacite."pour les tests, enlever le commentaire quand isEmpty est écrite""self assert: (self isEmpty)."! !!Pile methodsFor: 'initialization' stamp: 'ThomasDiGiovanni 9/20/2019 10:09' prior: 33555198!initialize: taille	"La pile est vide quand index = 0, la pile est pleine quand index = capacite"	index := 0.	capacite := taille.		"Le contenu est stocké dans un tableau"	contenu := Array new: capacite		"pour les tests, enlever le commentaire quand isEmpty est écrite"	"self assert: (self isEmpty)."! !!Pile methodsFor: 'initialization' stamp: 'ThomasDiGiovanni 9/20/2019 10:09' prior: 33555596!initialize: taille	"La pile est vide quand index = 0, la pile est pleine quand index = capacite"	index := 0.	capacite := taille.	"Le contenu est stocké dans un tableau"	contenu := Array new: capacite	"Pour les tests, enlever le commentaire quand isEmpty est écrite"	"self assert: (self isEmpty)."! !!Pile methodsFor: 'initialization' stamp: 'ThomasDiGiovanni 9/20/2019 10:10'!printOn: aStreamaStream nextPutAll: 'une Pile, de taille: '.capacite printOn: aStream.aStream nextPutAll: ' contenant: '.index printOn: aStream.aStream nextPutAll: ' objets : ('.contenu do: [ :each | each printOn: aStream. aStream space ].aStream nextPut: $).aStream nextPut: $..! !!Pile methodsFor: 'initialization' stamp: 'ThomasDiGiovanni 9/20/2019 10:13'!isEmpty! !Pile removeSelector: #isEmpty!Pile removeSelector: #printOn:!!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:14'!printOn: aStreamaStream nextPutAll: 'une Pile, de taille: '.capacite printOn: aStream.aStream nextPutAll: ' contenant: '.index printOn: aStream.aStream nextPutAll: ' objets : ('.contenu do: [ :each | each printOn: aStream. aStream space ].aStream nextPut: $).aStream nextPut: $.! !!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:14'!isEmpty! !!Pile methodsFor: 'testing' stamp: 'ThomasDiGiovanni 9/20/2019 10:15' prior: 33557296!isEmpty	^(contenu = 0)! !!Pile methodsFor: 'testing' stamp: 'ThomasDiGiovanni 9/20/2019 10:16'!isFull	^ contenu = capacite! !!Pile commentStamp: 'ThomasDiGiovanni 9/20/2019 10:16' prior: 0!Implémentation d'une pile!!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:18'!push: object	contenu := object! !!Pile methodsFor: 'testing' stamp: 'ThomasDiGiovanni 9/20/2019 10:18' prior: 33557494!isFull	^ index = capacite! !!Pile methodsFor: 'testing' stamp: 'ThomasDiGiovanni 9/20/2019 10:18' prior: 33557395!isEmpty	^ index = 0! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 10:19' prior: 33557702!push: object	self isFull	ifTrue: [ ^'Error: pile is full' ] ifFalse: [ contenu := object ]	! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 10:20' prior: 33558051!push: object	self isFull		ifTrue: [ ^ 'Error: pile is full' ]		ifFalse: [ contenu push: object ]! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 10:20' prior: 33558235!push: object	self isFull		ifTrue: [ ^ 'Error: pile is full' ]		ifFalse: [ contenu add: object ]! !!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:21'!pop ! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:21' prior: 33558609!pop	contenu at: index! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 10:27' prior: 33558424!push: object	self isFull		ifTrue: [ ^ 'Error: pile is full' ]		ifFalse: [ contenu add: object.			index := index + 1 ]! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:29' prior: 33558706!pop	contenu at: index.	! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:30' prior: 33559031!pop	self isEmpty ifTrue: [  ] ifFalse: [  ]! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:30' prior: 33559148!pop	self isEmpty		ifTrue: [ ^'Error: pile is empty' ]		ifFalse: [  ]! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:31' prior: 33559284!pop	self isEmpty		ifTrue: [ ^ 'Error: pile is empty' ]		ifFalse: [ contenu removeAtIndex: index ]! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:32' prior: 33559447!pop	self isEmpty		ifTrue: [ ^ 'Error: pile is empty' ]		ifFalse: [ contenu remove: index ]! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:32' prior: 33559639!pop	self isEmpty		ifTrue: [ ^ 'Error: pile is empty' ]		ifFalse: [ contenu remove: index.			index := index - 1 ]! !!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:33'!top ! !!Pile methodsFor: 'accessing' stamp: 'ThomasDiGiovanni 9/20/2019 10:33' prior: 33560027!top^contenu at: index	! !!Pile methodsFor: 'accessing' stamp: 'ThomasDiGiovanni 9/20/2019 10:33' prior: 33560125!top	^ contenu at: index - 1! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:35' prior: 33559824!pop	self isEmpty		ifTrue: [ ^ 'Error: pile is empty' ]		ifFalse: [ index := index - 1 ]! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 10:37' prior: 33560361!pop	self isEmpty		ifTrue: [ self error: 'pile is empty' ]		ifFalse: [ index := index - 1 ]! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 10:37' prior: 33558818!push: object	self isFull		ifTrue: [ self error: 'pile is full' ]		ifFalse: [ contenu add: object.			index := index + 1 ]! !!Pile methodsFor: 'printing' stamp: 'ThomasDiGiovanni 9/20/2019 10:37' prior: 33556923!printOn: aStream	aStream nextPutAll: 'Pile de taille : '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant : '.	index printOn: aStream.	aStream nextPutAll: ' objets : ('.	contenu		do: [ :each | 			each printOn: aStream.			aStream space ].	aStream nextPut: $).	aStream nextPut: $.! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 10:40' prior: 33560726!push: object	self isFull		ifTrue: [ self error: 'pile is full' ]		ifFalse: [ contenu at: index put: object.			index := index + 1 ]! !!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:44'!grow ! !!Pile methodsFor: 'private' stamp: 'ThomasDiGiovanni 9/20/2019 10:44' prior: 33561553!grow	capacite := capacite * 2! !Object subclass: #Pile	instanceVariableNames: 'contenu index capacite'	classVariableNames: 'TailleDefaut'	package: 'Metaprogrammation'!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite'	classVariableNames: 'DefaultSize'	package: 'Metaprogrammation'!Object subclass: #TestPile	instanceVariableNames: ''	classVariableNames: ''	package: 'Metaprogrammation'!TestCase subclass: #TestPile	instanceVariableNames: ''	classVariableNames: ''	package: 'Metaprogrammation'!TestCase subclass: #TestPile	instanceVariableNames: 'empty full'	classVariableNames: ''	package: 'Metaprogrammation'!!TestPile methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 10:54'!setUp	empty := Pile new initialize: 0	! !!TestPile methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 10:54' prior: 33562382!setUp	empty := Pile new initialize: 3.	full := Pile new initialize: 1.! !!TestPile methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 10:55' prior: 33562517!setUp	empty := Pile new initialize: 3.	full := (Pile new initialize: 1) push: 'Test'.! !!TestPile methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 10:56' prior: 33562684!setUpsuper setUp.	empty := Pile new initialize: 3.	full := (Pile new initialize: 1) push: 'Test'! !TestCase subclass: #PileTest	instanceVariableNames: 'empty full'	classVariableNames: ''	package: 'Metaprogrammation'!Smalltalk globals removeClassNamed: #AnObsoletePileTest!(Smalltalk globals at: #TestPile) rename: #PileTest!!PileTest methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 10:57'!testInclude! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 10:58'!testOccurence	! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 10:58'!testRemove	! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 10:59' prior: 33563290!testInclude	self assert: (full includes: 'Test')! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 10:59' prior: 33563378!testOccurence	 self assert: (empty occurrencesOf: 'Test') = 0.     self assert: (full occurrencesOf: 5) = 1.     full add: 5.     self assert: (full occurrencesOf: 5) = 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:00' prior: 33563717!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 5) = 1.	full add: 5.	self assert: (full occurrencesOf: 5) = 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:00' prior: 33563984!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 5) equals: 1.	full add: 5.	self assert: (full occurrencesOf: 5) = 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:00' prior: 33564244!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 5) equals: 1.	full add: 5.	self assert: (full occurrencesOf: 5) equals: 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:01' prior: 33564510!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 5) equals: 1.	full at: 0 put:  'Pile'.	self assert: (full occurrencesOf: 5) equals: 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:01' prior: 33564782!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 'Test') equals: 1.	full at: 0 put: 'Pile'.	self assert: (full occurrencesOf: 'Pile') equals: 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:01' prior: 33565066!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 'Test') equals: 1.	full at: 0 put: 'Pile'.	self assert: (full occurrencesOf: 'Pile') equals: 1.	self assert: (full occurrencesOf: 'Test') equals: 0.! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:02' prior: 33563470!testRemove	    full remove: 5.     self assert: (full includes: 6).     self deny: (full includes: 5)! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:03' prior: 33565359!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 'Test') equals: 1.	full pop.	full push: 'Pile'.	self assert: (full occurrencesOf: 'Pile') equals: 1.	self assert: (full occurrencesOf: 'Test') equals: 0! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:03' prior: 33565707!testRemove	full pop.	self assert: (full includes: 6).	self deny: (full includes: 5)! !!PileTest methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 11:04' prior: 33562866!setUp	super setUp.	empty := Pile new initialize: 3.	full := (Pile new initialize: 2) push: 'Test'.	full push: 'Pile'! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:04' prior: 33565904!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 'Test') equals: 1.	self assert: (full occurrencesOf: 'Pile') equals: 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:05' prior: 33566257!testRemove	full pop.	self assert: (full occurrencesOf: 'Test') equals: 1.	self deny: (full includes: 'Pile')! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:05' prior: 33563575!testInclude	self assert: (full includes: 'Test')	self assert: (full includes: 'Pile')! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:05' prior: 33567123!testInclude	self assert: (full includes: 'Test').	self assert: (full includes: 'Pile')! !!PileTest methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 11:06' prior: 33566438!setUp	super setUp.	empty := Pile new initialize: 2.	full := (Pile new initialize: 2) push: 'Test'.	full push: 'Pile'! !!Pile class methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 11:12'!initializeDefaultSize := 5! !!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 11:14'!new! !!Pile methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 11:15' prior: 33567813!new	self initialize: DefaultSize 	! !!Pile methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 11:16'!example! !!Pile methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:16' prior: 33568039!example	| testPile |testPile := Pile new initialize: 2.testPile isEmpty.testPile push: 'test'.testPile top.testPile pop.testPile push: 'pile'.testPile printOn: Transcript open! !!Pile methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:17' prior: 33568137!example	| testPile |	testPile := self new.	testPile isEmpty.	testPile push: 'test'.	testPile top.	testPile pop.	testPile push: 'pile'.	testPile printOn: Transcript open! !!Pile methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:17' prior: 33568411!example	| testPile |	testPile := self new.	testPile isEmpty.	testPile push: 1.	testPile pop.	testPile push: 2.	testPile printOn: Transcript open! !Pile removeSelector: #example!!Pile class methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 11:18'!example	| testPile |	testPile := self new.	testPile isEmpty.	testPile push: 1.	testPile pop.	testPile push: 2.	testPile printOn: Transcript open! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:18' prior: 33568954!example	| testPile |	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile pop.	testPile push: 2.	testPile printOn: Transcript open! !!Pile methodsFor: 'printing' stamp: 'ThomasDiGiovanni 9/20/2019 11:19' prior: 33560942!printOn: aStream	aStream nextPutAll: 'Pile de taille '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant '.	index printOn: aStream.	aStream nextPutAll: ' objets : ('.	contenu		do: [ :each | 			each printOn: aStream.			aStream space ].	aStream nextPut: $).	aStream nextPut: $.! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:21' prior: 33569202!example	| testPile |	Pile initialize .	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile pop.	testPile push: 2.	testPile printOn: Transcript open! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:21' prior: 33569851!example	| testPile |	self initialize.	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile pop.	testPile push: 2.	testPile printOn: Transcript open! !!Pile methodsFor: 'initialization' stamp: 'ThomasDiGiovanni 9/20/2019 11:22' prior: 33556004!initialize: taille	"La pile est vide quand index = 0, la pile est pleine quand index = capacite"	index := 0.	capacite := taille.	"Le contenu est stocké dans un tableau"	contenu := Array new: capacite! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:25' prior: 33566651!testOccurence	self assert: (empty occurrencesOf: 1) equals: 0.	self assert: (full occurrencesOf: 1) equals: 1.	self assert: (full occurrencesOf: 2) equals: 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:25' prior: 33566919!testRemove	full pop.	self assert: (full occurrencesOf: 1) equals: 1.	self deny: (full includes: 2)! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:25' prior: 33567303!testInclude	self assert: (full includes: 1).	self assert: (full includes: 2)! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 11:27' prior: 33561332!push: object	self isFull		ifTrue: [ self error: 'pile is full' ]		ifFalse: [ contenu at: index + 1 put: object.			index := index + 1 ]! !!Pile methodsFor: 'accessing' stamp: 'ThomasDiGiovanni 9/20/2019 11:27' prior: 33560241!top	^ contenu at: index! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:28' prior: 33571157!testInclude	self assert: (full includes: 'Test').	self assert: (full includes: 'Pile')! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:28' prior: 33570710!testOccurence	self assert: (empty occurrencesOf: 'Test') equals: 0.	self assert: (full occurrencesOf: 'Test') equals: 1.	self assert: (full occurrencesOf: 'Pile') equals: 1! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 11:29' prior: 33570963!testRemove	full pop.	self assert: (full occurrencesOf: 'Test') equals: 1.	self deny: (full includes: 'Pile')! !PileTest removeSelector: #testOccurence!PileTest removeSelector: #testRemove!!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:33' prior: 33570131!example	| testPile |	self initialize.	testPile := Pile new.	self assert: testPile isEmpty.	testPile push: 1.	testPile pop.	testPile push: 2.	testPile printOn: Transcript open! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:34' prior: 33572411!example	| testPile |	self initialize.	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile pop.	testPile push: 2.	testPile printOn: Transcript open! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:34' prior: 33572690!example	| testPile |	self initialize.	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript open! !!PileTest commentStamp: 'ThomasDiGiovanni 9/20/2019 11:40' prior: 0!Test de pile!!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:43' prior: 33572969!example	| testPile |	self initialize.	testPile := self new initialize: 2.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript open! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:44' prior: 33573350!example	| testPile |	self initialize.	testPile := self new initialize: 2.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:45' prior: 33573662!example	| testPile transcript |	self initialize.	testPile := self new initialize: 2.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	transcript := Transcript open.	testPile printOn: transcript! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:45' prior: 33573969!example	| testPile |	self initialize.	testPile := self new initialize: 2.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript open! !Object subclass: #LinkedListe	instanceVariableNames: ''	classVariableNames: ''	package: 'Metaprogrammation'!Pile removeSelector: #new!!Pile class methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 11:56'!new	self initialize: DefaultSize! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:56' prior: 33574319!example	| testPile |	self initialize.	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript open! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 11:57' prior: 33574898!example	| testPile |	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript open! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 11:58' prior: 33574768!new	Pile initialize: DefaultSize! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 12:00' prior: 33575486!new	| newPile |	newPile := Pile new initialize: DefaultSize.	^newPile! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 12:00' prior: 33575626!new	| newPile |	newPile := self new initialize: DefaultSize.	^ newPile! !!TestPile methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!setUpsuper setUp.	empty := Pile new initialize: 3.	full := (Pile new initialize: 1) push: 'Test'! !!Pile class methodsFor: 'class initialization' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!initializeDefaultSize := 5! !!Pile methodsFor: 'printing' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!printOn: aStream	aStream nextPutAll: 'Pile de taille '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant '.	index printOn: aStream.	aStream nextPutAll: ' objets : ('.	contenu		do: [ :each | 			each printOn: aStream.			aStream space ].	aStream nextPut: $).	aStream nextPut: $.! !!Pile methodsFor: 'initialization' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!initialize: taille	"La pile est vide quand index = 0, la pile est pleine quand index = capacite"	index := 0.	capacite := taille.	"Le contenu est stocké dans un tableau"	contenu := Array new: capacite! !!Pile methodsFor: 'adding' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!push: object	self isFull		ifTrue: [ self error: 'pile is full' ]		ifFalse: [ contenu at: index + 1 put: object.			index := index + 1 ]! !!Pile methodsFor: 'accessing' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!top	^ contenu at: index! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!example	| testPile |	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript open! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 12:11'!new	| newPile |	newPile := self new initialize: DefaultSize.	^ newPile! !!Pile commentStamp: 'ThomasDiGiovanni 9/20/2019 10:16' prior: 0!Implémentation d'une pile!!Pile methodsFor: 'testing' stamp: 'ThomasDiGiovanni 9/20/2019 12:13'!isFull	^ index = capacite! !!Pile methodsFor: 'testing' stamp: 'ThomasDiGiovanni 9/20/2019 12:13'!isEmpty	^ index = 0! !!Pile methodsFor: 'removing' stamp: 'ThomasDiGiovanni 9/20/2019 12:13'!pop	self isEmpty		ifTrue: [ self error: 'pile is empty' ]		ifFalse: [ index := index - 1 ]! !!Pile methodsFor: 'private' stamp: 'ThomasDiGiovanni 9/20/2019 12:13'!grow	capacite := capacite * 2! !(Smalltalk globals at: #TestPile) rename: #PileTest!!PileTest methodsFor: 'running' stamp: 'ThomasDiGiovanni 9/20/2019 12:13' prior: 33575957!setUp	super setUp.	empty := Pile new initialize: 2.	full := (Pile new initialize: 2) push: 'Test'.	full push: 'Pile'! !!PileTest methodsFor: 'tests' stamp: 'ThomasDiGiovanni 9/20/2019 12:13'!testInclude	self assert: (full includes: 'Test').	self assert: (full includes: 'Pile')! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 12:13' prior: 33577505!new	| newPile |	newPile := self initialize: DefaultSize.	^ newPile! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 12:14' prior: 33578682!new	| newPile |	self initialize .	newPile := self initialize: DefaultSize.	^ newPile! !----SNAPSHOT----2019-09-20T12:16:08.790285+02:00 Pharo 7.0.image priorSource: 99!----QUIT----2019-09-20T12:16:55.297963+02:00 Pharo 7.0.image priorSource: 24517!----SNAPSHOT----2019-09-20T12:21:11.405559+02:00 Pharo 7.0.image priorSource: 24600!----QUIT----2019-09-20T12:24:51.224847+02:00 Pharo 7.0.image priorSource: 24682!----QUIT/NOSAVE----2019-09-20T12:25:45.95144+02:00 Pharo 7.0.image priorSource: 24768!!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:53' prior: 33578858!new	| newPile |	newPile := super new.	self initialize.	^ newPile! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:55' prior: 33579474!new	| newPile |	newPile := super new.	newPile initialize.	^ newPile! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:56' prior: 33579649!new	^ self initialize! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:58' prior: 33579827!new	^ self initialize: DefaultSize! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:58' prior: 33579956!new	^ Pile initialize: DefaultSize! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:58' prior: 33580098!new	^ self class initialize: DefaultSize! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:58' prior: 33580240!new	^ self instanceSide initialize: DefaultSize! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 14:58' prior: 33580388!new	^ self initialize: DefaultSize! !!Pile class methodsFor: 'instance creation' stamp: 'ThomasDiGiovanni 9/20/2019 15:02' prior: 33580543!new	^ (super new) initialize: DefaultSize! !!Pile class methodsFor: 'example' stamp: 'ThomasDiGiovanni 9/20/2019 15:04' prior: 33577231!example	| testPile |	testPile := self new.	self assert: testPile isEmpty.	testPile push: 1.	testPile push: 2.	testPile pop.	testPile push: 3.	testPile printOn: Transcript! !!LinkedListe methodsFor: 'as yet unclassified' stamp: 'ThomasDiGiovanni 9/20/2019 15:09'!do: index! !!LinkedListe methodsFor: 'enumerating' stamp: 'ThomasDiGiovanni 9/20/2019 15:10' prior: 33581096!do: block	! !!LinkedListe methodsFor: 'enumerating' stamp: 'ThomasDiGiovanni 9/20/2019 15:10' prior: 33581207!do: block	^'TODO'! !Object subclass: #LinkedListe	instanceVariableNames: 'value next'	classVariableNames: ''	package: 'Metaprogrammation'!----QUIT----2019-09-20T15:12:16.475202+02:00 Pharo 7.0.image priorSource: 24768!