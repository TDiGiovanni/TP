THERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in Array
20 September 2019 10:40:15.914275 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Array(Object)>>shouldNotImplement
	Receiver: #(nil nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
#(nil nil)

Array(ArrayedCollection)>>add:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		newObject: 	'test'
	Receiver's instance variables: 
#(nil nil)

Pile>>push:
	Receiver: Pile de taille : 2 contenant : 0 objets : (nil nil ).
	Arguments and temporary variables: 
		object: 	'test'
	Receiver's instance variables: 
		contenu: 	#(nil nil)
		index: 	0
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile push: 'test'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(98748416)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (658@107)
		owner: 	a TransformWithLayoutMorph(734316288)
		submorphs: 	an Array(a RubPrimarySelectionMorph(844766976) a RubCursor(985513216...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1053792768) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(66671872)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(985513216)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(798751232))
		getMenuPolicy: 	a RubEditingArea(98748416)
		mouseDownPoint: 	(197@160)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2235272
		lastStepMessage: 	nil
		lastCycleTime: 	2235303
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2235272
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2235272
		lastStepMessage: 	nil
		lastCycleTime: 	2235303
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2235272
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2235272
		lastStepMessage: 	nil
		lastCycleTime: 	2235303
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2235272
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Array(Object)>>shouldNotImplement
Array(ArrayedCollection)>>add:
Pile>>push:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: pile is full
20 September 2019 10:41:25.109316 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>error:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('test' nil ).
	Arguments and temporary variables: 
		aString: 	'pile is full'
	Receiver's instance variables: 
		contenu: 	#('test' nil)
		index: 	2
		capacite: 	2


Pile>>push:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('test' nil ).
	Arguments and temporary variables: 
		object: 	'pile'
	Receiver's instance variables: 
		contenu: 	#('test' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile push: 'pile'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2304497
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2304499
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2304497
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2304499
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2304447
		lastStepMessage: 	nil
		lastCycleTime: 	2304497
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2304447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		now: 	2304499
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2304447
		lastStepMessage: 	nil
		lastCycleTime: 	2304497
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2304447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2304447
		lastStepMessage: 	nil
		lastCycleTime: 	2304497
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2304447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2304447
		lastStepMessage: 	nil
		lastCycleTime: 	2304497
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2304447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2304447
		lastStepMessage: 	nil
		lastCycleTime: 	2304497
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2304447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile(Object)>>error:
Pile>>push:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: pile is full
20 September 2019 10:41:52.735207 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>error:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aString: 	'pile is full'
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


Pile>>push:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		object: 	'pile'
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile push: 'pile'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2332128
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2332130
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2332128
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2332130
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2332081
		lastStepMessage: 	nil
		lastCycleTime: 	2332130
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2332081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		now: 	2332130
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2332081
		lastStepMessage: 	nil
		lastCycleTime: 	2332130
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2332081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2332081
		lastStepMessage: 	nil
		lastCycleTime: 	2332130
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2332081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2332081
		lastStepMessage: 	nil
		lastCycleTime: 	2332130
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2332081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2332081
		lastStepMessage: 	nil
		lastCycleTime: 	2332130
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2332081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile(Object)>>error:
Pile>>push:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 10:42:27.368244 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(1015593728) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(991.5@54.0) corner: (1438.5@354.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(888375040) a WindowEdgeGripMorph(5405...etc...
		fullBounds: 	nil
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (583696896) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(489771520) a Morph(285920512))
		label: 	a LabelMorph(472727296)'Transcript'
		closeBox: 	a MultistateButtonMorph(512714752)
		collapseBox: 	a MultistateButtonMorph(420043776)
		paneMorphs: 	an Array(a RubPluggableTextMorph(897798912))
		collapsedFrame: 	nil
		fullFrame: 	(991.5@54.0) corner: (1438.5@354.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(13805824)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(107056640)
		expandBox: 	a MultistateButtonMorph(784737792)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(1015593728) named: Transcript
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile printOn: Transcript open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(98748416)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (658@183)
		owner: 	a TransformWithLayoutMorph(734316288)
		submorphs: 	an Array(a RubPrimarySelectionMorph(844766976) a RubCursor(985513216...etc...
		fullBounds: 	(0@0) corner: (658@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1053792768) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(66671872)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(985513216)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(829908736))
		getMenuPolicy: 	a RubEditingArea(98748416)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2366701
		lastStepMessage: 	nil
		lastCycleTime: 	2366734
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(370638848)))
		lastAlarmTime: 	2366701
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2366701
		lastStepMessage: 	nil
		lastCycleTime: 	2366734
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(370638848)))
		lastAlarmTime: 	2366701
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2366701
		lastStepMessage: 	nil
		lastCycleTime: 	2366734
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(370638848)))
		lastAlarmTime: 	2366701
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: pile is full
20 September 2019 10:43:47.33498 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>error:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aString: 	'pile is full'
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


Pile>>push:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		object: 	'pile'
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile push: 'pile'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(98748416)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (658@183)
		owner: 	a TransformWithLayoutMorph(734316288)
		submorphs: 	an Array(a RubPrimarySelectionMorph(844766976) a RubCursor(985513216...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1053792768) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(66671872)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(985513216)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(486420736))
		getMenuPolicy: 	a RubEditingArea(98748416)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2446695
		lastStepMessage: 	nil
		lastCycleTime: 	2446726
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2446695
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2446695
		lastStepMessage: 	nil
		lastCycleTime: 	2446726
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2446695
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2446695
		lastStepMessage: 	nil
		lastCycleTime: 	2446726
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2446695
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile(Object)>>error:
Pile>>push:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 10:49:08.050108 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976.0@478.0) corner: (1633.0@878.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile printOn: transcript
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(98748416)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (658@202)
		owner: 	a TransformWithLayoutMorph(734316288)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1054521856) a RubCursor(98551321...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1053792768) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(66671872)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(985513216)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(167631360))
		getMenuPolicy: 	a RubEditingArea(98748416)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2767373
		lastStepMessage: 	nil
		lastCycleTime: 	2767439
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2767373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2767373
		lastStepMessage: 	nil
		lastCycleTime: 	2767439
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2767373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2767373
		lastStepMessage: 	nil
		lastCycleTime: 	2767439
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2767373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 10:49:37.73385 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile printOn: transcript
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2797122
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2797122
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2797072
		lastStepMessage: 	nil
		lastCycleTime: 	2797122
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2797072
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		now: 	2797122
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2797072
		lastStepMessage: 	nil
		lastCycleTime: 	2797122
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2797072
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2797072
		lastStepMessage: 	nil
		lastCycleTime: 	2797122
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2797072
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2797072
		lastStepMessage: 	nil
		lastCycleTime: 	2797122
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2797072
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2797072
		lastStepMessage: 	nil
		lastCycleTime: 	2797122
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	2797072
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 10:49:40.972408 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Message>>sentTo:
	Receiver: nextPutAll: 'Pile de taille : '
	Arguments and temporary variables: 
		receiver: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		selector: 	#nextPutAll:
		args: 	#('Pile de taille : ')
		lookupClass: 	SystemWindow


SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile printOn: transcript
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2797122
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2797122
		pending: 	a Heap()
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2800311
		lastStepMessage: 	nil
		lastCycleTime: 	2800363
		alarms: 	a Heap()
		lastAlarmTime: 	2800311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		now: 	2797122
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2800311
		lastStepMessage: 	nil
		lastCycleTime: 	2800363
		alarms: 	a Heap()
		lastAlarmTime: 	2800311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2800311
		lastStepMessage: 	nil
		lastCycleTime: 	2800363
		alarms: 	a Heap()
		lastAlarmTime: 	2800311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2800311
		lastStepMessage: 	nil
		lastCycleTime: 	2800363
		alarms: 	a Heap()
		lastAlarmTime: 	2800311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2800311
		lastStepMessage: 	nil
		lastCycleTime: 	2800363
		alarms: 	a Heap()
		lastAlarmTime: 	2800311
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Message>>sentTo:
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 10:49:41.859618 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Message>>sentTo:
	Receiver: nextPutAll: 'Pile de taille : '
	Arguments and temporary variables: 
		receiver: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		selector: 	#nextPutAll:
		args: 	#('Pile de taille : ')
		lookupClass: 	SystemWindow


SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Message>>sentTo:
	Receiver: nextPutAll: 'Pile de taille : '
	Arguments and temporary variables: 
		receiver: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		selector: 	#nextPutAll:
		args: 	#('Pile de taille : ')
		lookupClass: 	SystemWindow


SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile printOn: transcript
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2797122
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2797122
		pending: 	a Heap()
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801202
		lastStepMessage: 	nil
		lastCycleTime: 	2801253
		alarms: 	a Heap()
		lastAlarmTime: 	2801202
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		now: 	2797122
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801202
		lastStepMessage: 	nil
		lastCycleTime: 	2801253
		alarms: 	a Heap()
		lastAlarmTime: 	2801202
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801202
		lastStepMessage: 	nil
		lastCycleTime: 	2801253
		alarms: 	a Heap()
		lastAlarmTime: 	2801202
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801202
		lastStepMessage: 	nil
		lastCycleTime: 	2801253
		alarms: 	a Heap()
		lastAlarmTime: 	2801202
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801202
		lastStepMessage: 	nil
		lastCycleTime: 	2801253
		alarms: 	a Heap()
		lastAlarmTime: 	2801202
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Message>>sentTo:
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Message>>sentTo:
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 10:49:42.614735 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Message>>sentTo:
	Receiver: nextPutAll: 'Pile de taille : '
	Arguments and temporary variables: 
		receiver: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		selector: 	#nextPutAll:
		args: 	#('Pile de taille : ')
		lookupClass: 	SystemWindow


SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Message>>sentTo:
	Receiver: nextPutAll: 'Pile de taille : '
	Arguments and temporary variables: 
		receiver: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		selector: 	#nextPutAll:
		args: 	#('Pile de taille : ')
		lookupClass: 	SystemWindow


SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Message>>sentTo:
	Receiver: nextPutAll: 'Pile de taille : '
	Arguments and temporary variables: 
		receiver: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		selector: 	#nextPutAll:
		args: 	#('Pile de taille : ')
		lookupClass: 	SystemWindow


SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(764753152) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
	Receiver's instance variables: 
		bounds: 	(976.5@478.0) corner: (1633.5@878.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(652388096) a WindowEdgeGripMorph(7103...etc...
		fullBounds: 	(976@478) corner: (1633@878)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (304587264) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(672215552) a Morph(16116992))
		label: 	a LabelMorph(286479104)'Transcript'
		closeBox: 	a MultistateButtonMorph(296689408)
		collapseBox: 	a MultistateButtonMorph(2656256)
		paneMorphs: 	an Array(a RubPluggableTextMorph(781896960))
		collapsedFrame: 	nil
		fullFrame: 	(976.5@478.0) corner: (1633.5@878.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(621624320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(855202816)
		expandBox: 	a MultistateButtonMorph(132805376)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(764753152) named: Transcript
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile printOn: transcript
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2797122
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2797120
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2797122
		pending: 	a Heap()
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801956
		lastStepMessage: 	nil
		lastCycleTime: 	2802005
		alarms: 	a Heap()
		lastAlarmTime: 	2801956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		now: 	2797122
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801956
		lastStepMessage: 	nil
		lastCycleTime: 	2802005
		alarms: 	a Heap()
		lastAlarmTime: 	2801956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801956
		lastStepMessage: 	nil
		lastCycleTime: 	2802005
		alarms: 	a Heap()
		lastAlarmTime: 	2801956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801956
		lastStepMessage: 	nil
		lastCycleTime: 	2802005
		alarms: 	a Heap()
		lastAlarmTime: 	2801956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	2801956
		lastStepMessage: 	nil
		lastCycleTime: 	2802005
		alarms: 	a Heap()
		lastAlarmTime: 	2801956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Message>>sentTo:
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Message>>sentTo:
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Message>>sentTo:
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 10:50:09.957273 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(10552320) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille : '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(991.5@54.0) corner: (1438.5@354.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(186785792) a WindowEdgeGripMorph(7622...etc...
		fullBounds: 	nil
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (512437504) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(54766080) a Morph(258107904))
		label: 	a LabelMorph(103380224)'Transcript'
		closeBox: 	a MultistateButtonMorph(198498048)
		collapseBox: 	a MultistateButtonMorph(41652224)
		paneMorphs: 	an Array(a RubPluggableTextMorph(1044345856))
		collapsedFrame: 	nil
		fullFrame: 	(991.5@54.0) corner: (1438.5@354.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(937753344)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(439304448)
		expandBox: 	a MultistateButtonMorph(341882368)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('pile' nil ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(10552320) named: Transcript
	Receiver's instance variables: 
		contenu: 	#('pile' nil)
		index: 	2
		capacite: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ testPile printOn: Transcript open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(98748416)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (658@183)
		owner: 	a TransformWithLayoutMorph(734316288)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1054521856) a RubCursor(98551321...etc...
		fullBounds: 	(0@0) corner: (658@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1053792768) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(66671872)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(985513216)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(873143296))
		getMenuPolicy: 	a RubEditingArea(98748416)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(891109120))(a Rub...etc...
		lastStepTime: 	2829258
		lastStepMessage: 	nil
		lastCycleTime: 	2829326
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(91211776)))
		lastAlarmTime: 	2829258
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(891109120))(a Rub...etc...
		lastStepTime: 	2829258
		lastStepMessage: 	nil
		lastCycleTime: 	2829326
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(91211776)))
		lastAlarmTime: 	2829258
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(891109120))(a Rub...etc...
		lastStepTime: 	2829258
		lastStepMessage: 	nil
		lastCycleTime: 	2829326
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(91211776)))
		lastAlarmTime: 	2829258
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
20 September 2019 11:05:57.895267 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil)

Array(Object)>>at:put:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
		value: 	'Test'
	Receiver's instance variables: 
#(nil nil)

Pile>>push:
	Receiver: Pile de taille : 2 contenant : 0 objets : (nil nil ).
	Arguments and temporary variables: 
		object: 	'Test'
	Receiver's instance variables: 
		contenu: 	#(nil nil)
		index: 	0
		capacite: 	2


PileTest>>setUp
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:05:57.889668+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:05:57.889668+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))

ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:put:
Pile>>push:
PileTest>>setUp
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyRunTestsFromMethodsCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
IdentitySet(Set)>>do:
ClyRunTestsFromMethodsCommand>>runTestItem:
[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
Array(SequenceableCollection)>>do:
ClyRunTestsFromMethodsCommand>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile did not understand #includes:
20 September 2019 11:06:00.910322 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>doesNotUnderstand: #includes:
	Receiver: Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).
	Arguments and temporary variables: 
		aMessage: 	includes: 'Test'
		exception: 	MessageNotUnderstood: Pile>>includes:
		resumeValue: 	nil
	Receiver's instance variables: 
		contenu: 	#('Pile' nil)
		index: 	2
		capacite: 	2


PileTest>>testInclude
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).


PileTest(TestCase)>>performTest
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in Process>>terminate a Process in [ delay...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in Process>>terminate a Process in [ delay...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in Process>>terminate a Process in [ delay...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in Process>>terminate a Process in [ delay...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in Process>>terminate a Process in [ delay...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in Process>>terminate a Process in [ delay...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in Process>>terminate a Process in [ delay...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 2 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 2 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:05:57.889668+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 2 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 2 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:05:57.889668+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	2 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 2 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	2 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 2 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	Pile de taille : 2 contenant : 2 objets : ('Pile' nil ).


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))

ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunTestsFromMethodsCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunTestsFromMethodsCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(testInclude))
		metaLevelScope: 	ClyInstanceSideScope



--- The full stack ---
Pile(Object)>>doesNotUnderstand: #includes:
PileTest>>testInclude
PileTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyRunTestsFromMethodsCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
IdentitySet(Set)>>do:
ClyRunTestsFromMethodsCommand>>runTestItem:
[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
Array(SequenceableCollection)>>do:
ClyRunTestsFromMethodsCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
20 September 2019 11:06:08.236458 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil)

Array(Object)>>at:put:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
		value: 	'Test'
	Receiver's instance variables: 
#(nil nil)

Pile>>push:
	Receiver: Pile de taille : 2 contenant : 0 objets : (nil nil ).
	Arguments and temporary variables: 
		object: 	'Test'
	Receiver's instance variables: 
		contenu: 	#(nil nil)
		index: 	0
		capacite: 	2


PileTest>>setUp
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:06:08.230726+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:06:08.230726+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 3 contenant : 0 objets : (nil nil nil ).
		full: 	nil


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))

ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:put:
Pile>>push:
PileTest>>setUp
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyRunTestsFromMethodsCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
IdentitySet(Set)>>do:
ClyRunTestsFromMethodsCommand>>runTestItem:
[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
Array(SequenceableCollection)>>do:
ClyRunTestsFromMethodsCommand>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
20 September 2019 11:08:57.007015 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil)

Array(Object)>>at:put:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
		value: 	'Test'
	Receiver's instance variables: 
#(nil nil)

Pile>>push:
	Receiver: Pile de taille : 2 contenant : 0 objets : (nil nil ).
	Arguments and temporary variables: 
		object: 	'Test'
	Receiver's instance variables: 
		contenu: 	#(nil nil)
		index: 	0
		capacite: 	2


PileTest>>setUp
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 2 contenant : 0 objets : (nil nil ).
		full: 	nil


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 2 contenant : 0 objets : (nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 2 contenant : 0 objets : (nil nil ).
		full: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille : 2 contenant : 0 objets : (nil nil ).
		full: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:08:56.999605+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:08:56.999605+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 2 contenant : 0 objets : (nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille : 2 contenant : 0 objets : (nil nil ).
		full: 	nil


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))

ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:put:
Pile>>push:
PileTest>>setUp
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyRunTestsFromMethodsCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
IdentitySet(Set)>>do:
ClyRunTestsFromMethodsCommand>>runTestItem:
[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
Array(SequenceableCollection)>>do:
ClyRunTestsFromMethodsCommand>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: pile is full
20 September 2019 11:18:18.502655 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>error:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aString: 	'pile is full'
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


Pile>>push:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		object: 	1
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		evt: 	[(690@81) mouseUp 4517898 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		anEvent: 	[(690@81) mouseUp 4517898 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(690@81) mouseUp 4517898 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(231256064)
	Receiver's instance variables: 
		timeStamp: 	4517898
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(690@81)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		anEvent: 	[(690@81) mouseUp 4517898 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		anEvent: 	[(690@81) mouseUp 4517898 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(690@81) mouseUp 4517898 nil]
		focusHolder: 	an IconicButton(231256064)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(690@81) corner: (706@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(690@81) corner: (706@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(690@81) mouseUp 4517898 nil]
		targetOffset: 	(6.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4517898 690 81 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(690@81) mouseOver red 4517811 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(690@81) mouseUp 4517898 nil]
		focusHolder: 	an IconicButton(231256064)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(690@81) corner: (706@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(690@81) corner: (706@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(690@81) mouseUp 4517898 nil]
		targetOffset: 	(6.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4517898 690 81 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(690@81) mouseUp 4517898 nil]
		focusHolder: 	an IconicButton(231256064)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(690@81) corner: (706@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(690@81) corner: (706@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(690@81) mouseUp 4517898 nil]
		targetOffset: 	(6.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4517898 690 81 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(690@81) mouseUp 4517898 nil]
	Receiver's instance variables: 
		bounds: 	(690@81) corner: (706@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(690@81) corner: (706@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(690@81) mouseUp 4517898 nil]
		targetOffset: 	(6.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4517898 690 81 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(690@81) mouseUp 4517898 nil]
		evt: 	[(690@81) mouseUp 4517898 nil]
	Receiver's instance variables: 
		bounds: 	(690@81) corner: (706@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(690@81) corner: (706@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(690@81) mouseUp 4517898 nil]
		targetOffset: 	(6.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4517898 690 81 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(690@81) mouseUp 4517898 nil]
		evtBuf: 	#(1 4517898 690 81 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(690@81) corner: (706@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(690@81) corner: (706@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(690@81) mouseUp 4517898 nil]
		targetOffset: 	(6.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4517898 690 81 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(690@81) corner: (706@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(690@81) corner: (706@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(690@81) mouseUp 4517898 nil]
		targetOffset: 	(6.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4517898 690 81 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4517861
		lastStepMessage: 	nil
		lastCycleTime: 	4517898
		alarms: 	a Heap()
		lastAlarmTime: 	4517861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4517861
		lastStepMessage: 	nil
		lastCycleTime: 	4517898
		alarms: 	a Heap()
		lastAlarmTime: 	4517861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4517861
		lastStepMessage: 	nil
		lastCycleTime: 	4517898
		alarms: 	a Heap()
		lastAlarmTime: 	4517861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4517861
		lastStepMessage: 	nil
		lastCycleTime: 	4517898
		alarms: 	a Heap()
		lastAlarmTime: 	4517861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile(Object)>>error:
Pile>>push:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: pile is full
20 September 2019 11:18:25.470906 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>error:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aString: 	'pile is full'
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


Pile>>push:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		object: 	1
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		evt: 	[(695@78) mouseUp 4524866 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		anEvent: 	[(695@78) mouseUp 4524866 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(695@78) mouseUp 4524866 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(231256064)
	Receiver's instance variables: 
		timeStamp: 	4524866
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(695@78)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		anEvent: 	[(695@78) mouseUp 4524866 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(231256064)
	Arguments and temporary variables: 
		anEvent: 	[(695@78) mouseUp 4524866 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(697946880)
		submorphs: 	an Array(an ImageMorph(111807488))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (101603328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(111807488)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(695@78) mouseUp 4524866 nil]
		focusHolder: 	an IconicButton(231256064)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(695@78) corner: (711@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(695@78) corner: (711@94)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(695@78) mouseUp 4524866 nil]
		targetOffset: 	(11.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4524866 695 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(695@78) mouseOver red 4524787 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(695@78) mouseUp 4524866 nil]
		focusHolder: 	an IconicButton(231256064)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(695@78) corner: (711@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(695@78) corner: (711@94)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(695@78) mouseUp 4524866 nil]
		targetOffset: 	(11.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4524866 695 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(695@78) mouseUp 4524866 nil]
		focusHolder: 	an IconicButton(231256064)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(695@78) corner: (711@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(695@78) corner: (711@94)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(695@78) mouseUp 4524866 nil]
		targetOffset: 	(11.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4524866 695 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(695@78) mouseUp 4524866 nil]
	Receiver's instance variables: 
		bounds: 	(695@78) corner: (711@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(695@78) corner: (711@94)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(695@78) mouseUp 4524866 nil]
		targetOffset: 	(11.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4524866 695 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(695@78) mouseUp 4524866 nil]
		evt: 	[(695@78) mouseUp 4524866 nil]
	Receiver's instance variables: 
		bounds: 	(695@78) corner: (711@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(695@78) corner: (711@94)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(695@78) mouseUp 4524866 nil]
		targetOffset: 	(11.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4524866 695 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(695@78) mouseUp 4524866 nil]
		evtBuf: 	#(1 4524866 695 78 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(695@78) corner: (711@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(695@78) corner: (711@94)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(695@78) mouseUp 4524866 nil]
		targetOffset: 	(11.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4524866 695 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(695@78) corner: (711@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(695@78) corner: (711@94)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(695@78) mouseUp 4524866 nil]
		targetOffset: 	(11.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4524866 695 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4524837
		lastStepMessage: 	nil
		lastCycleTime: 	4524866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4524837
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4524837
		lastStepMessage: 	nil
		lastCycleTime: 	4524866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4524837
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4524837
		lastStepMessage: 	nil
		lastCycleTime: 	4524866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4524837
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4524837
		lastStepMessage: 	nil
		lastCycleTime: 	4524866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4524837
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile(Object)>>error:
Pile>>push:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AssertionFailure: Assertion failed
20 September 2019 11:19:02.967165 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>assert:description:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Assertion failed'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class(Object)>>assert:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(656089344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(639620608)
		submorphs: 	an Array(an ImageMorph(460127232))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270578432) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(460127232)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(656089344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(639620608)
		submorphs: 	an Array(an ImageMorph(460127232))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270578432) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(460127232)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(656089344)
	Arguments and temporary variables: 
		evt: 	[(691@84) mouseUp 4562363 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(639620608)
		submorphs: 	an Array(an ImageMorph(460127232))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270578432) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(460127232)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(656089344)
	Arguments and temporary variables: 
		anEvent: 	[(691@84) mouseUp 4562363 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(639620608)
		submorphs: 	an Array(an ImageMorph(460127232))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270578432) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(460127232)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(691@84) mouseUp 4562363 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(656089344)
	Receiver's instance variables: 
		timeStamp: 	4562363
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(691@84)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(656089344)
	Arguments and temporary variables: 
		anEvent: 	[(691@84) mouseUp 4562363 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(639620608)
		submorphs: 	an Array(an ImageMorph(460127232))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270578432) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(460127232)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(656089344)
	Arguments and temporary variables: 
		anEvent: 	[(691@84) mouseUp 4562363 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(639620608)
		submorphs: 	an Array(an ImageMorph(460127232))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270578432) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(460127232)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@84) mouseUp 4562363 nil]
		focusHolder: 	an IconicButton(656089344)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(691@84) corner: (707@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@84) corner: (707@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@84) mouseUp 4562363 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4562363 691 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(691@84) mouseOver red 4562284 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(691@84) mouseUp 4562363 nil]
		focusHolder: 	an IconicButton(656089344)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(691@84) corner: (707@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@84) corner: (707@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@84) mouseUp 4562363 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4562363 691 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@84) mouseUp 4562363 nil]
		focusHolder: 	an IconicButton(656089344)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(691@84) corner: (707@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@84) corner: (707@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@84) mouseUp 4562363 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4562363 691 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@84) mouseUp 4562363 nil]
	Receiver's instance variables: 
		bounds: 	(691@84) corner: (707@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@84) corner: (707@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@84) mouseUp 4562363 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4562363 691 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@84) mouseUp 4562363 nil]
		evt: 	[(691@84) mouseUp 4562363 nil]
	Receiver's instance variables: 
		bounds: 	(691@84) corner: (707@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@84) corner: (707@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@84) mouseUp 4562363 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4562363 691 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(691@84) mouseUp 4562363 nil]
		evtBuf: 	#(1 4562363 691 84 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(691@84) corner: (707@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@84) corner: (707@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@84) mouseUp 4562363 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4562363 691 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(691@84) corner: (707@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@84) corner: (707@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(700498432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@84) mouseUp 4562363 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4562363 691 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4562334
		lastStepMessage: 	nil
		lastCycleTime: 	4562363
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4562334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4562334
		lastStepMessage: 	nil
		lastCycleTime: 	4562363
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4562334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4562334
		lastStepMessage: 	nil
		lastCycleTime: 	4562363
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4562334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4562334
		lastStepMessage: 	nil
		lastCycleTime: 	4562363
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1051097600)))
		lastAlarmTime: 	4562334
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>assert:description:
Pile class(Object)>>assert:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AssertionFailure: Assertion failed
20 September 2019 11:20:39.511708 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>assert:description:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Assertion failed'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class(Object)>>assert:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1013327360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(378761728)
		submorphs: 	an Array(an ImageMorph(229473024))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (947031040) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(229473024)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1013327360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(378761728)
		submorphs: 	an Array(an ImageMorph(229473024))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (947031040) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(229473024)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1013327360)
	Arguments and temporary variables: 
		evt: 	[(693@81) mouseUp 4658883 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(378761728)
		submorphs: 	an Array(an ImageMorph(229473024))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (947031040) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(229473024)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1013327360)
	Arguments and temporary variables: 
		anEvent: 	[(693@81) mouseUp 4658883 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(378761728)
		submorphs: 	an Array(an ImageMorph(229473024))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (947031040) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(229473024)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(693@81) mouseUp 4658883 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(1013327360)
	Receiver's instance variables: 
		timeStamp: 	4658883
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(693@81)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(1013327360)
	Arguments and temporary variables: 
		anEvent: 	[(693@81) mouseUp 4658883 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(378761728)
		submorphs: 	an Array(an ImageMorph(229473024))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (947031040) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(229473024)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(1013327360)
	Arguments and temporary variables: 
		anEvent: 	[(693@81) mouseUp 4658883 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(378761728)
		submorphs: 	an Array(an ImageMorph(229473024))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (947031040) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(229473024)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@81) mouseUp 4658883 nil]
		focusHolder: 	an IconicButton(1013327360)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(693@81) corner: (709@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@81) corner: (709@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@81) mouseUp 4658883 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4658883 693 81 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(693@81) mouseOver red 4658810 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(693@81) mouseUp 4658883 nil]
		focusHolder: 	an IconicButton(1013327360)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(693@81) corner: (709@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@81) corner: (709@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@81) mouseUp 4658883 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4658883 693 81 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@81) mouseUp 4658883 nil]
		focusHolder: 	an IconicButton(1013327360)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(693@81) corner: (709@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@81) corner: (709@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@81) mouseUp 4658883 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4658883 693 81 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@81) mouseUp 4658883 nil]
	Receiver's instance variables: 
		bounds: 	(693@81) corner: (709@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@81) corner: (709@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@81) mouseUp 4658883 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4658883 693 81 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@81) mouseUp 4658883 nil]
		evt: 	[(693@81) mouseUp 4658883 nil]
	Receiver's instance variables: 
		bounds: 	(693@81) corner: (709@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@81) corner: (709@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@81) mouseUp 4658883 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4658883 693 81 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(693@81) mouseUp 4658883 nil]
		evtBuf: 	#(1 4658883 693 81 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(693@81) corner: (709@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@81) corner: (709@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@81) mouseUp 4658883 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4658883 693 81 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(693@81) corner: (709@97)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@81) corner: (709@97)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@81) mouseUp 4658883 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4658883 693 81 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4658862
		lastStepMessage: 	nil
		lastCycleTime: 	4658908
		alarms: 	a Heap()
		lastAlarmTime: 	4658862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4658862
		lastStepMessage: 	nil
		lastCycleTime: 	4658908
		alarms: 	a Heap()
		lastAlarmTime: 	4658862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4658862
		lastStepMessage: 	nil
		lastCycleTime: 	4658908
		alarms: 	a Heap()
		lastAlarmTime: 	4658862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4658862
		lastStepMessage: 	nil
		lastCycleTime: 	4658908
		alarms: 	a Heap()
		lastAlarmTime: 	4658862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>assert:description:
Pile class(Object)>>assert:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AssertionFailure: Assertion failed
20 September 2019 11:21:38.178912 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>assert:description:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Assertion failed'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class(Object)>>assert:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(808062208)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(689961728)
		submorphs: 	an Array(an ImageMorph(140339456))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (748998144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(140339456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(808062208)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(689961728)
		submorphs: 	an Array(an ImageMorph(140339456))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (748998144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(140339456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(808062208)
	Arguments and temporary variables: 
		evt: 	[(696@80) mouseUp 4717523 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(689961728)
		submorphs: 	an Array(an ImageMorph(140339456))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (748998144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(140339456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(808062208)
	Arguments and temporary variables: 
		anEvent: 	[(696@80) mouseUp 4717523 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(689961728)
		submorphs: 	an Array(an ImageMorph(140339456))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (748998144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(140339456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(696@80) mouseUp 4717523 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(808062208)
	Receiver's instance variables: 
		timeStamp: 	4717523
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(696@80)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(808062208)
	Arguments and temporary variables: 
		anEvent: 	[(696@80) mouseUp 4717523 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(689961728)
		submorphs: 	an Array(an ImageMorph(140339456))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (748998144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(140339456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(808062208)
	Arguments and temporary variables: 
		anEvent: 	[(696@80) mouseUp 4717523 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(689961728)
		submorphs: 	an Array(an ImageMorph(140339456))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (748998144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(140339456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@80) mouseUp 4717523 nil]
		focusHolder: 	an IconicButton(808062208)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(696@80) corner: (712@96)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@80) corner: (712@96)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@80) mouseUp 4717523 nil]
		targetOffset: 	(12.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4717523 696 80 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(696@80) mouseOver red 4717458 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(696@80) mouseUp 4717523 nil]
		focusHolder: 	an IconicButton(808062208)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(696@80) corner: (712@96)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@80) corner: (712@96)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@80) mouseUp 4717523 nil]
		targetOffset: 	(12.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4717523 696 80 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@80) mouseUp 4717523 nil]
		focusHolder: 	an IconicButton(808062208)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(696@80) corner: (712@96)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@80) corner: (712@96)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@80) mouseUp 4717523 nil]
		targetOffset: 	(12.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4717523 696 80 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@80) mouseUp 4717523 nil]
	Receiver's instance variables: 
		bounds: 	(696@80) corner: (712@96)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@80) corner: (712@96)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@80) mouseUp 4717523 nil]
		targetOffset: 	(12.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4717523 696 80 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@80) mouseUp 4717523 nil]
		evt: 	[(696@80) mouseUp 4717523 nil]
	Receiver's instance variables: 
		bounds: 	(696@80) corner: (712@96)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@80) corner: (712@96)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@80) mouseUp 4717523 nil]
		targetOffset: 	(12.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4717523 696 80 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(696@80) mouseUp 4717523 nil]
		evtBuf: 	#(1 4717523 696 80 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(696@80) corner: (712@96)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@80) corner: (712@96)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@80) mouseUp 4717523 nil]
		targetOffset: 	(12.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4717523 696 80 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(696@80) corner: (712@96)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@80) corner: (712@96)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@80) mouseUp 4717523 nil]
		targetOffset: 	(12.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4717523 696 80 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4717510
		lastStepMessage: 	nil
		lastCycleTime: 	4717572
		alarms: 	a Heap()
		lastAlarmTime: 	4717510
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4717510
		lastStepMessage: 	nil
		lastCycleTime: 	4717572
		alarms: 	a Heap()
		lastAlarmTime: 	4717510
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4717510
		lastStepMessage: 	nil
		lastCycleTime: 	4717572
		alarms: 	a Heap()
		lastAlarmTime: 	4717510
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	4717510
		lastStepMessage: 	nil
		lastCycleTime: 	4717572
		alarms: 	a Heap()
		lastAlarmTime: 	4717510
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>assert:description:
Pile class(Object)>>assert:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
20 September 2019 11:26:09.95 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil)

Array(Object)>>at:put:
	Receiver: #(nil nil)
	Arguments and temporary variables: 
		index: 	0
		value: 	'Test'
	Receiver's instance variables: 
#(nil nil)

Pile>>push:
	Receiver: Pile de taille 2 contenant 0 objets : (nil nil ).
	Arguments and temporary variables: 
		object: 	'Test'
	Receiver's instance variables: 
		contenu: 	#(nil nil)
		index: 	0
		capacite: 	2


PileTest>>setUp
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	nil


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:26:09.945504+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:26:09.945504+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	nil


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


BlockClosure>>ensure:
	Receiver: [ super runTest: testSelector of: testClass ]
	Arguments and temporary variables: 
		aBlock: 	[ breakpoint remove ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyDebugTestCommand>>runTest:of:
		startpc: 	106
		numArgs: 	0


ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:put:
Pile>>push:
PileTest>>setUp
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
BlockClosure>>ensure:
ClyDebugTestCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
IdentitySet(Set)>>do:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ :each | self runTestItem: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
Array(SequenceableCollection)>>do:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
20 September 2019 11:27:43.442446 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

PileTest>>testInclude
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest(TestCase)>>performTest
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:27:43.438847+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:27:43.438847+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


BlockClosure>>ensure:
	Receiver: [ super runTest: testSelector of: testClass ]
	Arguments and temporary variables: 
		aBlock: 	[ breakpoint remove ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyDebugTestCommand>>runTest:of:
		startpc: 	106
		numArgs: 	0


ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))


--- The full stack ---
PileTest>>testInclude
PileTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
BlockClosure>>ensure:
ClyDebugTestCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
IdentitySet(Set)>>do:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
[ :each | self runTestItem: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
20 September 2019 11:27:58.675734 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

PileTest>>testInclude
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest(TestCase)>>performTest
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:27:58.672023+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:27:58.672023+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


BlockClosure>>ensure:
	Receiver: [ super runTest: testSelector of: testClass ]
	Arguments and temporary variables: 
		aBlock: 	[ breakpoint remove ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyDebugTestCommand>>runTest:of:
		startpc: 	106
		numArgs: 	0


ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))


--- The full stack ---
PileTest>>testInclude
PileTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
BlockClosure>>ensure:
ClyDebugTestCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
IdentitySet(Set)>>do:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
[ :each | self runTestItem: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
20 September 2019 11:29:44.187741 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

PileTest>>testInclude
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest(TestCase)>>performTest
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:29:44.184182+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:29:44.184182+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	0 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


BlockClosure>>ensure:
	Receiver: [ super runTest: testSelector of: testClass ]
	Arguments and temporary variables: 
		aBlock: 	[ breakpoint remove ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyDebugTestCommand>>runTest:of:
		startpc: 	106
		numArgs: 	0


ClyDebugTestCommand>>runTest:of:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		breakpoint: 	a Breakpoint
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
	Receiver: a ClyDebugTestCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))


--- The full stack ---
PileTest>>testInclude
PileTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTest:of:
[ super runTest: testSelector of: testClass ] in ClyDebugTestCommand>>runTest:of:
BlockClosure>>ensure:
ClyDebugTestCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
IdentitySet(Set)>>do:
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>runTestItem:
[ :each | self runTestItem: each ] in ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyDebugTestCommand(ClyRunTestsFromMethodsCommand)>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile did not understand #occurrencesOf:
20 September 2019 11:30:48.78112 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>doesNotUnderstand: #occurrencesOf:
	Receiver: Pile de taille 2 contenant 0 objets : (nil nil ).
	Arguments and temporary variables: 
		aMessage: 	occurrencesOf: 'Test'
		exception: 	MessageNotUnderstood: Pile>>occurrencesOf:
		resumeValue: 	nil
	Receiver's instance variables: 
		contenu: 	#(nil nil)
		index: 	0
		capacite: 	2


PileTest>>testOccurence
	Receiver: PileTest>>#testOccurence
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOccurence
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest(TestCase)>>performTest
	Receiver: PileTest>>#testOccurence
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOccurence
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testOccurence
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOccurence
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testOccurence
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOccurence
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testOccurence
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testOccurence
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testOccurence
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testOccurence
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testOccurence
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testOccurence
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testOccurence
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testOccurence
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOccurence
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:30:48.775493+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testOccurence)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testOccurence
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:30:48.775493+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testOccurence)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testOccurence
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOccurence
		expectedFails: 	#()
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testOccurence
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOccurence
		expectedFails: 	#()
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testOccurence
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testOccurence #testRemove #testInclude) #...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testOccurence
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testOccurence))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testOccurence)
		testSelector: 	#testOccurence
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testOccurence))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testOccurence)
		testSelector: 	#testOccurence
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testOccurence))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testOccurence)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testOccurence))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testOccurence))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testOccurence))

ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testOccurence))
		runTestCases: 	{PileTest}


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunTestsFromMethodsCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunTestsFromMethodsCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(testOccurence))
		metaLevelScope: 	ClyInstanceSideScope



--- The full stack ---
Pile(Object)>>doesNotUnderstand: #occurrencesOf:
PileTest>>testOccurence
PileTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyRunTestsFromMethodsCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
IdentitySet(Set)>>do:
ClyRunTestsFromMethodsCommand>>runTestItem:
[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
Array(SequenceableCollection)>>do:
ClyRunTestsFromMethodsCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile did not understand #includes:
20 September 2019 11:31:21.388791 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile(Object)>>doesNotUnderstand: #includes:
	Receiver: Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).
	Arguments and temporary variables: 
		aMessage: 	includes: 'Test'
		exception: 	MessageNotUnderstood: Pile>>includes:
		resumeValue: 	nil
	Receiver's instance variables: 
		contenu: 	#('Test' 'Pile')
		index: 	2
		capacite: 	2


PileTest>>testInclude
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest(TestCase)>>performTest
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PileTest(TestCase)>>runCase
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PileTest>>#testInclude
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


PileTest(TestCase)>>runCaseManaged
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	nil
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:31:21.38309+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PileTest>>#testInclude
	Receiver's instance variables: 
		timeStamp: 	2019-09-20T11:31:21.38309+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PileTest>>#testInclude)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PileTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PileTest(TestCase)>>debug
	Receiver: PileTest>>#testInclude
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testInclude
		expectedFails: 	#()
		empty: 	Pile de taille 2 contenant 0 objets : (nil nil ).
		full: 	Pile de taille 2 contenant 2 objets : ('Test' 'Pile' ).


PileTest class(TestCase class)>>debug:
	Receiver: PileTest
	Arguments and temporary variables: 
		aSymbol: 	#testInclude
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setUp->PileTest>>#setUp #testInclude->PileTest>...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#PileTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation
		history: 	a Dictionary(#errors->a Set(#testRemove #testInclude) #failures->a Set...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testInclude
		testClass: 	PileTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
		each: 	PileTest
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(PileTest)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTest: testSelector of: each ]
		index: 	2
		each: 	PileTest
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. PileTest. nil. nil. nil}


ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testItem: 	a ClyDataSourceItem(testInclude)
		testSelector: 	#testInclude
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		each: 	a ClyDataSourceItem(testInclude)
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClyDataSourceItem(testInclude))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self runTestItem: each ]
		index: 	1
	Receiver's instance variables: 
an Array(a ClyDataSourceItem(testInclude))

ClyRunTestsFromMethodsCommand>>execute
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testInclude))
		runTestCases: 	{PileTest}


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunTestsFromMethodsCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunTestsFromMethodsCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(testInclude))
		metaLevelScope: 	ClyInstanceSideScope



--- The full stack ---
Pile(Object)>>doesNotUnderstand: #includes:
PileTest>>testInclude
PileTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PileTest(TestCase)>>runCase
BlockClosure>>ensure:
PileTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PileTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PileTest(TestCase)>>debug
BlockClosure>>ensure:
PileTest(TestCase)>>debug
PileTest class(TestCase class)>>debug:
ClyRunTestsFromMethodsCommand>>runTest:of:
[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
IdentitySet(Set)>>do:
ClyRunTestsFromMethodsCommand>>runTestItem:
[ :each | self runTestItem: each ] in ClyRunTestsFromMethodsCommand>>execute
Array(SequenceableCollection)>>do:
ClyRunTestsFromMethodsCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AssertionFailure: Assertion failed
20 September 2019 11:32:06.945786 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>assert:description:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Assertion failed'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class(Object)>>assert:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(775193344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(115804672)
		submorphs: 	an Array(an ImageMorph(19221248))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (929774592) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(19221248)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(775193344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(115804672)
		submorphs: 	an Array(an ImageMorph(19221248))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (929774592) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(19221248)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(775193344)
	Arguments and temporary variables: 
		evt: 	[(689@84) mouseUp 5346339 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(115804672)
		submorphs: 	an Array(an ImageMorph(19221248))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (929774592) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(19221248)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(775193344)
	Arguments and temporary variables: 
		anEvent: 	[(689@84) mouseUp 5346339 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(115804672)
		submorphs: 	an Array(an ImageMorph(19221248))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (929774592) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(19221248)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(689@84) mouseUp 5346339 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(775193344)
	Receiver's instance variables: 
		timeStamp: 	5346339
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(689@84)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(775193344)
	Arguments and temporary variables: 
		anEvent: 	[(689@84) mouseUp 5346339 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(115804672)
		submorphs: 	an Array(an ImageMorph(19221248))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (929774592) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(19221248)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(775193344)
	Arguments and temporary variables: 
		anEvent: 	[(689@84) mouseUp 5346339 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(115804672)
		submorphs: 	an Array(an ImageMorph(19221248))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (929774592) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(19221248)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(689@84) mouseUp 5346339 nil]
		focusHolder: 	an IconicButton(775193344)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(689@84) corner: (705@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(689@84) corner: (705@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(689@84) mouseUp 5346339 nil]
		targetOffset: 	(5.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5346339 689 84 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(689@84) mouseOver red 5346258 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(689@84) mouseUp 5346339 nil]
		focusHolder: 	an IconicButton(775193344)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(689@84) corner: (705@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(689@84) corner: (705@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(689@84) mouseUp 5346339 nil]
		targetOffset: 	(5.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5346339 689 84 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(689@84) mouseUp 5346339 nil]
		focusHolder: 	an IconicButton(775193344)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(689@84) corner: (705@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(689@84) corner: (705@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(689@84) mouseUp 5346339 nil]
		targetOffset: 	(5.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5346339 689 84 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(689@84) mouseUp 5346339 nil]
	Receiver's instance variables: 
		bounds: 	(689@84) corner: (705@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(689@84) corner: (705@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(689@84) mouseUp 5346339 nil]
		targetOffset: 	(5.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5346339 689 84 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(689@84) mouseUp 5346339 nil]
		evt: 	[(689@84) mouseUp 5346339 nil]
	Receiver's instance variables: 
		bounds: 	(689@84) corner: (705@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(689@84) corner: (705@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(689@84) mouseUp 5346339 nil]
		targetOffset: 	(5.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5346339 689 84 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(689@84) mouseUp 5346339 nil]
		evtBuf: 	#(1 5346339 689 84 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(689@84) corner: (705@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(689@84) corner: (705@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(689@84) mouseUp 5346339 nil]
		targetOffset: 	(5.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5346339 689 84 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(689@84) corner: (705@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(689@84) corner: (705@100)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(642440704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(689@84) mouseUp 5346339 nil]
		targetOffset: 	(5.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5346339 689 84 0 0 0 1)
		lastKeyScanCode: 	127
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5346310
		lastStepMessage: 	nil
		lastCycleTime: 	5346339
		alarms: 	a Heap()
		lastAlarmTime: 	5346310
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5346310
		lastStepMessage: 	nil
		lastCycleTime: 	5346339
		alarms: 	a Heap()
		lastAlarmTime: 	5346310
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5346310
		lastStepMessage: 	nil
		lastCycleTime: 	5346339
		alarms: 	a Heap()
		lastAlarmTime: 	5346310
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5346310
		lastStepMessage: 	nil
		lastCycleTime: 	5346339
		alarms: 	a Heap()
		lastAlarmTime: 	5346310
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>assert:description:
Pile class(Object)>>assert:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
AssertionFailure: Assertion failed
20 September 2019 11:33:49.638852 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>assert:description:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Assertion failed'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class(Object)>>assert:
	Receiver: Pile
	Arguments and temporary variables: 
		aBlock: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(654155776)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(354935808)
		submorphs: 	an Array(an ImageMorph(874264576))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (682415872) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(874264576)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(654155776)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(354935808)
		submorphs: 	an Array(an ImageMorph(874264576))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (682415872) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(874264576)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(654155776)
	Arguments and temporary variables: 
		evt: 	[(688@85) mouseUp 5449035 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(354935808)
		submorphs: 	an Array(an ImageMorph(874264576))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (682415872) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(874264576)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(654155776)
	Arguments and temporary variables: 
		anEvent: 	[(688@85) mouseUp 5449035 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(354935808)
		submorphs: 	an Array(an ImageMorph(874264576))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (682415872) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(874264576)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(688@85) mouseUp 5449035 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(654155776)
	Receiver's instance variables: 
		timeStamp: 	5449035
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(688@85)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(654155776)
	Arguments and temporary variables: 
		anEvent: 	[(688@85) mouseUp 5449035 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(354935808)
		submorphs: 	an Array(an ImageMorph(874264576))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (682415872) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(874264576)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(654155776)
	Arguments and temporary variables: 
		anEvent: 	[(688@85) mouseUp 5449035 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(354935808)
		submorphs: 	an Array(an ImageMorph(874264576))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (682415872) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(874264576)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(688@85) mouseUp 5449035 nil]
		focusHolder: 	an IconicButton(654155776)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(688@85) corner: (704@101)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(688@85) corner: (704@101)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(273850624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(688@85) mouseUp 5449035 nil]
		targetOffset: 	(4.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5449035 688 85 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(688@85) mouseOver red 5448962 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(688@85) mouseUp 5449035 nil]
		focusHolder: 	an IconicButton(654155776)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(688@85) corner: (704@101)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(688@85) corner: (704@101)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(273850624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(688@85) mouseUp 5449035 nil]
		targetOffset: 	(4.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5449035 688 85 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(688@85) mouseUp 5449035 nil]
		focusHolder: 	an IconicButton(654155776)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(688@85) corner: (704@101)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(688@85) corner: (704@101)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(273850624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(688@85) mouseUp 5449035 nil]
		targetOffset: 	(4.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5449035 688 85 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(688@85) mouseUp 5449035 nil]
	Receiver's instance variables: 
		bounds: 	(688@85) corner: (704@101)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(688@85) corner: (704@101)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(273850624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(688@85) mouseUp 5449035 nil]
		targetOffset: 	(4.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5449035 688 85 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(688@85) mouseUp 5449035 nil]
		evt: 	[(688@85) mouseUp 5449035 nil]
	Receiver's instance variables: 
		bounds: 	(688@85) corner: (704@101)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(688@85) corner: (704@101)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(273850624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(688@85) mouseUp 5449035 nil]
		targetOffset: 	(4.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5449035 688 85 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(688@85) mouseUp 5449035 nil]
		evtBuf: 	#(1 5449035 688 85 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(688@85) corner: (704@101)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(688@85) corner: (704@101)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(273850624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(688@85) mouseUp 5449035 nil]
		targetOffset: 	(4.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5449035 688 85 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(688@85) corner: (704@101)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(688@85) corner: (704@101)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(273850624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(688@85) mouseUp 5449035 nil]
		targetOffset: 	(4.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5449035 688 85 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5449014
		lastStepMessage: 	nil
		lastCycleTime: 	5449035
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(728483072)))
		lastAlarmTime: 	5449014
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5449014
		lastStepMessage: 	nil
		lastCycleTime: 	5449035
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(728483072)))
		lastAlarmTime: 	5449014
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5449014
		lastStepMessage: 	nil
		lastCycleTime: 	5449035
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(728483072)))
		lastAlarmTime: 	5449014
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	5449014
		lastStepMessage: 	nil
		lastCycleTime: 	5449035
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(728483072)))
		lastAlarmTime: 	5449014
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>assert:description:
Pile class(Object)>>assert:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 11:43:38.004972 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(103319552) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(34.0@63.0) corner: (481.0@363.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(252525568) a WindowEdgeGripMorph(7703...etc...
		fullBounds: 	nil
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (993560832) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(1018605056) a Morph(1030620672))
		label: 	a LabelMorph(39336192)'Transcript'
		closeBox: 	a MultistateButtonMorph(773501696)
		collapseBox: 	a MultistateButtonMorph(451548160)
		paneMorphs: 	an Array(a RubPluggableTextMorph(1037799424))
		collapsedFrame: 	nil
		fullFrame: 	(34.0@63.0) corner: (481.0@363.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(433536768)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(41786624)
		expandBox: 	a MultistateButtonMorph(81443328)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille 2 contenant 2 objets : (1 3 ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(103319552) named: Transcript
	Receiver's instance variables: 
		contenu: 	#(1 3)
		index: 	2
		capacite: 	2


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
		testPile: 	Pile de taille 2 contenant 2 objets : (1 3 ).
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(851056128)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(386312448)
		submorphs: 	an Array(an ImageMorph(520138240))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (632017152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(520138240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(851056128)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(386312448)
		submorphs: 	an Array(an ImageMorph(520138240))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (632017152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(520138240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(851056128)
	Arguments and temporary variables: 
		evt: 	[(696@84) mouseUp 6037329 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(386312448)
		submorphs: 	an Array(an ImageMorph(520138240))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (632017152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(520138240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(851056128)
	Arguments and temporary variables: 
		anEvent: 	[(696@84) mouseUp 6037329 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(386312448)
		submorphs: 	an Array(an ImageMorph(520138240))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (632017152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(520138240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(696@84) mouseUp 6037329 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(851056128)
	Receiver's instance variables: 
		timeStamp: 	6037329
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(696@84)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(851056128)
	Arguments and temporary variables: 
		anEvent: 	[(696@84) mouseUp 6037329 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(386312448)
		submorphs: 	an Array(an ImageMorph(520138240))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (632017152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(520138240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(851056128)
	Arguments and temporary variables: 
		anEvent: 	[(696@84) mouseUp 6037329 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(386312448)
		submorphs: 	an Array(an ImageMorph(520138240))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (632017152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(520138240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@84) mouseUp 6037329 nil]
		focusHolder: 	an IconicButton(851056128)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(696@84) corner: (712@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(859495168)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@84) mouseUp 6037329 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6037329 696 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(696@84) mouseOver red 6037265 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(696@84) mouseUp 6037329 nil]
		focusHolder: 	an IconicButton(851056128)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(696@84) corner: (712@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(859495168)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@84) mouseUp 6037329 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6037329 696 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@84) mouseUp 6037329 nil]
		focusHolder: 	an IconicButton(851056128)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(696@84) corner: (712@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(859495168)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@84) mouseUp 6037329 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6037329 696 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@84) mouseUp 6037329 nil]
	Receiver's instance variables: 
		bounds: 	(696@84) corner: (712@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(859495168)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@84) mouseUp 6037329 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6037329 696 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@84) mouseUp 6037329 nil]
		evt: 	[(696@84) mouseUp 6037329 nil]
	Receiver's instance variables: 
		bounds: 	(696@84) corner: (712@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(859495168)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@84) mouseUp 6037329 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6037329 696 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(696@84) mouseUp 6037329 nil]
		evtBuf: 	#(1 6037329 696 84 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(696@84) corner: (712@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(859495168)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@84) mouseUp 6037329 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6037329 696 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(696@84) corner: (712@100)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(859495168)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@84) mouseUp 6037329 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6037329 696 84 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6037317
		lastStepMessage: 	nil
		lastCycleTime: 	6037379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(487336960)))
		lastAlarmTime: 	6037317
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6037317
		lastStepMessage: 	nil
		lastCycleTime: 	6037379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(487336960)))
		lastAlarmTime: 	6037317
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6037317
		lastStepMessage: 	nil
		lastCycleTime: 	6037379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(487336960)))
		lastAlarmTime: 	6037317
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6037317
		lastStepMessage: 	nil
		lastCycleTime: 	6037379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(487336960)))
		lastAlarmTime: 	6037317
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #nextPutAll:
20 September 2019 11:45:05.777831 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
	Receiver: a SystemWindow(759414272) named: Transcript
	Arguments and temporary variables: 
		aMessage: 	nextPutAll: 'Pile de taille '
		exception: 	MessageNotUnderstood: SystemWindow>>nextPutAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(34.0@63.0) corner: (481.0@363.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(981693952) a WindowEdgeGripMorph(2141...etc...
		fullBounds: 	nil
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (715727616) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	Transcript
		labelString: 	'Transcript'
		stripes: 	an Array(a Morph(105194496) a Morph(626196480))
		label: 	a LabelMorph(741428992)'Transcript'
		closeBox: 	a MultistateButtonMorph(424545536)
		collapseBox: 	a MultistateButtonMorph(323209728)
		paneMorphs: 	an Array(a RubPluggableTextMorph(127355392))
		collapsedFrame: 	nil
		fullFrame: 	(34.0@63.0) corner: (481.0@363.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(495424768)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(811316992)
		expandBox: 	a MultistateButtonMorph(358068224)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Pile>>printOn:
	Receiver: Pile de taille 2 contenant 2 objets : (1 3 ).
	Arguments and temporary variables: 
		aStream: 	a SystemWindow(759414272) named: Transcript
	Receiver's instance variables: 
		contenu: 	#(1 3)
		index: 	2
		capacite: 	2


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
		testPile: 	Pile de taille 2 contenant 2 objets : (1 3 ).
		transcript: 	a SystemWindow(759414272) named: Transcript
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(887888384)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(768720640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(629969920)
		submorphs: 	an Array(an ImageMorph(200941824))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (312006144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(200941824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(768720640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(629969920)
		submorphs: 	an Array(an ImageMorph(200941824))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (312006144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(200941824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(768720640)
	Arguments and temporary variables: 
		evt: 	[(686@78) mouseUp 6125154 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(629969920)
		submorphs: 	an Array(an ImageMorph(200941824))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (312006144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(200941824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(768720640)
	Arguments and temporary variables: 
		anEvent: 	[(686@78) mouseUp 6125154 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(629969920)
		submorphs: 	an Array(an ImageMorph(200941824))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (312006144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(200941824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(686@78) mouseUp 6125154 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(768720640)
	Receiver's instance variables: 
		timeStamp: 	6125154
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(686@78)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(768720640)
	Arguments and temporary variables: 
		anEvent: 	[(686@78) mouseUp 6125154 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(629969920)
		submorphs: 	an Array(an ImageMorph(200941824))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (312006144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(200941824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(768720640)
	Arguments and temporary variables: 
		anEvent: 	[(686@78) mouseUp 6125154 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@74.0) corner: (700.0@87.0)
		owner: 	a ClyMainItemCellMorph(629969920)
		submorphs: 	an Array(an ImageMorph(200941824))
		fullBounds: 	(684.0@74.0) corner: (700.0@87.0)
		color: 	Color transparent
		extension: 	a MorphExtension (312006144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(200941824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(686@78) mouseUp 6125154 nil]
		focusHolder: 	an IconicButton(768720640)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(686@78) corner: (702@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(807280128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@78) mouseUp 6125154 nil]
		targetOffset: 	(2.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6125154 686 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(686@78) mouseOver red 6125065 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(686@78) mouseUp 6125154 nil]
		focusHolder: 	an IconicButton(768720640)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(686@78) corner: (702@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(807280128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@78) mouseUp 6125154 nil]
		targetOffset: 	(2.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6125154 686 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(686@78) mouseUp 6125154 nil]
		focusHolder: 	an IconicButton(768720640)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(686@78) corner: (702@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(807280128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@78) mouseUp 6125154 nil]
		targetOffset: 	(2.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6125154 686 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(686@78) mouseUp 6125154 nil]
	Receiver's instance variables: 
		bounds: 	(686@78) corner: (702@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(807280128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@78) mouseUp 6125154 nil]
		targetOffset: 	(2.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6125154 686 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(686@78) mouseUp 6125154 nil]
		evt: 	[(686@78) mouseUp 6125154 nil]
	Receiver's instance variables: 
		bounds: 	(686@78) corner: (702@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(807280128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@78) mouseUp 6125154 nil]
		targetOffset: 	(2.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6125154 686 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(686@78) mouseUp 6125154 nil]
		evtBuf: 	#(1 6125154 686 78 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(686@78) corner: (702@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(807280128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@78) mouseUp 6125154 nil]
		targetOffset: 	(2.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6125154 686 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(686@78) corner: (702@94)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(807280128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@78) mouseUp 6125154 nil]
		targetOffset: 	(2.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6125154 686 78 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6125119
		lastStepMessage: 	nil
		lastCycleTime: 	6125154
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(156229888)))
		lastAlarmTime: 	6125119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6125119
		lastStepMessage: 	nil
		lastCycleTime: 	6125154
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(156229888)))
		lastAlarmTime: 	6125119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6125119
		lastStepMessage: 	nil
		lastCycleTime: 	6125154
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(156229888)))
		lastAlarmTime: 	6125119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6125119
		lastStepMessage: 	nil
		lastCycleTime: 	6125154
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(156229888)))
		lastAlarmTime: 	6125119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #nextPutAll:
Pile>>printOn:
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#do: was sent to nil
20 September 2019 11:46:54.131828 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #do:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	do: [ :each | 
each printOn: aStream.
aStream space ]
		exception: 	MessageNotUnderstood: receiver of "do:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Pile>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


[ :s | self printOn: s ] in Pile(Object)>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		s: 	a LimitedWriteStream
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		stream: 	a LimitedWriteStream
		blockWithArg: 	[ :s | self printOn: s ]
		sizeLimit: 	50000
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 311)
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings-Base'


Pile(Object)>>printStringLimitedTo:using:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		printBlock: 	[ :s | self printOn: s ]
		limitedString: 	nil
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


Pile(Object)>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


Pile(Object)>>printString
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contenu: 	nil
		index: 	nil
		capacite: 	nil


GLMPrintPopper>>openFromRubric:withResult:
	Receiver: a GLMPrintPopper(625415680)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubScrolledTextMorph(227655168) a MultistateButtonMorph(4...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (124447488) [other:  (announcer -> an Announcer)]
		textMorph: 	a RubScrolledTextMorph(227655168)
		inspectButton: 	a MultistateButtonMorph(459096320)


[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPopper new
	openFromRubric: textMorph textArea
	withResult: result ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


[ :result | aBlock value: result ] in RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(98748416)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(642236928)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6233462
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	6233515
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6233462
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	6233515
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6233462
		lastStepMessage: 	nil
		lastCycleTime: 	6233515
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	6233462
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		now: 	6233515
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6233462
		lastStepMessage: 	nil
		lastCycleTime: 	6233515
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	6233462
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6233462
		lastStepMessage: 	nil
		lastCycleTime: 	6233515
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	6233462
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6233462
		lastStepMessage: 	nil
		lastCycleTime: 	6233515
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	6233462
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6233462
		lastStepMessage: 	nil
		lastCycleTime: 	6233515
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(985513216)))
		lastAlarmTime: 	6233462
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #do:
Pile>>printOn:
[ :s | self printOn: s ] in Pile(Object)>>printStringLimitedTo:
String class(SequenceableCollection class)>>streamContents:limitedTo:
Pile(Object)>>printStringLimitedTo:using:
Pile(Object)>>printStringLimitedTo:
Pile(Object)>>printString
GLMPrintPopper>>openFromRubric:withResult:
[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPopper new
	openFromRubric: textMorph textArea
	withResult: result ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
[ :result | aBlock value: result ] in RubSmalltalkEditor>>highlightEvaluateAndDo:
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #initialize:
20 September 2019 11:56:35.50142 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>doesNotUnderstand: #initialize:
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	initialize: 5
		exception: 	MessageNotUnderstood: Pile class>>initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>new
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
		testPile: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(74438144)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(865581824)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(500846592)
		submorphs: 	an Array(an ImageMorph(561630464))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (60178176) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(561630464)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(865581824)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(500846592)
		submorphs: 	an Array(an ImageMorph(561630464))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (60178176) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(561630464)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(865581824)
	Arguments and temporary variables: 
		evt: 	[(693@82) mouseUp 6814896 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(500846592)
		submorphs: 	an Array(an ImageMorph(561630464))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (60178176) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(561630464)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(865581824)
	Arguments and temporary variables: 
		anEvent: 	[(693@82) mouseUp 6814896 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(500846592)
		submorphs: 	an Array(an ImageMorph(561630464))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (60178176) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(561630464)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(693@82) mouseUp 6814896 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(865581824)
	Receiver's instance variables: 
		timeStamp: 	6814896
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(693@82)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(865581824)
	Arguments and temporary variables: 
		anEvent: 	[(693@82) mouseUp 6814896 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(500846592)
		submorphs: 	an Array(an ImageMorph(561630464))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (60178176) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(561630464)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(865581824)
	Arguments and temporary variables: 
		anEvent: 	[(693@82) mouseUp 6814896 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(500846592)
		submorphs: 	an Array(an ImageMorph(561630464))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (60178176) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(561630464)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@82) mouseUp 6814896 nil]
		focusHolder: 	an IconicButton(865581824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(693@82.0) corner: (709@98.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@82.0) corner: (709@98.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(509198080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@82) mouseUp 6814896 nil]
		targetOffset: 	(9.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6814896 693 82 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(693@82) mouseOver red 6814816 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(693@82) mouseUp 6814896 nil]
		focusHolder: 	an IconicButton(865581824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(693@82.0) corner: (709@98.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@82.0) corner: (709@98.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(509198080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@82) mouseUp 6814896 nil]
		targetOffset: 	(9.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6814896 693 82 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@82) mouseUp 6814896 nil]
		focusHolder: 	an IconicButton(865581824)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(693@82.0) corner: (709@98.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@82.0) corner: (709@98.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(509198080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@82) mouseUp 6814896 nil]
		targetOffset: 	(9.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6814896 693 82 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@82) mouseUp 6814896 nil]
	Receiver's instance variables: 
		bounds: 	(693@82.0) corner: (709@98.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@82.0) corner: (709@98.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(509198080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@82) mouseUp 6814896 nil]
		targetOffset: 	(9.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6814896 693 82 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(693@82) mouseUp 6814896 nil]
		evt: 	[(693@82) mouseUp 6814896 nil]
	Receiver's instance variables: 
		bounds: 	(693@82.0) corner: (709@98.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@82.0) corner: (709@98.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(509198080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@82) mouseUp 6814896 nil]
		targetOffset: 	(9.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6814896 693 82 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(693@82) mouseUp 6814896 nil]
		evtBuf: 	#(1 6814896 693 82 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(693@82.0) corner: (709@98.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@82.0) corner: (709@98.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(509198080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@82) mouseUp 6814896 nil]
		targetOffset: 	(9.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6814896 693 82 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(693@82.0) corner: (709@98.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(693@82.0) corner: (709@98.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(509198080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(693@82) mouseUp 6814896 nil]
		targetOffset: 	(9.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6814896 693 82 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6814867
		lastStepMessage: 	nil
		lastCycleTime: 	6814896
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(757432576)))
		lastAlarmTime: 	6814867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6814867
		lastStepMessage: 	nil
		lastCycleTime: 	6814896
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(757432576)))
		lastAlarmTime: 	6814867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6814867
		lastStepMessage: 	nil
		lastCycleTime: 	6814896
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(757432576)))
		lastAlarmTime: 	6814867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6814867
		lastStepMessage: 	nil
		lastCycleTime: 	6814896
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(757432576)))
		lastAlarmTime: 	6814867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #initialize:
Pile class>>new
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #initialize:
20 September 2019 11:57:01.446966 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>doesNotUnderstand: #initialize:
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	initialize: 5
		exception: 	MessageNotUnderstood: Pile class>>initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>new
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
		testPile: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(74438144)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(323067136)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(9905920)
		submorphs: 	an Array(an ImageMorph(537922560))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1032856320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(537922560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(323067136)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(9905920)
		submorphs: 	an Array(an ImageMorph(537922560))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1032856320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(537922560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(323067136)
	Arguments and temporary variables: 
		evt: 	[(696@88) mouseUp 6840792 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(9905920)
		submorphs: 	an Array(an ImageMorph(537922560))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1032856320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(537922560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(323067136)
	Arguments and temporary variables: 
		anEvent: 	[(696@88) mouseUp 6840792 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(9905920)
		submorphs: 	an Array(an ImageMorph(537922560))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1032856320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(537922560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(696@88) mouseUp 6840792 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(323067136)
	Receiver's instance variables: 
		timeStamp: 	6840792
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(696@88)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(323067136)
	Arguments and temporary variables: 
		anEvent: 	[(696@88) mouseUp 6840792 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(9905920)
		submorphs: 	an Array(an ImageMorph(537922560))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1032856320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(537922560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(323067136)
	Arguments and temporary variables: 
		anEvent: 	[(696@88) mouseUp 6840792 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(9905920)
		submorphs: 	an Array(an ImageMorph(537922560))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1032856320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(537922560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@88) mouseUp 6840792 nil]
		focusHolder: 	an IconicButton(323067136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(696@88.0) corner: (712@104.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@88.0) corner: (712@104.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(988574464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@88) mouseUp 6840792 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6840792 696 88 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(696@88) mouseOver red 6840720 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(696@88) mouseUp 6840792 nil]
		focusHolder: 	an IconicButton(323067136)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(696@88.0) corner: (712@104.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@88.0) corner: (712@104.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(988574464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@88) mouseUp 6840792 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6840792 696 88 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@88) mouseUp 6840792 nil]
		focusHolder: 	an IconicButton(323067136)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(696@88.0) corner: (712@104.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@88.0) corner: (712@104.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(988574464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@88) mouseUp 6840792 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6840792 696 88 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@88) mouseUp 6840792 nil]
	Receiver's instance variables: 
		bounds: 	(696@88.0) corner: (712@104.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@88.0) corner: (712@104.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(988574464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@88) mouseUp 6840792 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6840792 696 88 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(696@88) mouseUp 6840792 nil]
		evt: 	[(696@88) mouseUp 6840792 nil]
	Receiver's instance variables: 
		bounds: 	(696@88.0) corner: (712@104.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@88.0) corner: (712@104.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(988574464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@88) mouseUp 6840792 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6840792 696 88 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(696@88) mouseUp 6840792 nil]
		evtBuf: 	#(1 6840792 696 88 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(696@88.0) corner: (712@104.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@88.0) corner: (712@104.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(988574464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@88) mouseUp 6840792 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6840792 696 88 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(696@88.0) corner: (712@104.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(696@88.0) corner: (712@104.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(988574464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(696@88) mouseUp 6840792 nil]
		targetOffset: 	(12.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6840792 696 88 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6840771
		lastStepMessage: 	nil
		lastCycleTime: 	6840842
		alarms: 	a Heap()
		lastAlarmTime: 	6840771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6840771
		lastStepMessage: 	nil
		lastCycleTime: 	6840842
		alarms: 	a Heap()
		lastAlarmTime: 	6840771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6840771
		lastStepMessage: 	nil
		lastCycleTime: 	6840842
		alarms: 	a Heap()
		lastAlarmTime: 	6840771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6840771
		lastStepMessage: 	nil
		lastCycleTime: 	6840842
		alarms: 	a Heap()
		lastAlarmTime: 	6840771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #initialize:
Pile class>>new
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #initialize:
20 September 2019 11:57:20.004105 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>doesNotUnderstand: #initialize:
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	initialize: 5
		exception: 	MessageNotUnderstood: Pile class>>initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>new
	Receiver: Pile
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
		testPile: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(74438144)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(354666496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(992329984)
		submorphs: 	an Array(an ImageMorph(586878208))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270991104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(586878208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(354666496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(992329984)
		submorphs: 	an Array(an ImageMorph(586878208))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270991104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(586878208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(354666496)
	Arguments and temporary variables: 
		evt: 	[(691@87) mouseUp 6859399 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(992329984)
		submorphs: 	an Array(an ImageMorph(586878208))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270991104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(586878208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(354666496)
	Arguments and temporary variables: 
		anEvent: 	[(691@87) mouseUp 6859399 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(992329984)
		submorphs: 	an Array(an ImageMorph(586878208))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270991104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(586878208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(691@87) mouseUp 6859399 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(354666496)
	Receiver's instance variables: 
		timeStamp: 	6859399
		source: 	a HandMorph(1029099008)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(691@87)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(354666496)
	Arguments and temporary variables: 
		anEvent: 	[(691@87) mouseUp 6859399 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(992329984)
		submorphs: 	an Array(an ImageMorph(586878208))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270991104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(586878208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(354666496)
	Arguments and temporary variables: 
		anEvent: 	[(691@87) mouseUp 6859399 nil]
	Receiver's instance variables: 
		bounds: 	(684.0@76.0) corner: (700.0@89.0)
		owner: 	a ClyMainItemCellMorph(992329984)
		submorphs: 	an Array(an ImageMorph(586878208))
		fullBounds: 	(684.0@76.0) corner: (700.0@89.0)
		color: 	Color transparent
		extension: 	a MorphExtension (270991104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(586878208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@87) mouseUp 6859399 nil]
		focusHolder: 	an IconicButton(354666496)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(691@87.0) corner: (707@103.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@87.0) corner: (707@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360641280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@87) mouseUp 6859399 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6859399 691 87 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(929802752) [world]
		priorHand: 	a HandMorph(1029099008)
		priorEvent: 	[(691@87) mouseOver red 6859312 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(691@87) mouseUp 6859399 nil]
		focusHolder: 	an IconicButton(354666496)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		bounds: 	(691@87.0) corner: (707@103.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@87.0) corner: (707@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360641280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@87) mouseUp 6859399 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6859399 691 87 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@87) mouseUp 6859399 nil]
		focusHolder: 	an IconicButton(354666496)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(691@87.0) corner: (707@103.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@87.0) corner: (707@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360641280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@87) mouseUp 6859399 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6859399 691 87 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@87) mouseUp 6859399 nil]
	Receiver's instance variables: 
		bounds: 	(691@87.0) corner: (707@103.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@87.0) corner: (707@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360641280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@87) mouseUp 6859399 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6859399 691 87 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEvent: 	[(691@87) mouseUp 6859399 nil]
		evt: 	[(691@87) mouseUp 6859399 nil]
	Receiver's instance variables: 
		bounds: 	(691@87.0) corner: (707@103.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@87.0) corner: (707@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360641280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@87) mouseUp 6859399 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6859399 691 87 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(691@87) mouseUp 6859399 nil]
		evtBuf: 	#(1 6859399 691 87 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(691@87.0) corner: (707@103.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@87.0) corner: (707@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360641280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@87) mouseUp 6859399 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6859399 691 87 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(1029099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(691@87.0) corner: (707@103.0)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	(691@87.0) corner: (707@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (102876416)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(360641280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@87) mouseUp 6859399 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6859399 691 87 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
		h: 	a HandMorph(1029099008)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6859364
		lastStepMessage: 	nil
		lastCycleTime: 	6859399
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(809216000)))
		lastAlarmTime: 	6859364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1029099008))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1029099008))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6859364
		lastStepMessage: 	nil
		lastCycleTime: 	6859399
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(809216000)))
		lastAlarmTime: 	6859364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6859364
		lastStepMessage: 	nil
		lastCycleTime: 	6859399
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(809216000)))
		lastAlarmTime: 	6859364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1029099008))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	a FormCanvas on: DisplayScreen(1680x1001x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(425459712) named: Pl...etc...
		lastStepTime: 	6859364
		lastStepMessage: 	nil
		lastCycleTime: 	6859399
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(809216000)))
		lastAlarmTime: 	6859364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1029099008)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(574914304) a Syst...etc...
		fullBounds: 	(0@0) corner: (1680@1001)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (772606976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>doesNotUnderstand: #initialize:
Pile class>>new
Pile class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Pile class did not understand #initialize:
20 September 2019 12:21:56.849576 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Pile class(Object)>>doesNotUnderstand: #initialize:
	Receiver: Pile
	Arguments and temporary variables: 
		aMessage: 	initialize: 5
		exception: 	MessageNotUnderstood: Pile class>>initialize:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>new
	Receiver: Pile
	Arguments and temporary variables: 
		newPile: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


Pile class>>example
	Receiver: Pile
	Arguments and temporary variables: 
		testPile: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#DefaultSize->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Metaprogrammation


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		aClass: 	Pile
	Receiver's instance variables: 
		implementorMethod: 	Pile class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	Pile
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		aCommand: 	a ClyRunClassScriptCommand
		aCommandActivator: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(517948672)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(713099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(675.0@73.0) corner: (691.0@86.0)
		owner: 	a ClyMainItemCellMorph(178095872)
		submorphs: 	an Array(an ImageMorph(113282560))
		fullBounds: 	(675.0@73.0) corner: (691.0@86.0)
		color: 	Color transparent
		extension: 	a MorphExtension (199765504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(113282560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(713099008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(675.0@73.0) corner: (691.0@86.0)
		owner: 	a ClyMainItemCellMorph(178095872)
		submorphs: 	an Array(an ImageMorph(113282560))
		fullBounds: 	(675.0@73.0) corner: (691.0@86.0)
		color: 	Color transparent
		extension: 	a MorphExtension (199765504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(113282560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(713099008)
	Arguments and temporary variables: 
		evt: 	[(677@84) mouseUp 83189 nil]
	Receiver's instance variables: 
		bounds: 	(675.0@73.0) corner: (691.0@86.0)
		owner: 	a ClyMainItemCellMorph(178095872)
		submorphs: 	an Array(an ImageMorph(113282560))
		fullBounds: 	(675.0@73.0) corner: (691.0@86.0)
		color: 	Color transparent
		extension: 	a MorphExtension (199765504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(113282560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(713099008)
	Arguments and temporary variables: 
		anEvent: 	[(677@84) mouseUp 83189 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(675.0@73.0) corner: (691.0@86.0)
		owner: 	a ClyMainItemCellMorph(178095872)
		submorphs: 	an Array(an ImageMorph(113282560))
		fullBounds: 	(675.0@73.0) corner: (691.0@86.0)
		color: 	Color transparent
		extension: 	a MorphExtension (199765504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(113282560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(677@84) mouseUp 83189 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(713099008)
	Receiver's instance variables: 
		timeStamp: 	83189
		source: 	a HandMorph(129251328)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(677@84)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(713099008)
	Arguments and temporary variables: 
		anEvent: 	[(677@84) mouseUp 83189 nil]
	Receiver's instance variables: 
		bounds: 	(675.0@73.0) corner: (691.0@86.0)
		owner: 	a ClyMainItemCellMorph(178095872)
		submorphs: 	an Array(an ImageMorph(113282560))
		fullBounds: 	(675.0@73.0) corner: (691.0@86.0)
		color: 	Color transparent
		extension: 	a MorphExtension (199765504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(113282560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(713099008)
	Arguments and temporary variables: 
		anEvent: 	[(677@84) mouseUp 83189 nil]
	Receiver's instance variables: 
		bounds: 	(675.0@73.0) corner: (691.0@86.0)
		owner: 	a ClyMainItemCellMorph(178095872)
		submorphs: 	an Array(an ImageMorph(113282560))
		fullBounds: 	(675.0@73.0) corner: (691.0@86.0)
		color: 	Color transparent
		extension: 	a MorphExtension (199765504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(113282560)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


THERE_BE_DRAGONS_HERE

20 September 2019 12:25:30.500332 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b64 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.169.sha.a2a2b23d681754955d27b7c5a47ed1e9f87ef7b8 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(945302016)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (828@107)
		owner: 	a TransformWithLayoutMorph(607761664)
		submorphs: 	an Array(a RubPrimarySelectionMorph(715033600) a RubCursor(253640960...etc...
		fullBounds: 	(0@0) corner: (828@107)
		color: 	Color transparent
		extension: 	a MorphExtension (192606976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(145659648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(253640960)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(1015838208))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(945302016)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (828@107)
		owner: 	a TransformWithLayoutMorph(607761664)
		submorphs: 	an Array(a RubPrimarySelectionMorph(715033600) a RubCursor(253640960...etc...
		fullBounds: 	(0@0) corner: (828@107)
		color: 	Color transparent
		extension: 	a MorphExtension (192606976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(145659648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(253640960)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(1015838208))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(945302016)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (828@107)
		owner: 	a TransformWithLayoutMorph(607761664)
		submorphs: 	an Array(a RubPrimarySelectionMorph(715033600) a RubCursor(253640960...etc...
		fullBounds: 	(0@0) corner: (828@107)
		color: 	Color transparent
		extension: 	a MorphExtension (192606976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(145659648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(253640960)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(1015838208))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(945302016)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (828@107)
		owner: 	a TransformWithLayoutMorph(607761664)
		submorphs: 	an Array(a RubPrimarySelectionMorph(715033600) a RubCursor(253640960...etc...
		fullBounds: 	(0@0) corner: (828@107)
		color: 	Color transparent
		extension: 	a MorphExtension (192606976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(145659648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(253640960)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(1015838208))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(129251328)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(945302016)
	Receiver's instance variables: 
		bounds: 	(1533@111) corner: (1549@127)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (397401600)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1533@111) mouseOver 257597 nil]
		targetOffset: 	(19.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 257597 1533 111 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(129251328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1533@111) corner: (1549@127)
		owner: 	a WorldMorph(929802752) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (397401600)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1533@111) mouseOver 257597 nil]
		targetOffset: 	(19.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 257597 1533 111 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1680@1001)
		hand: 	a HandMorph(129251328)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(352435712) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (522888448) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(129251328))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(129251328))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(129251328))
		viewBox: 	(0@0) corner: (1680@1001)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(479239168) named: Pl...etc...
		lastStepTime: 	257605
		lastStepMessage: 	nil
		lastCycleTime: 	257597
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253640960)))
		lastAlarmTime: 	257605
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(129251328)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1680@1001)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(352435712) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (522888448) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(929802752) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1680@1001)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(1060483328) a TaskbarMorph(352435712) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (522888448) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(929802752) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(92...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T12:25:30.347936+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T12:25:30.347936+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T12:25:30.347936+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T12:25:30.347936+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T12:25:30.347936+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T12:25:30.347936+02:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

