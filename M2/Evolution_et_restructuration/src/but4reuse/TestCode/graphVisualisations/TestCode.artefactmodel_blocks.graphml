<?xml version="1.0" ?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd">
    <key id="Label" for="node" attr.name="Label" attr.type="string"></key>
    <key id="NumberOfBlockElements" for="node" attr.name="NumberOfBlockElements" attr.type="int"></key>
    <key id="Explanations" for="edge" attr.name="Explanations" attr.type="string"></key>
    <key id="Label" for="edge" attr.name="Label" attr.type="string"></key>
    <key id="NumberOfReasons" for="edge" attr.name="NumberOfReasons" attr.type="int"></key>
    <graph id="G" edgedefault="directed">
        <node id="0">
            <data key="Label">Block 00</data>
            <data key="NumberOfBlockElements">237</data>
        </node>
        <node id="1">
            <data key="Label">Block 01</data>
            <data key="NumberOfBlockElements">8</data>
        </node>
        <node id="10">
            <data key="Label">Block 10</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <node id="11">
            <data key="Label">Block 11</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <node id="2">
            <data key="Label">Block 02</data>
            <data key="NumberOfBlockElements">10</data>
        </node>
        <node id="3">
            <data key="Label">Block 03</data>
            <data key="NumberOfBlockElements">48</data>
        </node>
        <node id="4">
            <data key="Label">Block 04</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <node id="5">
            <data key="Label">Block 05</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <node id="6">
            <data key="Label">Block 06</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <node id="7">
            <data key="Label">Block 07</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <node id="8">
            <data key="Label">Block 08</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <node id="9">
            <data key="Label">Block 09</data>
            <data key="NumberOfBlockElements">1</data>
        </node>
        <edge id="1-0" source="1" target="0" label="1-0">
            <data key="Explanations">Block 01 requires Block 00 (4 reasons) [		MethodDecl: cuT({FormalParametersInternal})-&gt;	ClassDeclaration: Actions, 		MethodDecl: copY({FormalParametersInternal})-&gt;	ClassDeclaration: Actions, 		MethodDecl: pastE({FormalParametersInternal})-&gt;	ClassDeclaration: Actions, 		FieldDecl: cutButton-&gt;	ClassDeclaration: Notepad]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">4</data>
        </edge>
        <edge id="10-0" source="10" target="0" label="10-0">
            <data key="Explanations">Block 10 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad  (){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();        		ediT.add(cuT  = new JMenuItem("Cut",  new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		ediT.add(copY = new JMenuItem("Copy", new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		ediT.add(pastE= new JMenuItem("Paste",new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cuT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.CTRL_MASK));  		copY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));  		pastE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, ActionEvent.CTRL_MASK));    		toolBar.add(cutButton   = new JButton(new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		toolBar.add(copyButton  = new JButton(new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		toolBar.add(pasteButton = new JButton(new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cutButton.setToolTipText("Cut");  		copyButton.setToolTipText("Copy");  		pasteButton.setToolTipText("Paste");    		cuT.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copY.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pastE.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    		cutButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copyButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pasteButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    	}-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="10-11" source="10" target="11" label="10-11">
            <data key="Explanations">Block 10 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="10-4" source="10" target="4" label="10-4">
            <data key="Explanations">Block 04 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="10-5" source="10" target="5" label="10-5">
            <data key="Explanations">Block 05 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="10-6" source="10" target="6" label="10-6">
            <data key="Explanations">Block 06 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="10-7" source="10" target="7" label="10-7">
            <data key="Explanations">Block 07 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="10-8" source="10" target="8" label="10-8">
            <data key="Explanations">Block 08 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="10-9" source="10" target="9" label="10-9">
            <data key="Explanations">Block 09 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-0" source="11" target="0" label="11-0">
            <data key="Explanations">Block 11 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad  (){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();                ediT.add(finD = new JMenuItem("Find", new ImageIcon(this.getClass().getResource("images/find.gif"))));          ediT.add(findNexT = new JMenuItem("Find Next"));          //ediT.insertSeparator(8);            /**           *allowing the finD      menu item to be selected by pressing ALT + F           *allowing the findNexT  menu item to be selected by pressing ALT + F3           */          finD.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, ActionEvent.CTRL_MASK));          findNexT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, ActionEvent.CTRL_MASK));          toolBar.add(findButton  = new JButton(new ImageIcon(this.getClass().getResource("images/find.gif"))));          findButton.setToolTipText("Find");            finD.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });          findNexT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.findNexT();              }          });            findButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });      }-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-10" source="11" target="10" label="11-10">
            <data key="Explanations">Block 10 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-4" source="11" target="4" label="11-4">
            <data key="Explanations">Block 04 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-5" source="11" target="5" label="11-5">
            <data key="Explanations">Block 05 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-6" source="11" target="6" label="11-6">
            <data key="Explanations">Block 06 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-7" source="11" target="7" label="11-7">
            <data key="Explanations">Block 07 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-8" source="11" target="8" label="11-8">
            <data key="Explanations">Block 08 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="11-9" source="11" target="9" label="11-9">
            <data key="Explanations">Block 09 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="2-0" source="2" target="0" label="2-0">
            <data key="Explanations">Block 02 requires Block 00 (5 reasons) [		FieldDecl: findword-&gt;	ClassDeclaration: Actions, 		MethodDecl: finD({FormalParametersInternal})-&gt;	ClassDeclaration: Actions, 		MethodDecl: findNexT({FormalParametersInternal})-&gt;	ClassDeclaration: Actions, 		FieldDecl: findButton-&gt;	ClassDeclaration: Notepad, 		FieldDecl: finD-&gt;	ClassDeclaration: Notepad]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">5</data>
        </edge>
        <edge id="3-0" source="3" target="0" label="3-0">
            <data key="Explanations">Block 03 requires Block 00 (4 reasons) [		FieldDecl: undo-&gt;	ClassDeclaration: Notepad, 		FieldDecl: undoAction-&gt;	ClassDeclaration: Notepad, 		FieldDecl: redoAction-&gt;	ClassDeclaration: Notepad, 		FieldDecl: undoButton-&gt;	ClassDeclaration: Notepad]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">4</data>
        </edge>
        <edge id="4-0" source="4" target="0" label="4-0">
            <data key="Explanations">Block 04 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad  (){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();        		ediT.add(cuT  = new JMenuItem("Cut",  new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		ediT.add(copY = new JMenuItem("Copy", new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		ediT.add(pastE= new JMenuItem("Paste",new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cuT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.CTRL_MASK));  		copY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));  		pastE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, ActionEvent.CTRL_MASK));    		toolBar.add(cutButton   = new JButton(new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		toolBar.add(copyButton  = new JButton(new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		toolBar.add(pasteButton = new JButton(new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cutButton.setToolTipText("Cut");  		copyButton.setToolTipText("Copy");  		pasteButton.setToolTipText("Paste");    		cuT.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copY.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pastE.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    		cutButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copyButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pasteButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    	          ediT.add(finD = new JMenuItem("Find", new ImageIcon(this.getClass().getResource("images/find.gif"))));          ediT.add(findNexT = new JMenuItem("Find Next"));          //ediT.insertSeparator(8);            /**           *allowing the finD      menu item to be selected by pressing ALT + F           *allowing the findNexT  menu item to be selected by pressing ALT + F3           */          finD.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, ActionEvent.CTRL_MASK));          findNexT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, ActionEvent.CTRL_MASK));          toolBar.add(findButton  = new JButton(new ImageIcon(this.getClass().getResource("images/find.gif"))));          findButton.setToolTipText("Find");            finD.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });          findNexT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.findNexT();              }          });            findButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });      }-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="4-10" source="4" target="10" label="4-10">
            <data key="Explanations">Block 04 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="4-11" source="4" target="11" label="4-11">
            <data key="Explanations">Block 04 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="4-5" source="4" target="5" label="4-5">
            <data key="Explanations">Block 04 mutually excludes Block 05 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="4-6" source="4" target="6" label="4-6">
            <data key="Explanations">Block 04 mutually excludes Block 06 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="4-7" source="4" target="7" label="4-7">
            <data key="Explanations">Block 04 mutually excludes Block 07 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="4-8" source="4" target="8" label="4-8">
            <data key="Explanations">Block 04 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="4-9" source="4" target="9" label="4-9">
            <data key="Explanations">Block 04 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-0" source="5" target="0" label="5-0">
            <data key="Explanations">Block 05 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad  (){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();        	    ediT.add(undoAction);  	    ediT.add(redoAction);    	    toolBar.addSeparator();  	    toolBar.add(undoAction);  	    toolBar.add(redoAction);  	    toolBar.addSeparator();    	    textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){  			    public void undoableEditHappened(UndoableEditEvent e){  			    //Remember the edit and update the menus  			    undo.addEdit(e.getEdit());  			    undoAction.update();  			    redoAction.update();  			    }  			    });      }-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-10" source="5" target="10" label="5-10">
            <data key="Explanations">Block 05 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-11" source="5" target="11" label="5-11">
            <data key="Explanations">Block 05 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-4" source="5" target="4" label="5-4">
            <data key="Explanations">Block 04 mutually excludes Block 05 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-6" source="5" target="6" label="5-6">
            <data key="Explanations">Block 05 mutually excludes Block 06 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-7" source="5" target="7" label="5-7">
            <data key="Explanations">Block 05 mutually excludes Block 07 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-8" source="5" target="8" label="5-8">
            <data key="Explanations">Block 05 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="5-9" source="5" target="9" label="5-9">
            <data key="Explanations">Block 05 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-0" source="6" target="0" label="6-0">
            <data key="Explanations">Block 06 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad  (){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();        		ediT.add(cuT  = new JMenuItem("Cut",  new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		ediT.add(copY = new JMenuItem("Copy", new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		ediT.add(pastE= new JMenuItem("Paste",new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cuT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.CTRL_MASK));  		copY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));  		pastE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, ActionEvent.CTRL_MASK));    		toolBar.add(cutButton   = new JButton(new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		toolBar.add(copyButton  = new JButton(new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		toolBar.add(pasteButton = new JButton(new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cutButton.setToolTipText("Cut");  		copyButton.setToolTipText("Copy");  		pasteButton.setToolTipText("Paste");    		cuT.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copY.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pastE.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    		cutButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copyButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pasteButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    	  	    ediT.add(undoAction);  	    ediT.add(redoAction);    	    toolBar.addSeparator();  	    toolBar.add(undoAction);  	    toolBar.add(redoAction);  	    toolBar.addSeparator();    	    textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){  			    public void undoableEditHappened(UndoableEditEvent e){  			    //Remember the edit and update the menus  			    undo.addEdit(e.getEdit());  			    undoAction.update();  			    redoAction.update();  			    }  			    });      }-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-10" source="6" target="10" label="6-10">
            <data key="Explanations">Block 06 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-11" source="6" target="11" label="6-11">
            <data key="Explanations">Block 06 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-4" source="6" target="4" label="6-4">
            <data key="Explanations">Block 04 mutually excludes Block 06 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-5" source="6" target="5" label="6-5">
            <data key="Explanations">Block 05 mutually excludes Block 06 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-7" source="6" target="7" label="6-7">
            <data key="Explanations">Block 06 mutually excludes Block 07 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-8" source="6" target="8" label="6-8">
            <data key="Explanations">Block 06 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="6-9" source="6" target="9" label="6-9">
            <data key="Explanations">Block 06 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-0" source="7" target="0" label="7-0">
            <data key="Explanations">Block 07 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad  (){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();                ediT.add(finD = new JMenuItem("Find", new ImageIcon(this.getClass().getResource("images/find.gif"))));          ediT.add(findNexT = new JMenuItem("Find Next"));          //ediT.insertSeparator(8);            /**           *allowing the finD      menu item to be selected by pressing ALT + F           *allowing the findNexT  menu item to be selected by pressing ALT + F3           */          finD.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, ActionEvent.CTRL_MASK));          findNexT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, ActionEvent.CTRL_MASK));          toolBar.add(findButton  = new JButton(new ImageIcon(this.getClass().getResource("images/find.gif"))));          findButton.setToolTipText("Find");            finD.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });          findNexT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.findNexT();              }          });            findButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });        	    ediT.add(undoAction);  	    ediT.add(redoAction);    	    toolBar.addSeparator();  	    toolBar.add(undoAction);  	    toolBar.add(redoAction);  	    toolBar.addSeparator();    	    textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){  			    public void undoableEditHappened(UndoableEditEvent e){  			    //Remember the edit and update the menus  			    undo.addEdit(e.getEdit());  			    undoAction.update();  			    redoAction.update();  			    }  			    });      }-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-10" source="7" target="10" label="7-10">
            <data key="Explanations">Block 07 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-11" source="7" target="11" label="7-11">
            <data key="Explanations">Block 07 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-4" source="7" target="4" label="7-4">
            <data key="Explanations">Block 04 mutually excludes Block 07 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-5" source="7" target="5" label="7-5">
            <data key="Explanations">Block 05 mutually excludes Block 07 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-6" source="7" target="6" label="7-6">
            <data key="Explanations">Block 06 mutually excludes Block 07 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-8" source="7" target="8" label="7-8">
            <data key="Explanations">Block 07 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="7-9" source="7" target="9" label="7-9">
            <data key="Explanations">Block 07 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-0" source="8" target="0" label="8-0">
            <data key="Explanations">Block 08 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad  (){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();        		ediT.add(cuT  = new JMenuItem("Cut",  new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		ediT.add(copY = new JMenuItem("Copy", new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		ediT.add(pastE= new JMenuItem("Paste",new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cuT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ActionEvent.CTRL_MASK));  		copY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));  		pastE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, ActionEvent.CTRL_MASK));    		toolBar.add(cutButton   = new JButton(new ImageIcon(this.getClass().getResource("images/cut.gif"))));  		toolBar.add(copyButton  = new JButton(new ImageIcon(this.getClass().getResource("images/copy.gif"))));  		toolBar.add(pasteButton = new JButton(new ImageIcon(this.getClass().getResource("images/paste.gif"))));    		cutButton.setToolTipText("Cut");  		copyButton.setToolTipText("Copy");  		pasteButton.setToolTipText("Paste");    		cuT.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copY.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pastE.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    		cutButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.cuT();  			}  		});  		copyButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.copY();  			}  		});  		pasteButton.addActionListener(new ActionListener(){  			public void actionPerformed(ActionEvent ae){  				actions.pastE();  			}  		});    	          ediT.add(finD = new JMenuItem("Find", new ImageIcon(this.getClass().getResource("images/find.gif"))));          ediT.add(findNexT = new JMenuItem("Find Next"));          //ediT.insertSeparator(8);            /**           *allowing the finD      menu item to be selected by pressing ALT + F           *allowing the findNexT  menu item to be selected by pressing ALT + F3           */          finD.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, ActionEvent.CTRL_MASK));          findNexT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, ActionEvent.CTRL_MASK));          toolBar.add(findButton  = new JButton(new ImageIcon(this.getClass().getResource("images/find.gif"))));          findButton.setToolTipText("Find");            finD.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });          findNexT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.findNexT();              }          });            findButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.finD();              }          });        	    ediT.add(undoAction);  	    ediT.add(redoAction);    	    toolBar.addSeparator();  	    toolBar.add(undoAction);  	    toolBar.add(redoAction);  	    toolBar.addSeparator();    	    textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){  			    public void undoableEditHappened(UndoableEditEvent e){  			    //Remember the edit and update the menus  			    undo.addEdit(e.getEdit());  			    undoAction.update();  			    redoAction.update();  			    }  			    });      }-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-10" source="8" target="10" label="8-10">
            <data key="Explanations">Block 08 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-11" source="8" target="11" label="8-11">
            <data key="Explanations">Block 08 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-4" source="8" target="4" label="8-4">
            <data key="Explanations">Block 04 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-5" source="8" target="5" label="8-5">
            <data key="Explanations">Block 05 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-6" source="8" target="6" label="8-6">
            <data key="Explanations">Block 06 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-7" source="8" target="7" label="8-7">
            <data key="Explanations">Block 07 mutually excludes Block 08 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="8-9" source="8" target="9" label="8-9">
            <data key="Explanations">Block 08 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-0" source="9" target="0" label="9-0">
            <data key="Explanations">Block 09 requires Block 00 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal}) Body: public Notepad(){          //set the title for Notepad and set the size for it.          setTitle("Untitled - JAVAï¿½ Notepad");          setSize(800,600);            //get the graphical user interface components display area          Container cp = getContentPane();          /**           *adding the text area,           *adding the tool bar &amp;           *adding the scroll pane to the container           */          cp.add(textArea = new JTextArea());          cp.add("North", toolBar = new JToolBar("Tool Bar"));          cp.add(new JScrollPane(textArea));            //for setting the menu bar          setJMenuBar(Menubar= new JMenuBar());          //adding file, edit, view, format, help to the menu bar          Menubar.add(filE   = new JMenu("File"));          Menubar.add(ediT   = new JMenu("Edit"));          Menubar.add(vieW   = new JMenu("View"));          Menubar.add(formaT = new JMenu("Format"));          Menubar.add(helP   = new JMenu("Help"));            /**           *adding neW, opeN, savE, saveAS, prinT &amp; exiT to the filE Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          filE.add(neW    = new JMenuItem("New", new ImageIcon(this.getClass().getResource("images/new.gif"))));          filE.add(opeN   = new JMenuItem("Open", new ImageIcon(this.getClass().getResource("images/open.gif"))));          filE.add(savE   = new JMenuItem("Save", new ImageIcon(this.getClass().getResource("images/save.gif"))));          filE.add(saveAS = new JMenuItem("Save As", new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          filE.add(prinT  = new JMenuItem("Print", new ImageIcon(this.getClass().getResource("images/print.gif"))));          filE.add(exiT   = new JMenuItem("Exit")); //, new ImageIcon(this.getClass().getResource("images/exit.gif"))));  -- exit.gif missing          filE.insertSeparator(4);          filE.insertSeparator(6);            /**           *adding undO, redO, cuT, copY, pastE, finD, findNexT &amp; selectALL to the ediT Menu,           *adding a small image icon to the menu item &amp;           *adding separator between the menu item           */          ediT.add(selectALL= new JMenuItem("Select All"));          //ediT.insertSeparator(2);          //ediT.insertSeparator(6);            /**           *adding lineWraP &amp; fonT to the formaT Menu,           *adding abouT to the helP Menu &amp;           *adding a small image icon to the menu item           */          formaT.add(lineWraP = new JCheckBoxMenuItem("Line Wrap"));          formaT.add(fonT = new JMenuItem("Font", new ImageIcon(this.getClass().getResource("images/font.gif"))));          helP.add(abouT = new JMenuItem("About Notepad", new ImageIcon(this.getClass().getResource("images/about.gif"))));            /**           *allowing the file   menu to be selected by pressing ALT + F           *allowing the edit   menu to be selected by pressing ALT + E           *allowing the view   menu to be selected by pressing ALT + V           *allowing the format menu to be selected by pressing ALT + O           *allowing the help   menu to be selected by pressing ALT + H           */          filE.setMnemonic('f');          ediT.setMnemonic('e');          vieW.setMnemonic('v');          formaT.setMnemonic('o');          helP.setMnemonic('h');            /**           *allowing the neW       menu item to be selected by pressing ALT + N           *allowing the opeN      menu item to be selected by pressing ALT + O           *allowing the savE      menu item to be selected by pressing ALT + S           *allowing the prinT     menu item to be selected by pressing ALT + P           *allowing the exiT      menu item to be selected by pressing ALT + F4           *allowing the cuT       menu item to be selected by pressing ALT + X           *allowing the copY      menu item to be selected by pressing ALT + C           *allowing the pastE     menu item to be selected by pressing ALT + V           *allowing the selectAll menu item to be selected by pressing ALT + A           */          neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));          opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));          savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));          prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));          exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.CTRL_MASK));          selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK));            /**           *adding newButton, openButton, saveButton, saveAsButton, printButton, undoButton,           *redoButton, cutButton, copyButton, pasteButton, fontButton &amp; aboutButton to the tool bar,           *adding a small image icon to the menu item &amp;           *adding separator between the button           */          toolBar.add(newButton   = new JButton(new ImageIcon(this.getClass().getResource("images/new.gif"))));          toolBar.add(openButton  = new JButton(new ImageIcon(this.getClass().getResource("images/open.gif"))));          toolBar.add(saveButton  = new JButton(new ImageIcon(this.getClass().getResource("images/save.gif"))));          toolBar.add(saveAsButton= new JButton(new ImageIcon(this.getClass().getResource("images/saveAs.gif"))));          toolBar.add(printButton = new JButton(new ImageIcon(this.getClass().getResource("images/print.gif"))));          toolBar.addSeparator();          toolBar.add(fontButton  = new JButton(new ImageIcon(this.getClass().getResource("images/font.gif"))));          toolBar.add(aboutButton = new JButton(new ImageIcon(this.getClass().getResource("images/about.gif"))));            //adding a tool tip text to the button for descriping the image icon.          newButton.setToolTipText("New");          openButton.setToolTipText("Open");          saveButton.setToolTipText("Save");          saveAsButton.setToolTipText("Save As");          printButton.setToolTipText("Print");          fontButton.setToolTipText("Font");          aboutButton.setToolTipText("About Notepad");            /**           *setting the default close operation to false &amp;           *using own action (exiT action @Actions.java)           */          setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);          addWindowListener(new WindowAdapter(){              public void windowClosing(WindowEvent e){                  actions.exiT();              }          });          /**           *adding action listener for menu item: neW, opeN, savE, saveAS, prinT, exiT,           *redO, undO, copY, cuT, pastE, finD, findNexT, selectALL, lineWraP, fonT &amp; abouT           *the actions was written @Actions.java           */          neW.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          opeN.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          savE.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAS.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          prinT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          exiT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.exiT();              }          });          selectALL.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.selectALL();              }          });          lineWraP.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.lineWraP();              }          });          fonT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          abouT.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *adding action listener for the button in the tool bar: newButton, openButton,           *saveButton, saveAsButton, printButton, redoButton, undoButton, copyButton,           *cutButton, pasteButton, findButton, selectALL, lineWraP, fontButton &amp; aboutButton           *the actions was written @Actions.java           */          newButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.neW();              }          });          openButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.opeN();              }          });          saveButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.savE();              }          });          saveAsButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.saveAs();              }          });          printButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.prinT();              }          });          fontButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.fonT();              }          });          aboutButton.addActionListener(new ActionListener(){              public void actionPerformed(ActionEvent ae){                  actions.abouT();              }          });            /**           *Setting the Line Wrap &amp; Wrap Style Word features are true           */          textArea.setLineWrap(true);          textArea.setWrapStyleWord(true);          /**           *for making the program at the center,           *@see Center.java           */          center.nCenter();          show();      }-&gt;		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">requires</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-10" source="9" target="10" label="9-10">
            <data key="Explanations">Block 09 mutually excludes Block 10 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-11" source="9" target="11" label="9-11">
            <data key="Explanations">Block 09 mutually excludes Block 11 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-4" source="9" target="4" label="9-4">
            <data key="Explanations">Block 04 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-5" source="9" target="5" label="9-5">
            <data key="Explanations">Block 05 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-6" source="9" target="6" label="9-6">
            <data key="Explanations">Block 06 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-7" source="9" target="7" label="9-7">
            <data key="Explanations">Block 07 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
        <edge id="9-8" source="9" target="8" label="9-8">
            <data key="Explanations">Block 08 mutually excludes Block 09 (1 reasons) [		ConstructorDecl: Notepad({FormalParametersInternal})]</data>
            <data key="Label">mutually excludes</data>
            <data key="NumberOfReasons">1</data>
        </edge>
    </graph>
</graphml>